{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/no/code/registry-template-v4/packages/app/registry/polkadot-ui/lib/types.polkadot-ui.ts"],"sourcesContent":["import type { ChainDefinition } from \"polkadot-api\";\n\nexport interface ChainConfig {\n  readonly descriptor: ChainDefinition;\n  readonly endpoint: string;\n  readonly displayName: string;\n}\n\nexport interface PolkadotConfig<\n  TChains extends Readonly<Record<string, ChainConfig>> = Readonly<\n    Record<string, ChainConfig>\n  >\n> {\n  readonly chains: TChains;\n  readonly defaultChain: keyof TChains;\n}\n\nexport function definePolkadotConfig<\n  const TChains extends Readonly<Record<string, ChainConfig>>\n>(config: PolkadotConfig<TChains>) {\n  return config;\n}\n"],"names":[],"mappings":";;;AAiBO,SAAS,qBAEd,MAA+B;IAC/B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/no/code/registry-template-v4/packages/app/registry/polkadot-ui/lib/config.polkadot-ui.ts"],"sourcesContent":["// To add more chains, run: npx papi add <chain-name> -n <chain-name>\n// Then import the descriptor here and add it to the chains configuration\nimport { paseo_asset_hub, paseo } from \"@polkadot-api/descriptors\";\nimport { definePolkadotConfig } from \"@/registry/polkadot-ui/lib/types.polkadot-ui\";\n\nexport const polkadotConfig = definePolkadotConfig({\n  chains: {\n    paseo_asset_hub: {\n      descriptor: paseo_asset_hub,\n      endpoint: \"wss://sys.ibp.network/asset-hub-paseo\",\n      displayName: \"Paseo Asset Hub\",\n    },\n    paseo: {\n      descriptor: paseo,\n      endpoint: \"wss://sys.ibp.network/paseo\",\n      displayName: \"Paseo Relay Chain\",\n    },\n    // Add more chains here after running `npx papi add <chain-name>`\n    // Example for adding Polkadot mainnet:\n    // 1. Run: npx papi add polkadot -n polkadot\n    // 2. Import: import { polkadot } from \"@polkadot-api/descriptors\";\n    // 3. Add configuration:\n    // polkadot: {\n    //   descriptor: polkadot,\n    //   endpoint: \"wss://polkadot-rpc.publicnode.com\",\n    //   displayName: \"Polkadot\",\n    // },\n  },\n  defaultChain: \"paseo_asset_hub\",\n} as const);\n\n// Simple type aliases for type safety\nexport type ChainId = keyof typeof polkadotConfig.chains;\nexport type ChainDescriptor<T extends ChainId> =\n  (typeof polkadotConfig.chains)[T][\"descriptor\"];\n"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,yEAAyE;;;;AACzE;AACA;;;AAEO,MAAM,iBAAiB,CAAA,GAAA,kLAAA,CAAA,uBAAoB,AAAD,EAAE;IACjD,QAAQ;QACN,iBAAiB;YACf,YAAY,uXAAA,CAAA,kBAAe;YAC3B,UAAU;YACV,aAAa;QACf;QACA,OAAO;YACL,YAAY,uXAAA,CAAA,QAAK;YACjB,UAAU;YACV,aAAa;QACf;IAWF;IACA,cAAc;AAChB","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/no/code/registry-template-v4/packages/app/registry/polkadot-ui/lib/utils.polkadot-ui.ts"],"sourcesContent":["import type { ChainConfig } from \"@/registry/polkadot-ui/lib/types.polkadot-ui\";\n\n// Generic helper functions that work with any polkadot config\nexport function getChainIds<T extends Record<string, ChainConfig>>(\n  chains: T\n): (keyof T)[] {\n  return Object.keys(chains) as (keyof T)[];\n}\n\nexport function getChainConfig<\n  T extends Record<string, ChainConfig>,\n  K extends keyof T\n>(chains: T, chainId: K): T[K] {\n  return chains[chainId];\n}\n\nexport function isValidChainId<T extends Record<string, ChainConfig>>(\n  chains: T,\n  chainId: string\n): chainId is string & keyof T {\n  return chainId in chains;\n}\n"],"names":[],"mappings":";;;;;AAGO,SAAS,YACd,MAAS;IAET,OAAO,OAAO,IAAI,CAAC;AACrB;AAEO,SAAS,eAGd,MAAS,EAAE,OAAU;IACrB,OAAO,MAAM,CAAC,QAAQ;AACxB;AAEO,SAAS,eACd,MAAS,EACT,OAAe;IAEf,OAAO,WAAW;AACpB","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/no/code/registry-template-v4/packages/app/registry/polkadot-ui/providers/polkadot-provider.tsx"],"sourcesContent":["\"use client\";\n\nimport { createClient, TypedApi } from \"polkadot-api\";\nimport { getWsProvider } from \"polkadot-api/ws-provider/web\";\nimport { withPolkadotSdkCompat } from \"polkadot-api/polkadot-sdk-compat\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport {\n  polkadotConfig,\n  type ChainId,\n  type ChainDescriptor,\n} from \"@/registry/polkadot-ui/lib/config.polkadot-ui\";\nimport {\n  getChainIds,\n  getChainConfig,\n  isValidChainId,\n} from \"@/registry/polkadot-ui/lib/utils.polkadot-ui\";\n\n// Type for the API based on configured chains\ntype ConfiguredChainApi<T extends ChainId> = TypedApi<ChainDescriptor<T>>;\n\n// Create a composite API type that includes all registered chains\ntype CompositeApi = {\n  [K in ChainId]: ConfiguredChainApi<K>;\n};\n\ninterface PolkadotContextValue {\n  // Current active chain and its API\n  currentChain: ChainId;\n  api: ConfiguredChainApi<ChainId> | null;\n  isLoading: (chainId: ChainId) => boolean;\n  error: string | null;\n\n  // All APIs for all registered chainsp\n  apis: Partial<CompositeApi>;\n\n  // Function to switch active chain (type-safe)\n  setApi: (chainId: ChainId) => void;\n\n  // Connection management\n  disconnect: () => void;\n  isConnected: (chainId: ChainId) => boolean;\n\n  // Chain information\n  chainName: string | null;\n  availableChains: ChainId[];\n}\n\nconst PolkadotContext = createContext<PolkadotContextValue | undefined>(\n  undefined\n);\n\ninterface PolkadotProviderProps {\n  children: React.ReactNode;\n}\n\nexport function PolkadotProvider({ children }: PolkadotProviderProps) {\n  const [currentChain, setCurrentChain] = useState<ChainId>(\n    polkadotConfig.defaultChain\n  );\n  const [apis, setApis] = useState<Partial<CompositeApi>>({});\n  const [clients, setClients] = useState<\n    Map<ChainId, ReturnType<typeof createClient>>\n  >(new Map());\n  const [loadingStates, setLoadingStates] = useState<Map<ChainId, boolean>>(\n    new Map()\n  );\n  const [errorStates, setErrorStates] = useState<Map<ChainId, string | null>>(\n    new Map()\n  );\n\n  // Initialize the default chain on mount\n  useEffect(() => {\n    initializeChain(polkadotConfig.defaultChain);\n  }, []);\n\n  const initializeChain = async (chainId: ChainId) => {\n    // Don't initialize if already connected\n    if (apis[chainId]) return;\n\n    setLoadingStates((prev) => new Map(prev).set(chainId, true));\n    setErrorStates((prev) => new Map(prev).set(chainId, null));\n\n    try {\n      const chainConfig = getChainConfig(polkadotConfig.chains, chainId);\n\n      console.log(\n        `Connecting to ${chainConfig.displayName} at ${chainConfig.endpoint}`\n      );\n\n      // Create client with the selected chain\n      const client = createClient(\n        withPolkadotSdkCompat(getWsProvider(chainConfig.endpoint))\n      );\n\n      // Get typed API for the selected chain\n      const typedApi = client.getTypedApi(\n        chainConfig.descriptor\n      ) as ConfiguredChainApi<typeof chainId>;\n\n      setClients((prev) => new Map(prev).set(chainId, client));\n      setApis((prev) => ({ ...prev, [chainId]: typedApi }));\n\n      console.log(`Successfully connected to ${chainConfig.displayName}`);\n    } catch (err) {\n      console.error(`Failed to initialize ${chainId}:`, err);\n      setErrorStates((prev) =>\n        new Map(prev).set(\n          chainId,\n          err instanceof Error\n            ? err.message\n            : \"Failed to initialize Polkadot API\"\n        )\n      );\n    } finally {\n      setLoadingStates((prev) => new Map(prev).set(chainId, false));\n    }\n  };\n\n  const setApi = (chainId: ChainId) => {\n    if (!isValidChainId(polkadotConfig.chains, chainId)) {\n      console.error(`Invalid chain ID: ${chainId}`);\n      return;\n    }\n\n    setCurrentChain(chainId);\n    // Initialize the chain if not already connected\n    if (!apis[chainId]) {\n      initializeChain(chainId);\n    }\n  };\n\n  const disconnect = () => {\n    clients.forEach((client) => client.destroy());\n    setClients(new Map());\n    setApis({});\n    setLoadingStates(new Map());\n    setErrorStates(new Map());\n    setCurrentChain(polkadotConfig.defaultChain);\n  };\n\n  const isConnected = (chainId: ChainId): boolean => {\n    return !!apis[chainId];\n  };\n\n  const isLoading = (chainId: ChainId): boolean => {\n    return loadingStates.get(chainId) || false;\n  };\n\n  const currentChainConfig = getChainConfig(\n    polkadotConfig.chains,\n    currentChain\n  );\n\n  const value: PolkadotContextValue = {\n    currentChain,\n    api: apis[currentChain] || null,\n    error: errorStates.get(currentChain) || null,\n    apis,\n    setApi,\n    disconnect,\n    isConnected,\n    isLoading,\n    chainName: currentChainConfig.displayName,\n    availableChains: getChainIds(polkadotConfig.chains),\n  };\n\n  return (\n    <PolkadotContext.Provider value={value}>\n      {children}\n    </PolkadotContext.Provider>\n  );\n}\n\nexport function usePolkadot(): PolkadotContextValue {\n  const context = useContext(PolkadotContext);\n\n  if (context === undefined) {\n    throw new Error(\"usePolkadot must be used within a PolkadotProvider\");\n  }\n\n  return context;\n}\n\n// Helper to get properly typed API (maintains backward compatibility)\nexport function useTypedPolkadotApi(): ConfiguredChainApi<ChainId> | null {\n  const { api } = usePolkadot();\n  return api;\n}\n\n// Type exports\nexport type { ChainId, ConfiguredChainApi, CompositeApi };\n"],"names":[],"mappings":"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","debugId":null}}]
}