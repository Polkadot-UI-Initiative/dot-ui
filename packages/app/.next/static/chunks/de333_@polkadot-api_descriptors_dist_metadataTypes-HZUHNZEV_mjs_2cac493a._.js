(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/.pnpm/@polkadot-api+descriptors@file+packages+app+.papi+descriptors_polkadot-api@1.14.1_jiti@2.4.2_postcss@8.5.6_rxjs@7.8.2_/node_modules/@polkadot-api/descriptors/dist/metadataTypes-HZUHNZEV.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// .papi/descriptors/src/metadataTypes.ts
__turbopack_context__.s({
    "default": (()=>metadataTypes_default)
});
var content = "";
var metadataTypes_default = content;
;
}}),
}]);

//# sourceMappingURL=de333_%40polkadot-api_descriptors_dist_metadataTypes-HZUHNZEV_mjs_2cac493a._.js.map