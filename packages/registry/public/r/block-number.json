{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-number",
  "type": "registry:component",
  "title": "Block Number",
  "description": "A simple block number component that displays the current block number from Polkadot Asset Hub. Need to setup dedot.",
  "dependencies": [
    "dedot"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/polkadot-ui/blocks/block-number/components/block-number.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\";\nimport { useBlockNumber } from \"../hooks/use-block-number\"\nimport { useApiContext } from \"../../../providers/api-provider\";\nimport { ChainId } from \"../../../lib/config.polkadot-ui\";\n\nexport function BlockNumber() {\n  const { blockNumber, isLoading } = useBlockNumber(); \n  const { currentChain, chain, setChainId, availableChains } = useApiContext();\n  const [switchingChain, setSwitchingChain] = useState<string | null>(null);\n\n  const handleChainSwitch = (chainId: ChainId) => {\n    if (chainId === currentChain) return;\n    \n    setSwitchingChain(chainId);\n    try {\n      setChainId(chainId as ChainId);\n    } finally {\n      setSwitchingChain(null);\n    }\n  };\n\n  if (!chain) {\n    return (\n      <div className=\"flex flex-col items-center gap-4 p-8 bg-white rounded-xl shadow-lg border\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-32 mb-4\"></div>\n          <div className=\"h-12 bg-gray-200 rounded w-48 mb-4\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-40\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col items-center gap-6 p-8 bg-white rounded-xl shadow-lg border max-w-md mx-auto\">\n      {/* Chain Info */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-600 mb-1\">Current block on</p>\n        <h2 className=\"text-lg font-semibold text-gray-900\">{chain.displayName}</h2>\n      </div>\n\n      {/* Current Block Number */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-600 mb-2\">Block Number</p>\n        {isLoading ? (\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        ) : (\n          <p className=\"text-4xl font-bold text-blue-600 tabular-nums\">\n            {blockNumber.toLocaleString()}\n          </p>\n        )}\n      </div>\n\n      {/* Chain Selector Buttons */}\n      <div className=\"w-full\">\n        <p className=\"text-sm text-gray-600 mb-3 text-center\">Switch Network</p>\n        <div className=\"flex gap-2 flex-wrap justify-center\">\n          {availableChains.map((chainId) => {\n            const isActive = chainId === currentChain;\n            const isLoading = switchingChain === chainId;\n            \n            return (\n              <button \n                key={chainId} \n                onClick={() => handleChainSwitch(chainId)}\n                disabled={isLoading || isActive}\n                className={`\n                  px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200\n                  ${isActive \n                    ? 'bg-blue-600 text-white shadow-md' \n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-sm'\n                  }\n                  ${isLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                  disabled:opacity-50 disabled:cursor-not-allowed\n                `}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-3 w-3 border-b border-current\"></div>\n                    <span>Switching...</span>\n                  </div>\n                ) : (\n                  <span className=\"capitalize\">{chainId}</span>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/polkadot-ui/blocks/block-number/hooks/use-block-number.ts",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\";\nimport { useApiContext } from \"../../../providers/api-provider\";\n\nexport function useBlockNumber() {\n    const [blockNumber, setBlockNumber] = useState(0);\n    const [isLoading, setLoading] = useState(true);\n    const { api, legacy, apiReady } = useApiContext();\n\n    useEffect(() => {\n       let unsubscribe: any;\n       \n       (async () => {\n        const client = api || legacy;\n        if (!client) {\n            return;\n        }\n        \n        setLoading(true);\n\n        unsubscribe = await client.query.system.number((blockNumber: number) => {   \n            setBlockNumber(blockNumber);\n            setLoading(false);\n        });\n       })();\n\n        return () => {\n            unsubscribe && unsubscribe();\n        };\n    }, [api, apiReady, legacy]);\n\n    return {\n        blockNumber,\n        isLoading,\n    };\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/polkadot-ui/blocks/block-number/hooks/use-api.ts",
      "content": "\"use client\"\n\nimport { useState } from 'react';\nimport { useAsync, useLocalStorage, useToggle } from 'react-use';\nimport { JsonRpcApi } from '../../../lib/types.polkadot-ui';\nimport { DedotClient, LegacyClient, WsProvider } from 'dedot';\nimport { SubstrateChain } from '../../../lib/types.polkadot-ui';\n\ntype UseApi = {\n  ready: boolean;\n  jsonRpc: JsonRpcApi;\n  api?: DedotClient;\n  legacy?: LegacyClient;\n};\n\nexport default function useApi(chain?: SubstrateChain): UseApi {\n  const [jsonRpc] = useLocalStorage<JsonRpcApi>('SETTINGS/JSON_RPC_API', JsonRpcApi.NEW);\n  const [cacheMetadata] = useLocalStorage<boolean>('SETTINGS/CACHE_METADATA',true);\n\n  const [ready, setReady] = useToggle(false);\n  const [api, setApi] = useState<DedotClient>();\n  const [legacy, setLegacy] = useState<LegacyClient>();\n\n  useAsync(async () => {\n    if (!chain) {\n      return;\n    }\n\n    if (api) {\n      await api.disconnect();\n    }\n\n    if (legacy) {\n      await legacy.disconnect()\n    }\n\n    setReady(false);\n\n    const provider = new WsProvider(chain.rpcUrls);\n    provider.on('connected', (endpoint) => {\n    console.log('Connected Endpoint', endpoint);\n    })\n\n    if (jsonRpc == JsonRpcApi.LEGACY) {\n      setLegacy(await LegacyClient.new({ provider, cacheMetadata }));\n      setApi(undefined);\n    } else {\n      setApi(await DedotClient.new({ provider, cacheMetadata }));\n      setLegacy(undefined)\n    }\n\n    setReady(true);\n  }, [jsonRpc, chain?.rpcUrls]);\n\n  return { ready, api, legacy, jsonRpc: jsonRpc! };\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/polkadot-ui/blocks/block-number/hooks/use-wallets.ts",
      "content": "\"use client\";\n\nimport { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport ExtensionWallet from '../../../lib/extension-wallet.polkadot-ui';\nimport Wallet from '../../../lib/wallet.polkadot-ui';\n\nconst WALLETS: Wallet[] = [\n  new ExtensionWallet({\n    name: 'SubWallet',\n    id: 'subwallet-js',\n    logo: '/subwallet-logo.svg',\n    installUrl: '',\n  }),\n  new ExtensionWallet({\n    name: 'Polkadot{.js}',\n    id: 'polkadot-js',\n    logo: '/polkadot-js-logo.svg',\n    installUrl: '',\n  }),\n  new ExtensionWallet({\n    name: 'Talisman',\n    id: 'talisman',\n    logo: '/talisman-logo.svg',\n    installUrl: '',\n  }),\n];\n\nexport default function useWallets(): Wallet[] {\n  const [wallets, setWallets] = useState<Wallet[]>(WALLETS);\n\n  useEffectOnce(() => {\n    for (let wallet of wallets) {\n      wallet\n        .initialize()\n        .then(() => {\n          setWallets([...wallets]);\n        })\n        .catch(() => {\n          console.error('Error while initializing wallet: ', wallet.name);\n        });\n    }\n  });\n\n  return wallets;\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/polkadot-ui/providers/api-provider.tsx",
      "content": "\"use client\"\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { JsonRpcApi } from '../lib/types.polkadot-ui';\nimport { ChainId, substrateConfig } from '../lib/config.polkadot-ui';\nimport { DedotClient, LegacyClient } from 'dedot';\nimport { PropsWithChildren } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { SubstrateChain } from '../lib/types.polkadot-ui';\nimport { getChainConfig, getChainIds } from '../lib/utils.polkadot-ui';\nimport useApi from '../blocks/block-number/hooks/use-api';\nimport { useWalletContext } from './wallet-provider';\n\ninterface ApiContextProps {\n  jsonRpc: JsonRpcApi;\n  api?: DedotClient;\n  legacy?: LegacyClient;\n  apiReady: boolean;\n  chain: SubstrateChain;\n  setChainId: (id: ChainId) => void;\n  currentChain: ChainId;\n  availableChains: ChainId[];\n}\n\nconst DEFAULT_CHAIN = substrateConfig.chains.paseo;\n\nexport const ApiContext = createContext<ApiContextProps>({\n  apiReady: false,\n  jsonRpc: JsonRpcApi.NEW,\n  chain: DEFAULT_CHAIN,\n  currentChain: DEFAULT_CHAIN.network,\n  availableChains: getChainIds(substrateConfig.chains),\n  setChainId: () => {},\n});\n\n\n// This is a wrapper for the api provider.\n// It should be wrapped around the app to provide the api context to the app, below the WalletProvider.\nexport default function ApiProvider({ children }: PropsWithChildren) {\n  const { injectedApi } = useWalletContext();\n  const [chainId, setChainId] = useLocalStorage<ChainId>('SELECTED_CHAIN_ID');\n  const [chain, setChain] = useState<SubstrateChain>();\n  const { ready, api, legacy, jsonRpc } = useApi(chain);\n\n  useEffect(() => {\n    if (chainId) {\n      setChain(getChainConfig(substrateConfig.chains, chainId as ChainId))\n    } else {\n      setChain(DEFAULT_CHAIN)\n    }\n  }, [chainId]);\n\n  useEffect(() => {\n    api?.setSigner(injectedApi?.signer as any);\n    legacy?.setSigner(injectedApi?.signer as any);\n  }, [injectedApi, api, legacy])\n\n  const value: ApiContextProps = {  \n    api,\n    legacy,\n    jsonRpc,\n    apiReady: ready,\n    chain: chain!,\n    setChainId,\n    currentChain: chainId!,\n    availableChains: getChainIds(substrateConfig.chains),\n  }\n\n  return (\n    <ApiContext.Provider value={value}>\n      {children}\n    </ApiContext.Provider>\n  );\n}\n\nexport function useApiContext(): ApiContextProps {\n  const context = useContext(ApiContext);\n\n  if (context === undefined) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n\n  return context;\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/providers/wallet-provider.tsx",
      "content": "\"use client\";\n\nimport { createContext, useContext, useState } from 'react';\nimport { useAsync, useLocalStorage } from 'react-use';\nimport { InjectedAccount } from '../lib/types.polkadot-ui';\nimport { UpdatableInjected } from '@coong/sdk/types';\nimport useWallets from '../blocks/block-number/hooks/use-wallets';\nimport Wallet from '../lib/wallet.polkadot-ui';\nimport { PropsWithChildren } from 'react';\n\ninterface WalletContextProps {\n  accounts: InjectedAccount[];\n  injectedApi?: UpdatableInjected;\n  enableWallet: (id: string) => void;\n  signOut: () => void;\n  availableWallets: Wallet[];\n  connectedWalletId?: string;\n  connectedWallet?: Wallet;\n}\n\nexport const WalletContext = createContext<WalletContextProps>({\n  accounts: [],\n  enableWallet: () => {},\n  signOut: () => {},\n  availableWallets: [],\n});\n\nexport const useWalletContext = () => {\n  return useContext(WalletContext);\n};\n\ninterface WalletProviderProps extends PropsWithChildren {\n  appName: string;\n  className?: string;\n}\n\n// This is a wrapper for the wallet provider.\n// It should be wrapped around the app to provide the wallet context to the app, above the ApiProvider.\nexport default function WalletProvider({ children, appName }: WalletProviderProps) {\n  const availableWallets = useWallets();\n  const [accounts, setAccounts] = useState<InjectedAccount[]>([]);\n  const [injectedApi, setInjectedApi] = useState<UpdatableInjected>();\n  const [connectedWalletId, setConnectedWalletId, removeConnectedWalletId] =\n    useLocalStorage<string>('CONNECTED_WALLET');\n  const [connectedWallet, setConnectedWallet] = useState<Wallet>();\n\n  const getWallet = (id: string): Wallet => {\n    const targetWallet: Wallet = availableWallets.find((one) => one.id === id)!;\n    if (!targetWallet) {\n      throw new Error('Invalid Wallet ID');\n    }\n\n    return targetWallet;\n  };\n\n  useAsync(async () => {\n    if (!connectedWalletId) {\n      setConnectedWallet(undefined);\n      return;\n    }\n\n    let unsub: () => void;\n    try {\n      const targetWallet: Wallet = getWallet(connectedWalletId);\n      setConnectedWallet(targetWallet);\n\n      await targetWallet.waitUntilReady();\n\n      const injectedProvider = targetWallet.injectedProvider;\n      if (!injectedProvider?.enable) {\n        throw new Error('Wallet is not existed!');\n      }\n\n      const injectedApi = await injectedProvider.enable(appName);\n\n      unsub = injectedApi.accounts.subscribe(setAccounts);\n\n      setInjectedApi(injectedApi);\n    } catch (e: any) {\n      console.error('Error while enabling wallet: ', e);\n      setConnectedWallet(undefined);\n      removeConnectedWalletId();\n    }\n\n    return () => unsub && unsub();\n  }, [connectedWalletId]);\n\n  const enableWallet = async (walletId: string) => {\n    setConnectedWalletId(walletId);\n  };\n\n  const signOut = () => {\n    if (connectedWallet) {\n      const walletApi = connectedWallet.injectedProvider;\n\n      if (walletApi?.disable) {\n        walletApi.disable();\n      }\n    }\n\n    removeConnectedWalletId();\n    setInjectedApi(undefined);\n  };\n\n  return (\n    <WalletContext.Provider\n      value={{\n        accounts,\n        enableWallet,\n        injectedApi,\n        signOut,\n        availableWallets,\n        connectedWalletId,\n        connectedWallet,\n      }}>\n      {children}\n    </WalletContext.Provider>\n  );\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/utils.polkadot-ui.ts",
      "content": "import { ChainId, ChainNetwork, substrateConfig } from \"./config.polkadot-ui\"\nimport { SubstrateChain } from \"./types.polkadot-ui\"\n\nexport function getChainConfig<T extends Record<string, SubstrateChain>, K extends keyof T>(chains: T, chainId: K): T[K] {\n  return chains[chainId]\n}\n\nexport function getChainIds<T extends Record<string, SubstrateChain>>(chains: T): (keyof T)[] {\n  return Object.keys(chains) as (keyof T)[];\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/types.polkadot-ui.ts",
      "content": "export interface SubstrateChain {\n    readonly network: string\n    readonly displayName: string\n    readonly rpcUrls: string[]\n    readonly isTestnet: boolean\n    readonly icon?: string\n    readonly explorerUrls?: Partial<Record<SubstrateExplorer, string>>\n    readonly faucetUrls?: string[]\n}\n\nexport enum SubstrateExplorer {\n    Subscan = 'subscan',\n    PolkadotJs = 'polkadot-js',\n    PapiExplorer = 'papi-explorer',\n}\n\nexport interface SubstrateChainConfig<\n    TChains extends Readonly<Record<string, SubstrateChain>> = Readonly<Record<string, SubstrateChain>>,\n> {\n    readonly chains: TChains\n    readonly defaultChain: keyof TChains\n}\n\nexport function defineSubstrateChainConfig<const TChains extends Readonly<Record<string, SubstrateChain>>>(config: SubstrateChainConfig<TChains>) {\n    return config;\n}\n\nexport type KeypairType = 'ed25519' | 'sr25519' | 'ecdsa' | 'ethereum';\n\nexport interface InjectedAccount {\n    address: string;\n    genesisHash?: string | null;\n    name?: string;\n    type?: KeypairType;\n}\n\nexport enum JsonRpcApi {\n    LEGACY = 'legacy',\n    NEW = 'new'\n}\n  ",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/config.polkadot-ui.ts",
      "content": "import { defineSubstrateChainConfig, SubstrateExplorer } from \"./types.polkadot-ui\"\n\nexport const substrateConfig = defineSubstrateChainConfig({\n    chains: {\n        paseo: {\n            network: 'paseo',\n            displayName: 'Paseo Relay Chain',\n            rpcUrls: ['wss://sys.ibp.network/paseo'],\n            explorerUrls: {\n                [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent('wss://sys.ibp.network/paseo')}#/explorer`,\n            },\n            isTestnet: true,\n        },\n        paseoAssetHub: {\n            network: 'paseo-asset-hub',\n            displayName: 'Paseo Asset Hub',\n            rpcUrls: ['wss://sys.ibp.network/asset-hub-paseo'],\n            explorerUrls: {\n                [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent('wss://sys.ibp.network/asset-hub-paseo')}#/explorer`,\n            },\n            isTestnet: true,\n        },\n    },\n    defaultChain: 'paseoAssetHub',\n} as const);\n\nexport type ChainId = keyof typeof substrateConfig.chains\nexport type ChainNetwork<T extends ChainId> = typeof substrateConfig.chains[T]['network']",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/extension-wallet.polkadot-ui.ts",
      "content": "import Wallet, { WalletOptions } from './wallet.polkadot-ui';\n\ninterface ExtensionWalletOptions extends WalletOptions {\n  installUrl: string;\n}\n\nexport default class ExtensionWallet extends Wallet<ExtensionWalletOptions> {\n  get installUrl() {\n    return this.options.installUrl;\n  }\n\n  get installed() {\n    return this.ready;\n  }\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/wallet.polkadot-ui.ts",
      "content": "import { InjectedWindow } from '@coong/sdk/types';\n\nexport interface WalletOptions {\n  id: string;\n  name: string;\n  logo: string;\n}\n\nabstract class Wallet<Options extends WalletOptions = WalletOptions> {\n  #options: Options;\n\n  constructor(options: Options) {\n    this.#options = options;\n  }\n\n  get id() {\n    return this.#options.id;\n  }\n\n  get name() {\n    return this.#options.name;\n  }\n\n  get logo() {\n    return this.#options.logo;\n  }\n\n  get options() {\n    return this.#options;\n  }\n\n  get version() {\n    return this.injectedProvider?.version;\n  }\n\n  get injectedWeb3() {\n    const injectedWindow = window as Window & InjectedWindow;\n\n    if (!injectedWindow.injectedWeb3) {\n      injectedWindow.injectedWeb3 = {};\n    }\n\n    return injectedWindow.injectedWeb3;\n  }\n\n  get injectedProvider() {\n    return this.injectedWeb3[this.id];\n  }\n\n  get ready() {\n    return !!this.injectedProvider;\n  }\n\n  get installed() {\n    return false;\n  }\n\n  async initialize() {\n    // To implement in subclass\n  }\n\n  async waitUntilReady() {\n    return new Promise<void>((resolve) => {\n      if (this.ready) {\n        resolve();\n        return;\n      }\n\n      const interval = setInterval(() => {\n        if (this.ready) {\n          clearInterval(interval);\n          resolve();\n        }\n      }, 10);\n    });\n  }\n}\n\nexport default Wallet;",
      "type": "registry:lib"
    }
  ]
}