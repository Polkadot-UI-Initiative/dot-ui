{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-number",
  "type": "registry:component",
  "title": "Block Number",
  "description": "A simple block number component that displays the current block number from Polkadot Asset Hub. Need to setup dedot.",
  "dependencies": [
    "dedot"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/polkadot-ui/blocks/block-number/components/block-number.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\";\nimport { useBlockNumber } from \"../hooks/use-block-number\"\nimport { useApiContext } from \"../../../providers/api-provider\";\nimport { ChainId } from \"../../../lib/config.polkadot-ui\";\n\nexport function BlockNumber() {\n  const { blockNumber, isLoading } = useBlockNumber(); \n  const { currentChain, chain, setChainId, availableChains } = useApiContext();\n  const [switchingChain, setSwitchingChain] = useState<string | null>(null);\n\n  const handleChainSwitch = (chainId: ChainId) => {\n    if (chainId === currentChain) return;\n    \n    setSwitchingChain(chainId);\n    try {\n      setChainId(chainId as ChainId);\n    } finally {\n      setSwitchingChain(null);\n    }\n  };\n\n  if (!chain) {\n    return (\n      <div className=\"flex flex-col items-center gap-4 p-8 bg-white rounded-xl shadow-lg border\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-32 mb-4\"></div>\n          <div className=\"h-12 bg-gray-200 rounded w-48 mb-4\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-40\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col items-center gap-6 p-8 bg-white rounded-xl shadow-lg border max-w-md mx-auto\">\n      {/* Chain Info */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-600 mb-1\">Current block on</p>\n        <h2 className=\"text-lg font-semibold text-gray-900\">{chain.displayName}</h2>\n      </div>\n\n      {/* Current Block Number */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-600 mb-2\">Block Number</p>\n        {isLoading ? (\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        ) : (\n          <p className=\"text-4xl font-bold text-blue-600 tabular-nums\">\n            {blockNumber.toLocaleString()}\n          </p>\n        )}\n      </div>\n\n      {/* Chain Selector Buttons */}\n      <div className=\"w-full\">\n        <p className=\"text-sm text-gray-600 mb-3 text-center\">Switch Network</p>\n        <div className=\"flex gap-2 flex-wrap justify-center\">\n          {availableChains.map((chainId) => {\n            const isActive = chainId === currentChain;\n            const isLoading = switchingChain === chainId;\n            \n            return (\n              <button \n                key={chainId} \n                onClick={() => handleChainSwitch(chainId)}\n                disabled={isLoading || isActive}\n                className={`\n                  px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200\n                  ${isActive \n                    ? 'bg-blue-600 text-white shadow-md' \n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-sm'\n                  }\n                  ${isLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                  disabled:opacity-50 disabled:cursor-not-allowed\n                `}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-3 w-3 border-b border-current\"></div>\n                    <span>Switching...</span>\n                  </div>\n                ) : (\n                  <span className=\"capitalize\">{chainId}</span>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/polkadot-ui/blocks/block-number/hooks/use-block-number.ts",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\";\nimport { useApiContext } from \"../../../providers/api-provider\";\n\nexport function useBlockNumber() {\n    const [blockNumber, setBlockNumber] = useState(0);\n    const [isLoading, setLoading] = useState(true);\n    const { api, legacy, apiReady } = useApiContext();\n\n    useEffect(() => {\n       let unsubscribe: any;\n       \n       (async () => {\n        const client = api || legacy;\n        if (!client) {\n            return;\n        }\n        \n        setLoading(true);\n\n        unsubscribe = await client.query.system.number((blockNumber: number) => {   \n            setBlockNumber(blockNumber);\n            setLoading(false);\n        });\n       })();\n\n        return () => {\n            unsubscribe && unsubscribe();\n        };\n    }, [api, apiReady, legacy]);\n\n    return {\n        blockNumber,\n        isLoading,\n    };\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/polkadot-ui/providers/api-provider.tsx",
      "content": "\"use client\"\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { JsonRpcApi } from '../lib/types.polkadot-ui';\nimport { ChainId, substrateConfig } from '../lib/config.polkadot-ui';\nimport { DedotClient, LegacyClient, WsProvider } from 'dedot';\nimport { PropsWithChildren } from 'react';\nimport { useLocalStorage, useAsync, useToggle } from 'react-use';\nimport { SubstrateChain } from '../lib/types.polkadot-ui';\nimport { getChainConfig, getChainIds } from '../lib/utils.polkadot-ui';\n\ninterface ApiContextProps {\n  jsonRpc: JsonRpcApi;\n  api?: DedotClient;\n  legacy?: LegacyClient;\n  apiReady: boolean;\n  currentChain: ChainId;\n  chain?: SubstrateChain;\n  setChainId: (chainId: ChainId) => void;\n  availableChains: ChainId[];\n}\n\nconst ApiContext = createContext<ApiContextProps | undefined>(undefined);\n\nexport default function ApiProvider({ children }: PropsWithChildren) {\n  const [currentChain, setCurrentChain] = useLocalStorage<ChainId>('SELECTED_CHAIN', 'paseoAssetHub');\n  const [chain, setChain] = useState<SubstrateChain | undefined>();\n  const availableChains = getChainIds(substrateConfig.chains);\n  \n  // API connection logic (moved from use-api.ts)\n  const [jsonRpc] = useLocalStorage<JsonRpcApi>('SETTINGS/JSON_RPC_API', JsonRpcApi.NEW);\n  const [cacheMetadata] = useLocalStorage<boolean>('SETTINGS/CACHE_METADATA', true);\n  const [apiReady, setApiReady] = useToggle(false);\n  const [api, setApi] = useState<DedotClient>();\n  const [legacy, setLegacy] = useState<LegacyClient>();\n\n  useAsync(async () => {\n    if (!chain) {\n      return;\n    }\n\n    if (api) {\n      await api.disconnect();\n    }\n\n    if (legacy) {\n      await legacy.disconnect();\n    }\n\n    setApiReady(false);\n\n    const provider = new WsProvider(chain.rpcUrls);\n    provider.on('connected', (endpoint) => {\n      console.log('Connected Endpoint', endpoint);\n    });\n\n    if (jsonRpc === JsonRpcApi.LEGACY) {\n      const legacyClient = await LegacyClient.new({ provider, cacheMetadata });\n      await legacyClient.connect();\n      setLegacy(legacyClient);\n      setApi(undefined);\n    } else {\n      const apiClient = await DedotClient.new({ provider, cacheMetadata });\n      await apiClient.connect();\n      setApi(apiClient);\n      setLegacy(undefined);\n    }\n\n    setApiReady(true);\n  }, [jsonRpc, chain?.rpcUrls]);\n\n  useEffect(() => {\n    if (currentChain && availableChains.includes(currentChain)) {\n      setChain(getChainConfig(substrateConfig.chains, currentChain));\n    }\n  }, [currentChain, availableChains]);\n\n  const setChainId = (chainId: ChainId) => {\n    setCurrentChain(chainId);\n    setChain(getChainConfig(substrateConfig.chains, chainId));\n  };\n\n  const value: ApiContextProps = {\n    jsonRpc: jsonRpc!,\n    api,\n    legacy,\n    apiReady,\n    currentChain: currentChain || 'paseoAssetHub',\n    chain,\n    setChainId,\n    availableChains,\n  };\n\n  return (\n    <ApiContext.Provider value={value}>\n      {children}\n    </ApiContext.Provider>\n  );\n}\n\nexport function useApiContext(): ApiContextProps {\n  const context = useContext(ApiContext);\n  if (!context) {\n    throw new Error('useApiContext must be used within an ApiProvider');\n  }\n  return context;\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/utils.polkadot-ui.ts",
      "content": "import { ChainId, ChainNetwork, substrateConfig } from \"./config.polkadot-ui\"\nimport { SubstrateChain } from \"./types.polkadot-ui\"\n\nexport function getChainConfig<T extends Record<string, SubstrateChain>, K extends keyof T>(chains: T, chainId: K): T[K] {\n  return chains[chainId]\n}\n\nexport function getChainIds<T extends Record<string, SubstrateChain>>(chains: T): (keyof T)[] {\n  return Object.keys(chains) as (keyof T)[];\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/types.polkadot-ui.ts",
      "content": "export interface SubstrateChain {\n    readonly network: string\n    readonly displayName: string\n    readonly rpcUrls: string[]\n    readonly isTestnet: boolean\n    readonly icon?: string\n    readonly explorerUrls?: Partial<Record<SubstrateExplorer, string>>\n    readonly faucetUrls?: string[]\n}\n\nexport enum SubstrateExplorer {\n    Subscan = 'subscan',\n    PolkadotJs = 'polkadot-js',\n    PapiExplorer = 'papi-explorer',\n}\n\nexport interface SubstrateChainConfig<\n    TChains extends Readonly<Record<string, SubstrateChain>> = Readonly<Record<string, SubstrateChain>>,\n> {\n    readonly chains: TChains\n    readonly defaultChain: keyof TChains\n}\n\nexport function defineSubstrateChainConfig<const TChains extends Readonly<Record<string, SubstrateChain>>>(config: SubstrateChainConfig<TChains>) {\n    return config;\n}\n\nexport type KeypairType = 'ed25519' | 'sr25519' | 'ecdsa' | 'ethereum';\n\nexport interface InjectedAccount {\n    address: string;\n    genesisHash?: string | null;\n    name?: string;\n    type?: KeypairType;\n}\n\nexport enum JsonRpcApi {\n    LEGACY = 'legacy',\n    NEW = 'new'\n}\n  ",
      "type": "registry:lib"
    },
    {
      "path": "registry/polkadot-ui/lib/config.polkadot-ui.ts",
      "content": "import { defineSubstrateChainConfig, SubstrateExplorer } from \"./types.polkadot-ui\"\n\nexport const substrateConfig = defineSubstrateChainConfig({\n    chains: {\n        paseo: {\n            network: 'paseo',\n            displayName: 'Paseo Relay Chain',\n            rpcUrls: ['wss://sys.ibp.network/paseo'],\n            explorerUrls: {\n                [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent('wss://sys.ibp.network/paseo')}#/explorer`,\n            },\n            isTestnet: true,\n        },\n        paseoAssetHub: {\n            network: 'paseo-asset-hub',\n            displayName: 'Paseo Asset Hub',\n            rpcUrls: ['wss://sys.ibp.network/asset-hub-paseo'],\n            explorerUrls: {\n                [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent('wss://sys.ibp.network/asset-hub-paseo')}#/explorer`,\n            },\n            isTestnet: true,\n        },\n    },\n    defaultChain: 'paseoAssetHub',\n} as const);\n\nexport type ChainId = keyof typeof substrateConfig.chains\nexport type ChainNetwork<T extends ChainId> = typeof substrateConfig.chains[T]['network']",
      "type": "registry:lib"
    }
  ]
}