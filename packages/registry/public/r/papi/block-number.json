{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-number",
  "type": "registry:component",
  "title": "Block Number (PAPI)",
  "description": "A block number component optimized for polkadot-api. Fast, type-safe, and efficient.",
  "dependencies": [
    "polkadot-api"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/dot-ui/blocks/block-number/components/block-number.papi.tsx",
      "content": "\"use client\";\n\nimport { useBlockNumber } from \"../hooks/use-block-number.papi\";\nimport { usePapi } from \"@/registry/dot-ui/providers/papi-provider\";\nimport { Button } from \"@/registry/dot-ui/ui/button\";\n\nexport function BlockNumber() {\n  const {\n    setApi,\n    availableChains,\n    isConnected,\n    isLoading,\n    currentChain,\n    chainName,\n  } = usePapi();\n\n  const { blockNumber, error } = useBlockNumber();\n\n  if (isLoading(currentChain)) {\n    return (\n      <div className=\"w-full max-w-md p-4 border rounded-md\">\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-semibold\">Block Number</h3>\n          <p className=\"text-sm text-gray-600\">Loading...</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n          <span className=\"text-sm text-gray-600\">\n            Connecting to {chainName} using PAPI...\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"w-full max-w-md p-4 border border-red-500 rounded-md bg-red-50\">\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-semibold text-red-800\">Block Number</h3>\n          <p className=\"text-sm text-red-600\">Error loading block number</p>\n        </div>\n        <div className=\"text-red-700 text-sm\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-md rounded-md\">\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-3xl font-bold text-polkadot-pink\">\n            {blockNumber?.toLocaleString() || \"Loading...\"}\n          </div>\n          <div className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n            PAPI\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"text-sm text-gray-600\">\n            Current chain: <span className=\"font-mono\">{chainName}</span>\n          </div>\n\n          <div className=\"flex gap-2 flex-wrap\">\n            {availableChains.map((chainId) => (\n              <Button\n                key={chainId}\n                variant={chainId === currentChain ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setApi(chainId)}\n                disabled={isLoading(chainId)}\n              >\n                {chainId}\n                {isConnected(chainId) && (\n                  <span className=\"ml-1 text-xs text-green-600\">‚óè</span>\n                )}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/block-number.tsx"
    },
    {
      "path": "registry/dot-ui/blocks/block-number/hooks/use-block-number.papi.ts",
      "content": "\"use client\";\nimport { usePapi } from \"@/registry/dot-ui/providers/papi-provider\";\nimport { useEffect, useState } from \"react\";\n\nexport function useBlockNumber() {\n  const { api, isLoading, error, currentChain, isConnected } = usePapi();\n  const [blockNumber, setBlockNumber] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (!api || isLoading(currentChain) || !isConnected(currentChain)) {\n      return;\n    }\n\n    let unsubscribe: (() => void) | undefined = () => {};\n    let isMounted = true;\n\n    try {\n      const subscription = api.query.System.Number.watchValue(\"best\").subscribe(\n        (value: number) => {\n          if (isMounted) {\n            setBlockNumber(value);\n          }\n        }\n      );\n      unsubscribe = () => subscription?.unsubscribe();\n    } catch (error) {\n      console.error(\"Failed to subscribe to block number:\", error);\n    }\n\n    return () => {\n      isMounted = false;\n      unsubscribe?.();\n    };\n  }, [api, currentChain, isLoading, isConnected]);\n\n  return {\n    blockNumber,\n    isLoading: isLoading(currentChain),\n    error,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-block-number.ts"
    },
    {
      "path": "registry/dot-ui/providers/papi-provider.tsx",
      "content": "\"use client\";\n\nimport { createClient, TypedApi } from \"polkadot-api\";\nimport { getWsProvider } from \"polkadot-api/ws-provider/web\";\nimport { withPolkadotSdkCompat } from \"polkadot-api/polkadot-sdk-compat\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport {\n  polkadotConfig,\n  type ChainId,\n  type ChainDescriptor,\n} from \"@/registry/dot-ui/lib/config.papi\";\nimport {\n  getChainIds,\n  getChainConfig,\n  isValidChainId,\n} from \"@/registry/dot-ui/lib/utils.polkadot-ui\";\n\n// Type for the API based on configured chains\ntype ConfiguredChainApi<T extends ChainId> = TypedApi<ChainDescriptor<T>>;\n\n// Create a composite API typse that includes all registered chains\ntype CompositeApi = {\n  [K in ChainId]: ConfiguredChainApi<K>;\n};\n\ninterface PolkadotContextValue {\n  // Current active chain and its API\n  currentChain: ChainId;\n  api: ConfiguredChainApi<ChainId> | null;\n  isLoading: (chainId: ChainId) => boolean;\n  error: string | null;\n\n  // All APIs for all registered chainsp\n  apis: Partial<CompositeApi>;\n\n  // Function to switch active chain (type-safe)\n  setApi: (chainId: ChainId) => void;\n\n  // Connection management\n  disconnect: () => void;\n  isConnected: (chainId: ChainId) => boolean;\n\n  // Chain information\n  chainName: string | null;\n  availableChains: ChainId[];\n}\n\nconst PolkadotContext = createContext<PolkadotContextValue | undefined>(\n  undefined\n);\n\ninterface PolkadotProviderProps {\n  children: React.ReactNode;\n}\n\nexport function PolkadotProvider({ children }: PolkadotProviderProps) {\n  const [currentChain, setCurrentChain] = useState<ChainId>(\n    polkadotConfig.defaultChain\n  );\n  const [apis, setApis] = useState<Partial<CompositeApi>>({});\n  const [clients, setClients] = useState<\n    Map<ChainId, ReturnType<typeof createClient>>\n  >(new Map());\n  const [loadingStates, setLoadingStates] = useState<Map<ChainId, boolean>>(\n    new Map()\n  );\n  const [errorStates, setErrorStates] = useState<Map<ChainId, string | null>>(\n    new Map()\n  );\n\n  // Initialize the default chain on mount\n  useEffect(() => {\n    initializeChain(polkadotConfig.defaultChain);\n  }, []);\n\n  const initializeChain = async (chainId: ChainId) => {\n    // Don't initialize if already connected\n    if (apis[chainId]) return;\n\n    setLoadingStates((prev) => new Map(prev).set(chainId, true));\n    setErrorStates((prev) => new Map(prev).set(chainId, null));\n\n    try {\n      const chainConfig = getChainConfig(polkadotConfig.chains, chainId);\n\n      // Validate that endpoints array exists and has at least one element\n      if (!chainConfig.endpoints || !chainConfig.endpoints[0]) {\n        throw new Error(\n          `Chain ${chainId} (${chainConfig.displayName}) has no endpoints configured. Please add at least one endpoint to the chain configuration.`\n        );\n      }\n\n      const endpoint = chainConfig.endpoints[0];\n      console.log(`Connecting to ${chainConfig.displayName} at ${endpoint}`);\n\n      // Create client with the selected chain\n      const client = createClient(\n        withPolkadotSdkCompat(getWsProvider(endpoint))\n      );\n\n      // Get typed API for the selected chain\n      const typedApi = client.getTypedApi(\n        polkadotConfig.chains[chainId].descriptor\n      ) as ConfiguredChainApi<typeof chainId>;\n\n      setClients((prev) => new Map(prev).set(chainId, client));\n      setApis((prev) => ({ ...prev, [chainId]: typedApi }));\n\n      console.log(`Successfully connected to ${chainConfig.displayName}`);\n    } catch (err) {\n      console.error(`Failed to initialize ${chainId}:`, err);\n      setErrorStates((prev) =>\n        new Map(prev).set(\n          chainId,\n          err instanceof Error\n            ? err.message\n            : \"Failed to initialize Polkadot API\"\n        )\n      );\n    } finally {\n      setLoadingStates((prev) => new Map(prev).set(chainId, false));\n    }\n  };\n\n  const setApi = (chainId: ChainId) => {\n    if (!isValidChainId(polkadotConfig.chains, chainId)) {\n      console.error(`Invalid chain ID: ${chainId}`);\n      return;\n    }\n\n    setCurrentChain(chainId);\n    // Initialize the chain if not already connected\n    if (!apis[chainId]) {\n      initializeChain(chainId);\n    }\n  };\n\n  const disconnect = () => {\n    clients.forEach((client) => client.destroy());\n    setClients(new Map());\n    setApis({});\n    setLoadingStates(new Map());\n    setErrorStates(new Map());\n    setCurrentChain(polkadotConfig.defaultChain);\n  };\n\n  const isConnected = (chainId: ChainId): boolean => {\n    return !!apis[chainId];\n  };\n\n  const isLoading = (chainId: ChainId): boolean => {\n    return loadingStates.get(chainId) || false;\n  };\n\n  const currentChainConfig = getChainConfig(\n    polkadotConfig.chains,\n    currentChain\n  );\n\n  const value: PolkadotContextValue = {\n    currentChain,\n    api: apis[currentChain] || null,\n    error: errorStates.get(currentChain) || null,\n    apis,\n    setApi,\n    disconnect,\n    isConnected,\n    isLoading,\n    chainName: currentChainConfig.displayName,\n    availableChains: getChainIds(polkadotConfig.chains),\n  };\n\n  return (\n    <PolkadotContext.Provider value={value}>\n      {children}\n    </PolkadotContext.Provider>\n  );\n}\n\nexport function usePapi(): PolkadotContextValue {\n  const context = useContext(PolkadotContext);\n\n  if (context === undefined) {\n    throw new Error(\"usePapi must be used within a PolkadotProvider\");\n  }\n\n  return context;\n}\n\n// Helper to get properly typed API (maintains backward compatibility)\nexport function useTypedPolkadotApi(): ConfiguredChainApi<ChainId> | null {\n  const { api } = usePapi();\n  return api;\n}\n\n// Type exports\nexport type { ChainId, ConfiguredChainApi, CompositeApi };\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/dot-ui/lib/utils.polkadot-ui.ts",
      "content": "import type { ChainConfig } from \"@/registry/dot-ui/lib/types.polkadot-ui\";\n\n// Generic helper functions that work with any polkadot config\nexport function getChainIds<T extends Record<string, ChainConfig>>(\n  chains: T\n): (keyof T)[] {\n  return Object.keys(chains) as (keyof T)[];\n}\n\nexport function getChainConfig<\n  T extends Record<string, ChainConfig>,\n  K extends keyof T,\n>(chains: T, chainId: K): T[K] {\n  return chains[chainId];\n}\n\nexport function isValidChainId<T extends Record<string, ChainConfig>>(\n  chains: T,\n  chainId: string\n): chainId is string & keyof T {\n  return chainId in chains;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/dot-ui/lib/types.polkadot-ui.ts",
      "content": "import type { ChainDefinition } from \"polkadot-api\";\n\n// interfaces related to dot-ui\nexport interface ChainConfig {\n  readonly endpoints: string[];\n  readonly displayName: string;\n  readonly isTestnet: boolean;\n  readonly icon?: string;\n  readonly explorerUrls?: Partial<Record<SubstrateExplorer, string>>;\n  readonly faucetUrls?: string[];\n}\n\nexport interface DotUiConfig {\n  readonly chains: Record<string, ChainConfig>;\n  readonly defaultChain: string;\n}\n\nexport interface PapiConfig extends ChainConfig {\n  readonly descriptor: ChainDefinition;\n}\n\nexport interface PolkadotConfig<\n  TChains extends Readonly<Record<string, ChainConfig>> = Readonly<\n    Record<string, ChainConfig>\n  >,\n> {\n  readonly chains: TChains;\n  readonly defaultChain: keyof TChains;\n}\n\nexport function definePolkadotConfig<\n  const TChains extends Readonly<Record<string, ChainConfig>>,\n>(config: PolkadotConfig<TChains>) {\n  return config;\n}\n\n// interfaces related to dedot\nexport enum SubstrateExplorer {\n  Subscan = \"subscan\",\n  PolkadotJs = \"polkadot-js\",\n  PapiExplorer = \"papi-explorer\",\n}\n\nexport enum JsonRpcApi {\n  LEGACY = \"legacy\",\n  NEW = \"new\",\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/dot-ui/lib/config.dot-ui.ts",
      "content": "import { DotUiConfig, SubstrateExplorer } from \"./types.polkadot-ui\";\n\nexport const dotUiConfig: DotUiConfig = {\n  chains: {\n    paseo_asset_hub: {\n      endpoints: [\n        \"wss://sys.ibp.network/asset-hub-paseo\",\n        \"wss://asset-hub-paseo.dotters.network\",\n      ],\n      displayName: \"Paseo Asset Hub\",\n      explorerUrls: {\n        [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent(\"wss://sys.ibp.network/asset-hub-paseo\")}#/explorer`,\n      },\n      isTestnet: true,\n    },\n    paseo: {\n      endpoints: [\"wss://sys.ibp.network/paseo\", \"wss://paseo.dotters.network\"],\n      displayName: \"Paseo Relay Chain\",\n      explorerUrls: {\n        [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent(\"wss://sys.ibp.network/paseo\")}#/explorer`,\n      },\n      isTestnet: true,\n    },\n  },\n  defaultChain: \"paseo_asset_hub\",\n};\n\n// Simple type aliases for type safety\nexport type ChainId = keyof typeof dotUiConfig.chains;\nexport type ChainConfig<T extends ChainId> = (typeof dotUiConfig.chains)[T];\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/dot-ui/lib/config.papi.ts",
      "content": "// To add more chains, run: npx papi add <chain-name> -n <chain-name>\n// Then import the descriptor here and add it to the chains configuration\nimport { paseo_asset_hub, paseo } from \"@polkadot-api/descriptors\";\nimport { definePolkadotConfig } from \"@/registry/dot-ui/lib/types.polkadot-ui\";\nimport { dotUiConfig } from \"./config.dot-ui\";\n\n// dedot supports multiple endpoints for automatic failover\n// while papi only supports one endpoint so users need to select one manually\nexport const polkadotConfig = definePolkadotConfig({\n  ...dotUiConfig,\n  chains: {\n    ...dotUiConfig.chains,\n    paseo_asset_hub: {\n      ...dotUiConfig.chains.paseo_asset_hub,\n      descriptor: paseo_asset_hub,\n    },\n    paseo: {\n      ...dotUiConfig.chains.paseo,\n      descriptor: paseo,\n    },\n    // Add more chains here after running `npx papi add <chain-name>`\n    // Example for adding Polkadot mainnet:\n    // 1. Run: npx papi add polkadot -n polkadot\n    // 2. Import: import { polkadot } from \"@polkadot-api/descriptors\";\n    // 3. Add configuration:\n    // polkadot: {\n    //   descriptor: polkadot,\n    //   network: \"polkadot\",\n    //   endpoints: [\"wss://polkadot-rpc.publicnode.com\"],\n    //   displayName: \"Polkadot\",\n    // },\n  },\n  defaultChain: \"paseo_asset_hub\",\n} as const);\n\nexport type ChainId = keyof typeof polkadotConfig.chains;\nexport type ChainDescriptor<T extends ChainId> =\n  (typeof polkadotConfig.chains)[T][\"descriptor\"];\n",
      "type": "registry:lib"
    }
  ]
}