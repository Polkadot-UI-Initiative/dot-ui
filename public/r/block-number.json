{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-number",
  "type": "registry:component",
  "title": "Block Number",
  "description": "A simple block number component that displays the current block number from Polkadot Asset Hub. Requires polkadot-api setup.",
  "dependencies": [
    "@tanstack/react-query",
    "polkadot-api"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/block-number/components/block-number.tsx",
      "content": "\"use client\";\nimport { useBlockNumber } from \"../hooks/use-block-number\";\n\nexport function BlockNumber() {\n  const blockNumber = useBlockNumber();\n\n  return <div>{blockNumber?.toString()}</div>;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/block-number/hooks/use-block-number.ts",
      "content": "\"use client\";\nimport { usePolkadot } from \"@/registry/new-york/providers/polkadot-provider\";\nimport { useEffect, useState } from \"react\";\n\nexport function useBlockNumber() {\n  const { api } = usePolkadot();\n  const [blockNumber, setBlockNumber] = useState<number | null>(null);\n\n  useEffect(() => {\n    const subscription = api?.query.System.Number.watchValue(\"best\").subscribe(\n      (value) => {\n        setBlockNumber(value);\n      }\n    );\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, [api]);\n\n  return blockNumber;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/providers/polkadot-provider.tsx",
      "content": "\"use client\";\n\nimport { paseo_asset_hub } from \"@polkadot-api/descriptors\";\nimport { createClient, TypedApi } from \"polkadot-api\";\nimport { getWsProvider } from \"polkadot-api/ws-provider/web\";\nimport { withPolkadotSdkCompat } from \"polkadot-api/polkadot-sdk-compat\";\nimport { createContext, useContext } from \"react\";\n\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider(\"wss://sys.ibp.network/asset-hub-paseo\"))\n);\n\nexport interface PolkadotContextType {\n  api: TypedApi<typeof paseo_asset_hub> | null;\n}\n\nexport const PolkadotContext = createContext<PolkadotContextType>({\n  api: null,\n});\n\nexport function PolkadotProvider({ children }: { children: React.ReactNode }) {\n  const api = client.getTypedApi(paseo_asset_hub);\n\n  return (\n    <PolkadotContext.Provider value={{ api }}>\n      {children}\n    </PolkadotContext.Provider>\n  );\n}\n\nexport function usePolkadot() {\n  const context = useContext(PolkadotContext);\n  if (!context) {\n    throw new Error(\"usePolkadot must be used within a PolkadotProvider\");\n  }\n  return context;\n}\n",
      "type": "registry:file",
      "target": "providers/polkadot-provider.tsx"
    },
    {
      "path": "registry/new-york/.papi/polkadot-api.json",
      "content": "{\n  \"version\": 0,\n  \"descriptorPath\": \".papi/descriptors\",\n  \"entries\": {\n    \"paseo_asset_hub\": {\n      \"chain\": \"paseo_asset_hub\",\n      \"metadata\": \".papi/metadata/paseo_asset_hub.scale\",\n      \"genesis\": \"0xd6eec26135305a8ad257a20d003357284c8aa03d0bdb2b357ab0a22371e11ef2\",\n      \"codeHash\": \"0xb7f52ff9b4fb5124568a5b8cbfcebba2bc9318bcb5916b69457c10bc6a2d0ac5\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": ".papi/polkadot-api.json"
    },
    {
      "path": "registry/new-york/.papi/metadata/paseo_asset_hub.scale",
      "content": "meta\u000f�\b\u0000\f\u001csp_core\u0018crypto,AccountId32\u0000\u0000\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0000\u0004\u0000\u0000\u0003 \u0000\u0000\u0000\b\u0000\b\u0000\u0000\u0005\u0003\u0000\f\b0frame_system,AccountInfo\b\u0014Nonce\u0001\u0010,AccountData\u0001\u0014\u0000\u0014\u0001\u0014nonce\u0010\u0001\u0014Nonce\u0000\u0001$consumers\u0010\u0001 RefCount\u0000\u0001$providers\u0010\u0001 RefCount\u0000\u0001,sufficients\u0010\u0001 RefCount\u0000\u0001\u0010data\u0014\u0001,AccountData\u0000\u0000\u0010\u0000\u0000\u0005\u0005\u0000\u0014\f<pallet_balances\u0014types,AccountData\u0004\u001cBalance\u0001\u0018\u0000\u0010\u0001\u0010free\u0018\u0001\u001cBalance\u0000\u0001 reserved\u0018\u0001\u001cBalance\u0000\u0001\u0018frozen\u0018\u0001\u001cBalance\u0000\u0001\u0014flags\u001c\u0001(ExtraFlags\u0000\u0000\u0018\u0000\u0000\u0005\u0007\u0000\u001c\f<pallet_balances\u0014types(ExtraFlags\u0000\u0000\u0004\u0000\u0018\u0001\u0010u128\u0000\u0000 \u0000\u0000\u0005\u0000\u0000$\f4frame_support dispatch@PerDispatchClass\u0004\u0004T\u0001(\u0000\f\u0001\u0018normal(\u0001\u0004T\u0000\u0001,operational(\u0001\u0004T\u0000\u0001$mandatory(\u0001\u0004T\u0000\u0000(\f(sp_weights$weight_v2\u0018Weight\u0000\u0000\b\u0001 ref_time,\u0001\fu64\u0000\u0001(proof_size,\u0001\fu64\u0000\u0000,\u0000\u0000\u00060\u00000\u0000\u0000\u0005\u0006\u00004\b<primitive_types\u0010H256\u0000\u0000\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u00008\u0000\u0000\u0002\b\u0000<\u0010(sp_runtime\u001cgeneric\u0018digest\u0018Digest\u0000\u0000\u0004\u0001\u0010logs@\u0001<Vec<DigestItem>\u0000\u0000@\u0000\u0000\u0002D\u0000D\u0010(sp_runtime\u001cgeneric\u0018digest(DigestItem\u0000\u0001\u0014(PreRuntime\b\u0000H\u0001DConsensusEngineId\u0000\u00008\u0001\u001cVec<u8>\u0000\u0006\u0000$Consensus\b\u0000H\u0001DConsensusEngineId\u0000\u00008\u0001\u001cVec<u8>\u0000\u0004\u0000\u0010Seal\b\u0000H\u0001DConsensusEngineId\u0000\u00008\u0001\u001cVec<u8>\u0000\u0005\u0000\u0014Other\u0004\u00008\u0001\u001cVec<u8>\u0000\u0000\u0000dRuntimeEnvironmentUpdated\u0000\b\u0000\u0000H\u0000\u0000\u0003\u0004\u0000\u0000\u0000\b\u0000L\u0000\u0000\u0002P\u0000P\b0frame_system,EventRecord\b\u0004E\u0001T\u0004T\u00014\u0000\f\u0001\u0014phase�\u0002\u0001\u0014Phase\u0000\u0001\u0014eventT\u0001\u0004E\u0000\u0001\u0018topics�\u0002\u0001\u0018Vec<T>\u0000\u0000T\b\\asset_hub_paseo_runtime0RuntimeEvent\u0000\u0001`\u0018System\u0004\u0000X\u0001pframe_system::Event<Runtime>\u0000\u0000\u0000<ParachainSystem\u0004\u0000�\u0001�cumulus_pallet_parachain_system::Event<Runtime>\u0000\u0001\u0000 Balances\u0004\u0000�\u0001|pallet_balances::Event<Runtime>\u0000\n\u0000HTransactionPayment\u0004\u0000�\u0001�pallet_transaction_payment::Event<Runtime>\u0000\u000b\u00008AssetTxPayment\u0004\u0000�\u0001�pallet_asset_conversion_tx_payment::Event<Runtime>\u0000\r\u0000\u001cVesting\u0004\u0000�\u0001xpallet_vesting::Event<Runtime>\u0000\u000e\u0000DCollatorSelection\u0004\u0000�\u0001�pallet_collator_selection::Event<Runtime>\u0000\u0015\u0000\u001cSession\u0004\u0000�\u0001Tpallet_session::Event\u0000\u0016\u0000$XcmpQueue\u0004\u0000�\u0001�cumulus_pallet_xcmp_queue::Event<Runtime>\u0000\u001e\u0000,PolkadotXcm\u0004\u0000�\u0001hpallet_xcm::Event<Runtime>\u0000\u001f\u0000(CumulusXcm\u0004\u0000\u0015\u0002\u0001�cumulus_pallet_xcm::Event<Runtime>\u0000 \u0000DToKusamaXcmRouter\u0004\u0000\u0019\u0002\u0001Y\u0001pallet_xcm_bridge_hub_router::Event<Runtime, pallet_xcm_bridge_hub_router\n::Instance1>\u0000\"\u00000MessageQueue\u0004\u0000!\u0002\u0001�pallet_message_queue::Event<Runtime>\u0000#\u0000\u001cUtility\u0004\u00001\u0002\u0001Tpallet_utility::Event\u0000(\u0000 Multisig\u0004\u0000=\u0002\u0001|pallet_multisig::Event<Runtime>\u0000)\u0000\u0014Proxy\u0004\u0000E\u0002\u0001ppallet_proxy::Event<Runtime>\u0000*\u0000\u0018Assets\u0004\u0000Q\u0002\u0001�pallet_assets::Event<Runtime, pallet_assets::Instance1>\u00002\u0000\u001cUniques\u0004\u0000U\u0002\u0001xpallet_uniques::Event<Runtime>\u00003\u0000\u0010Nfts\u0004\u0000q\u0002\u0001lpallet_nfts::Event<Runtime>\u00004\u00004ForeignAssets\u0004\u0000�\u0002\u0001�pallet_assets::Event<Runtime, pallet_assets::Instance2>\u00005\u0000(PoolAssets\u0004\u0000�\u0002\u0001�pallet_assets::Event<Runtime, pallet_assets::Instance3>\u00006\u0000<AssetConversion\u0004\u0000�\u0002\u0001�pallet_asset_conversion::Event<Runtime>\u00007\u0000HStateTrieMigration\u0004\u0000�\u0002\u0001�pallet_state_trie_migration::Event<Runtime>\u0000F\u0000\u0010Sudo\u0004\u0000�\u0002\u0001lpallet_sudo::Event<Runtime>\u0000�\u0000\u0000X\f0frame_system\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u001c@ExtrinsicSuccess\u0004\u00014dispatch_info\\\u0001DDispatchEventInfo\u0000\u0000\u0004�An extrinsic completed successfully.<ExtrinsicFailed\b\u00018dispatch_errorh\u00014DispatchError\u0000\u00014dispatch_info\\\u0001DDispatchEventInfo\u0000\u0001\u0004PAn extrinsic failed.,CodeUpdated\u0000\u0002\u0004P`:code` was updated.(NewAccount\u0004\u0001\u001caccount\u0000\u00010T::AccountId\u0000\u0003\u0004hA new account was created.4KilledAccount\u0004\u0001\u001caccount\u0000\u00010T::AccountId\u0000\u0004\u0004XAn account was reaped. Remarked\b\u0001\u0018sender\u0000\u00010T::AccountId\u0000\u0001\u0010hash4\u0001\u001cT::Hash\u0000\u0005\u0004pOn on-chain remark happened.DUpgradeAuthorized\b\u0001$code_hash4\u0001\u001cT::Hash\u0000\u00014check_version \u0001\u0010bool\u0000\u0006\u0004hAn upgrade was authorized.\u0004pEvent for the System pallet.\\\b0frame_systemDDispatchEventInfo\u0000\u0000\f\u0001\u0018weight(\u0001\u0018Weight\u0000\u0001\u0014class`\u00014DispatchClass\u0000\u0001 pays_feed\u0001\u0010Pays\u0000\u0000`\f4frame_support dispatch4DispatchClass\u0000\u0001\f\u0018Normal\u0000\u0000\u0000,Operational\u0000\u0001\u0000$Mandatory\u0000\u0002\u0000\u0000d\f4frame_support dispatch\u0010Pays\u0000\u0001\b\fYes\u0000\u0000\u0000\bNo\u0000\u0001\u0000\u0000h\b(sp_runtime4DispatchError\u0000\u0001<\u0014Other\u0000\u0000\u00000CannotLookup\u0000\u0001\u0000$BadOrigin\u0000\u0002\u0000\u0018Module\u0004\u0000l\u0001,ModuleError\u0000\u0003\u0000DConsumerRemaining\u0000\u0004\u0000,NoProviders\u0000\u0005\u0000@TooManyConsumers\u0000\u0006\u0000\u0014Token\u0004\u0000p\u0001(TokenError\u0000\u0007\u0000(Arithmetic\u0004\u0000t\u0001<ArithmeticError\u0000\b\u00004Transactional\u0004\u0000x\u0001HTransactionalError\u0000\t\u0000$Exhausted\u0000\n\u0000(Corruption\u0000\u000b\u0000,Unavailable\u0000\f\u00008RootNotAllowed\u0000\r\u0000\u0010Trie\u0004\u0000|\u0001$TrieError\u0000\u000e\u0000\u0000l\b(sp_runtime,ModuleError\u0000\u0000\b\u0001\u0014index\b\u0001\bu8\u0000\u0001\u0014errorH\u0001�[u8; MAX_MODULE_ERROR_ENCODED_SIZE]\u0000\u0000p\b(sp_runtime(TokenError\u0000\u0001(@FundsUnavailable\u0000\u0000\u00000OnlyProvider\u0000\u0001\u00000BelowMinimum\u0000\u0002\u00000CannotCreate\u0000\u0003\u00000UnknownAsset\u0000\u0004\u0000\u0018Frozen\u0000\u0005\u0000,Unsupported\u0000\u0006\u0000@CannotCreateHold\u0000\u0007\u00004NotExpendable\u0000\b\u0000\u001cBlocked\u0000\t\u0000\u0000t\b4sp_arithmetic<ArithmeticError\u0000\u0001\f$Underflow\u0000\u0000\u0000 Overflow\u0000\u0001\u00008DivisionByZero\u0000\u0002\u0000\u0000x\b(sp_runtimeHTransactionalError\u0000\u0001\b0LimitReached\u0000\u0000\u0000\u001cNoLayer\u0000\u0001\u0000\u0000|\f(sp_runtime0proving_trie$TrieError\u0000\u00018@InvalidStateRoot\u0000\u0000\u0000HIncompleteDatabase\u0000\u0001\u0000PValueAtIncompleteKey\u0000\u0002\u00000DecoderError\u0000\u0003\u0000,InvalidHash\u0000\u0004\u00000DuplicateKey\u0000\u0005\u00008ExtraneousNode\u0000\u0006\u0000<ExtraneousValue\u0000\u0007\u0000\\ExtraneousHashReference\u0000\b\u0000TInvalidChildReference\u0000\t\u00004ValueMismatch\u0000\n\u0000<IncompleteProof\u0000\u000b\u00000RootMismatch\u0000\f\u0000,DecodeError\u0000\r\u0000\u0000�\f|cumulus_pallet_parachain_system\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0018`ValidationFunctionStored\u0000\u0000\u0004�The validation function has been scheduled to apply.dValidationFunctionApplied\u0004\u0001Trelay_chain_block_num\u0010\u0001TRelayChainBlockNumber\u0000\u0001\u0004E\u0001The validation function was applied as of the contained relay chain block number.lValidationFunctionDiscarded\u0000\u0002\u0004�The relay-chain aborted the upgrade process.`DownwardMessagesReceived\u0004\u0001\u0014count\u0010\u0001\fu32\u0000\u0003\u0004\u0001\u0001Some downward messages have been received and will be processed.dDownwardMessagesProcessed\b\u0001,weight_used(\u0001\u0018Weight\u0000\u0001 dmq_head4\u0001Drelay_chain::Hash\u0000\u0004\u0004�Downward messages were processed using the given weight.DUpwardMessageSent\u0004\u00010message_hash�\u0001<Option<XcmHash>\u0000\u0005\u0004�An upward message was sent to the relay chain.\u0004|The `Event` enum of this pallet�\u0004\u0018Option\u0004\u0004T\u0001\u0004\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0004\u0000\u0000\u0001\u0000\u0000�\f<pallet_balances\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001X\u001cEndowed\b\u0001\u001caccount\u0000\u00010T::AccountId\u0000\u00010free_balance\u0018\u0001(T::Balance\u0000\u0000\u0004�An account was created with some free balance. DustLost\b\u0001\u001caccount\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0001\b=\u0001An account was removed whose balance was non-zero but below ExistentialDeposit,xresulting in an outright loss. Transfer\f\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0002\u0004LTransfer succeeded.(BalanceSet\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0010free\u0018\u0001(T::Balance\u0000\u0003\u0004hA balance was set by root. Reserved\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0004\u0004�Some balance was reserved (moved from free to reserved).(Unreserved\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0005\u0004�Some balance was unreserved (moved from reserved to free).HReserveRepatriated\u0010\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0001Hdestination_status�\u0001\u0018Status\u0000\u0006\bM\u0001Some balance was moved from the reserve of the first account to the second account.�Final argument indicates the destination balance type.\u001cDeposit\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0007\u0004�Some amount was deposited (e.g. for transaction fees). Withdraw\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\b\u0004\u001d\u0001Some amount was withdrawn from the account (e.g. for transaction fees).\u001cSlashed\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\t\u0004\u0001\u0001Some amount was removed from the account (e.g. for misbehavior).\u0018Minted\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\n\u0004�Some amount was minted into an account.\u0018Burned\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u000b\u0004�Some amount was burned from an account.$Suspended\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\f\u0004\u0015\u0001Some amount was suspended from an account (it can be restored later). Restored\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\r\u0004�Some amount was restored into an account. Upgraded\u0004\u0001\fwho\u0000\u00010T::AccountId\u0000\u000e\u0004`An account was upgraded.\u0018Issued\u0004\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u000f\u0004-\u0001Total issuance was increased by `amount`, creating a credit to be balanced.$Rescinded\u0004\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0010\u0004%\u0001Total issuance was decreased by `amount`, creating a debt to be balanced.\u0018Locked\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0011\u0004`Some balance was locked. Unlocked\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0012\u0004hSome balance was unlocked.\u0018Frozen\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0013\u0004`Some balance was frozen.\u0018Thawed\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0014\u0004`Some balance was thawed.LTotalIssuanceForced\b\u0001\fold\u0018\u0001(T::Balance\u0000\u0001\fnew\u0018\u0001(T::Balance\u0000\u0015\u0004�The `TotalIssuance` was forcefully changed.\u0004|The `Event` enum of this pallet�\u00144frame_support\u0018traits\u0018tokens\u0010misc4BalanceStatus\u0000\u0001\b\u0010Free\u0000\u0000\u0000 Reserved\u0000\u0001\u0000\u0000�\fhpallet_transaction_payment\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0004HTransactionFeePaid\f\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001(actual_fee\u0018\u00010BalanceOf<T>\u0000\u0001\ftip\u0018\u00010BalanceOf<T>\u0000\u0000\bY\u0001A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,\\has been paid by `who`.\u0004|The `Event` enum of this pallet�\f�pallet_asset_conversion_tx_payment\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\b8AssetTxFeePaid\u0010\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001(actual_fee\u0018\u00010BalanceOf<T>\u0000\u0001\ftip\u0018\u00010BalanceOf<T>\u0000\u0001 asset_id�\u0001(T::AssetId\u0000\u0000\bY\u0001A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,�has been paid by `who` in an asset `asset_id`.DAssetRefundFailed\u0004\u0001Hnative_amount_kept\u0018\u00010BalanceOf<T>\u0000\u0001\u0004�A swap of the refund in native currency back to asset failed.\u0004|The `Event` enum of this pallet�\u0010,staging_xcm\bv4 location Location\u0000\u0000\b\u0001\u001cparents\b\u0001\bu8\u0000\u0001 interior�\u0001$Junctions\u0000\u0000�\u0010,staging_xcm\bv4$junctions$Junctions\u0000\u0001$\u0010Here\u0000\u0000\u0000\bX1\u0004\u0000�\u0001HArc<[Junction; 1]>\u0000\u0001\u0000\bX2\u0004\u0000�\u0001HArc<[Junction; 2]>\u0000\u0002\u0000\bX3\u0004\u0000�\u0001HArc<[Junction; 3]>\u0000\u0003\u0000\bX4\u0004\u0000�\u0001HArc<[Junction; 4]>\u0000\u0004\u0000\bX5\u0004\u0000�\u0001HArc<[Junction; 5]>\u0000\u0005\u0000\bX6\u0004\u0000�\u0001HArc<[Junction; 6]>\u0000\u0006\u0000\bX7\u0004\u0000�\u0001HArc<[Junction; 7]>\u0000\u0007\u0000\bX8\u0004\u0000�\u0001HArc<[Junction; 8]>\u0000\b\u0000\u0000�\u0000\u0000\u0003\u0001\u0000\u0000\u0000�\u0000�\u0010,staging_xcm\bv4 junction Junction\u0000\u0001($Parachain\u0004\u0000�\u0001\fu32\u0000\u0000\u0000,AccountId32\b\u0001\u001cnetwork�\u0001DOption<NetworkId>\u0000\u0001\bid\u0004\u0001 [u8; 32]\u0000\u0001\u00008AccountIndex64\b\u0001\u001cnetwork�\u0001DOption<NetworkId>\u0000\u0001\u0014index,\u0001\fu64\u0000\u0002\u00000AccountKey20\b\u0001\u001cnetwork�\u0001DOption<NetworkId>\u0000\u0001\fkey�\u0001 [u8; 20]\u0000\u0003\u00008PalletInstance\u0004\u0000\b\u0001\bu8\u0000\u0004\u00000GeneralIndex\u0004\u0000�\u0001\u0010u128\u0000\u0005\u0000(GeneralKey\b\u0001\u0018length\b\u0001\bu8\u0000\u0001\u0010data\u0004\u0001 [u8; 32]\u0000\u0006\u0000$OnlyChild\u0000\u0007\u0000$Plurality\b\u0001\bid�\u0001\u0018BodyId\u0000\u0001\u0010part�\u0001 BodyPart\u0000\b\u0000<GlobalConsensus\u0004\u0000�\u0001$NetworkId\u0000\t\u0000\u0000�\u0000\u0000\u0006\u0010\u0000�\u0004\u0018Option\u0004\u0004T\u0001�\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0000\u0000\u0001\u0000\u0000�\u0010,staging_xcm\bv4 junction$NetworkId\u0000\u0001,$ByGenesis\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0000\u0000\u0018ByFork\b\u00010block_number0\u0001\fu64\u0000\u0001(block_hash\u0004\u0001 [u8; 32]\u0000\u0001\u0000 Polkadot\u0000\u0002\u0000\u0018Kusama\u0000\u0003\u0000\u001cWestend\u0000\u0004\u0000\u0018Rococo\u0000\u0005\u0000\u0018Wococo\u0000\u0006\u0000 Ethereum\u0004\u0001 chain_id,\u0001\fu64\u0000\u0007\u0000,BitcoinCore\u0000\b\u0000,BitcoinCash\u0000\t\u0000@PolkadotBulletin\u0000\n\u0000\u0000�\u0000\u0000\u0003\u0014\u0000\u0000\u0000\b\u0000�\u0000\u0000\u0006\u0018\u0000�\u0010\fxcm\bv3 junction\u0018BodyId\u0000\u0001(\u0010Unit\u0000\u0000\u0000\u001cMoniker\u0004\u0000H\u0001\u001c[u8; 4]\u0000\u0001\u0000\u0014Index\u0004\u0000�\u0001\fu32\u0000\u0002\u0000$Executive\u0000\u0003\u0000$Technical\u0000\u0004\u0000,Legislative\u0000\u0005\u0000 Judicial\u0000\u0006\u0000\u001cDefense\u0000\u0007\u00008Administration\u0000\b\u0000 Treasury\u0000\t\u0000\u0000�\u0010\fxcm\bv3 junction BodyPart\u0000\u0001\u0014\u0014Voice\u0000\u0000\u0000\u001cMembers\u0004\u0001\u0014count�\u0001\fu32\u0000\u0001\u0000 Fraction\b\u0001\fnom�\u0001\fu32\u0000\u0001\u0014denom�\u0001\fu32\u0000\u0002\u0000DAtLeastProportion\b\u0001\fnom�\u0001\fu32\u0000\u0001\u0014denom�\u0001\fu32\u0000\u0003\u0000HMoreThanProportion\b\u0001\fnom�\u0001\fu32\u0000\u0001\u0014denom�\u0001\fu32\u0000\u0004\u0000\u0000�\u0000\u0000\u0003\u0002\u0000\u0000\u0000�\u0000�\u0000\u0000\u0003\u0003\u0000\u0000\u0000�\u0000�\u0000\u0000\u0003\u0004\u0000\u0000\u0000�\u0000�\u0000\u0000\u0003\u0005\u0000\u0000\u0000�\u0000�\u0000\u0000\u0003\u0006\u0000\u0000\u0000�\u0000�\u0000\u0000\u0003\u0007\u0000\u0000\u0000�\u0000�\u0000\u0000\u0003\b\u0000\u0000\u0000�\u0000�\f8pallet_vesting\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\b8VestingUpdated\b\u0001\u001caccount\u0000\u00010T::AccountId\u0000\u0001 unvested\u0018\u00010BalanceOf<T>\u0000\u0000\bQ\u0001The amount vested has been updated. This could indicate a change in funds available.%\u0001The balance given is the amount which is left unvested (and thus locked).@VestingCompleted\u0004\u0001\u001caccount\u0000\u00010T::AccountId\u0000\u0001\u0004�An \\[account\\] has become fully vested.\u0004|The `Event` enum of this pallet�\fdpallet_collator_selection\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001(@NewInvulnerables\u0004\u00014invulnerables�\u0001DVec<T::AccountId>\u0000\u0000\u0004lNew Invulnerables were set.DInvulnerableAdded\u0004\u0001(account_id\u0000\u00010T::AccountId\u0000\u0001\u0004tA new Invulnerable was added.LInvulnerableRemoved\u0004\u0001(account_id\u0000\u00010T::AccountId\u0000\u0002\u0004pAn Invulnerable was removed.PNewDesiredCandidates\u0004\u0001Hdesired_candidates\u0010\u0001\fu32\u0000\u0003\u0004�The number of desired candidates was set.@NewCandidacyBond\u0004\u0001,bond_amount\u0018\u00010BalanceOf<T>\u0000\u0004\u0004lThe candidacy bond was set.8CandidateAdded\b\u0001(account_id\u0000\u00010T::AccountId\u0000\u0001\u001cdeposit\u0018\u00010BalanceOf<T>\u0000\u0005\u0004\\A new candidate joined.PCandidateBondUpdated\b\u0001(account_id\u0000\u00010T::AccountId\u0000\u0001\u001cdeposit\u0018\u00010BalanceOf<T>\u0000\u0006\u0004pBond of a candidate updated.@CandidateRemoved\u0004\u0001(account_id\u0000\u00010T::AccountId\u0000\u0007\u0004`A candidate was removed.DCandidateReplaced\f\u0001\fold\u0000\u00010T::AccountId\u0000\u0001\fnew\u0000\u00010T::AccountId\u0000\u0001\u001cdeposit\u0018\u00010BalanceOf<T>\u0000\b\u0004�An account was replaced in the candidate list by another one.hInvalidInvulnerableSkipped\u0004\u0001(account_id\u0000\u00010T::AccountId\u0000\t\bU\u0001An account was unable to be added to the Invulnerables because they did not have keys�registered. Other Invulnerables may have been set.\u0004|The `Event` enum of this pallet�\u0000\u0000\u0002\u0000\u0000�\f8pallet_session\u0018pallet\u0014Event\u0000\u0001\u0004(NewSession\u0004\u00014session_index\u0010\u00010SessionIndex\u0000\u0000\b9\u0001New session has happened. Note that the argument is the session index, not the�block number as the type might suggest.\u0004|The `Event` enum of this pallet�\fdcumulus_pallet_xcmp_queue\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0004<XcmpMessageSent\u0004\u00010message_hash\u0004\u0001\u001cXcmHash\u0000\u0000\u0004�An HRMP message was sent to a sibling parachain.\u0004|The `Event` enum of this pallet�\f(pallet_xcm\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001`$Attempted\u0004\u0001\u001coutcome�\u0001Pxcm::latest::Outcome\u0000\u0000\u0004�Execution of an XCM message was attempted.\u0010Sent\u0010\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001\u001cmessage5\u0001\u0001\u001cXcm<()>\u0000\u0001(message_id\u0004\u0001\u001cXcmHash\u0000\u0001\u0004\\A XCM message was sent.HUnexpectedResponse\b\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\u0002\fY\u0001Query response received which does not match a registered query. This may be because aU\u0001matching query was never registered, it may be because it is a duplicate response, orpbecause the query timed out.4ResponseReady\b\u0001 query_id0\u0001\u001cQueryId\u0000\u0001 responsea\u0001\u0001 Response\u0000\u0003\b]\u0001Query response has been received and is ready for taking with `take_response`. There is�no registered notification call. Notified\f\u0001 query_id0\u0001\u001cQueryId\u0000\u00010pallet_index\b\u0001\bu8\u0000\u0001(call_index\b\u0001\bu8\u0000\u0004\bY\u0001Query response has been received and query is removed. The registered notification has�been dispatched and executed successfully.@NotifyOverweight\u0014\u0001 query_id0\u0001\u001cQueryId\u0000\u00010pallet_index\b\u0001\bu8\u0000\u0001(call_index\b\u0001\bu8\u0000\u00014actual_weight(\u0001\u0018Weight\u0000\u0001Lmax_budgeted_weight(\u0001\u0018Weight\u0000\u0005\fI\u0001Query response has been received and query is removed. The registered notificationY\u0001could not be dispatched because the dispatch weight is greater than the maximum weight�originally budgeted by this runtime for the query result.LNotifyDispatchError\f\u0001 query_id0\u0001\u001cQueryId\u0000\u00010pallet_index\b\u0001\bu8\u0000\u0001(call_index\b\u0001\bu8\u0000\u0006\bU\u0001Query response has been received and query is removed. There was a general error with�dispatching the notification call.HNotifyDecodeFailed\f\u0001 query_id0\u0001\u001cQueryId\u0000\u00010pallet_index\b\u0001\bu8\u0000\u0001(call_index\b\u0001\bu8\u0000\u0007\fQ\u0001Query response has been received and query is removed. The dispatch was unable to beY\u0001decoded into a `Call`; this might be due to dispatch function having a signature which�is not `(origin, QueryId, Response)`.@InvalidResponder\f\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\u0001Dexpected_location�\u0001\u0001@Option<Location>\u0000\b\fY\u0001Expected query response has been received but the origin location of the response doesU\u0001not match that expected. The query remains registered for a later, valid, response tolbe received and acted upon.\\InvalidResponderVersion\b\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\t\u001cQ\u0001Expected query response has been received but the expected origin location placed inM\u0001storage by this runtime previously cannot be decoded. The query remains registered.\u0000A\u0001This is unexpected (since a location placed in storage in a previously executingM\u0001runtime should be readable prior to query timeout) and dangerous since the possiblyY\u0001valid response will be dropped. Manual governance intervention is probably going to be\u001cneeded.4ResponseTaken\u0004\u0001 query_id0\u0001\u001cQueryId\u0000\n\u0004�Received query response has been read and removed.4AssetsTrapped\f\u0001\u0010hash4\u0001\u0010H256\u0000\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001\u0018assets�\u0001\u0001<VersionedAssets\u0000\u000b\u0004�Some assets have been placed in an asset trap.TVersionChangeNotified\u0010\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001\u0018result\u0010\u0001(XcmVersion\u0000\u0001\u0010costA\u0001\u0001\u0018Assets\u0000\u0001(message_id\u0004\u0001\u001cXcmHash\u0000\f\f%\u0001An XCM version change notification message has been attempted to be sent.\u0000�The cost of sending it (borne by the chain) is included.\\SupportedVersionChanged\b\u0001 location\u0001\u0001\u0001 Location\u0000\u0001\u001cversion\u0010\u0001(XcmVersion\u0000\r\b9\u0001The supported version of a location has been changed. This might be through an�automatic notification or a manual intervention.PNotifyTargetSendFail\f\u0001 location\u0001\u0001\u0001 Location\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\u0001\u0014error�\u0001 XcmError\u0000\u000e\bY\u0001A given location which had a version change subscription was dropped owing to an error|sending the notification to it.dNotifyTargetMigrationFail\b\u0001 location\u0011\u0002\u0001DVersionedLocation\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\u000f\bY\u0001A given location which had a version change subscription was dropped owing to an error�migrating the location to our new XCM format.TInvalidQuerierVersion\b\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\u0010\u001cU\u0001Expected query response has been received but the expected querier location placed inM\u0001storage by this runtime previously cannot be decoded. The query remains registered.\u0000A\u0001This is unexpected (since a location placed in storage in a previously executingM\u0001runtime should be readable prior to query timeout) and dangerous since the possiblyY\u0001valid response will be dropped. Manual governance intervention is probably going to be\u001cneeded.8InvalidQuerier\u0010\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001 query_id0\u0001\u001cQueryId\u0000\u0001@expected_querier\u0001\u0001\u0001 Location\u0000\u0001Pmaybe_actual_querier�\u0001\u0001@Option<Location>\u0000\u0011\f]\u0001Expected query response has been received but the querier location of the response doesQ\u0001not match the expected. The query remains registered for a later, valid, response tolbe received and acted upon.PVersionNotifyStarted\f\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001\u0010costA\u0001\u0001\u0018Assets\u0000\u0001(message_id\u0004\u0001\u001cXcmHash\u0000\u0012\bY\u0001A remote has requested XCM version change notification from us and we have honored it.\u001d\u0001A version information message is sent to them and its cost is included.XVersionNotifyRequested\f\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001\u0010costA\u0001\u0001\u0018Assets\u0000\u0001(message_id\u0004\u0001\u001cXcmHash\u0000\u0013\u0004=\u0001We have requested that a remote chain send us XCM version change notifications.`VersionNotifyUnrequested\f\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001\u0010costA\u0001\u0001\u0018Assets\u0000\u0001(message_id\u0004\u0001\u001cXcmHash\u0000\u0014\b%\u0001We have requested that a remote chain stops sending us XCM version change8notifications. FeesPaid\b\u0001\u0018paying\u0001\u0001\u0001 Location\u0000\u0001\u0010feesA\u0001\u0001\u0018Assets\u0000\u0015\u00041\u0001Fees were paid from a location for an operation (often for using `SendXcm`).4AssetsClaimed\f\u0001\u0010hash4\u0001\u0010H256\u0000\u0001\u0018origin\u0001\u0001\u0001 Location\u0000\u0001\u0018assets�\u0001\u0001<VersionedAssets\u0000\u0016\u0004�Some assets have been claimed from an asset trap`VersionMigrationFinished\u0004\u0001\u001cversion\u0010\u0001(XcmVersion\u0000\u0017\u0004�A XCM version migration finished.\u0004|The `Event` enum of this pallet�\u0010,staging_xcm\bv5\u0018traits\u001cOutcome\u0000\u0001\f Complete\u0004\u0001\u0010used(\u0001\u0018Weight\u0000\u0000\u0000(Incomplete\b\u0001\u0010used(\u0001\u0018Weight\u0000\u0001\u0014error�\u0001\u0014Error\u0000\u0001\u0000\u0014Error\u0004\u0001\u0014error�\u0001\u0014Error\u0000\u0002\u0000\u0000�\u0010\fxcm\bv5\u0018traits\u0014Error\u0000\u0001� Overflow\u0000\u0000\u00004Unimplemented\u0000\u0001\u0000`UntrustedReserveLocation\u0000\u0002\u0000dUntrustedTeleportLocation\u0000\u0003\u00000LocationFull\u0000\u0004\u0000TLocationNotInvertible\u0000\u0005\u0000$BadOrigin\u0000\u0006\u0000<InvalidLocation\u0000\u0007\u00004AssetNotFound\u0000\b\u0000TFailedToTransactAsset\u0000\t\u0000<NotWithdrawable\u0000\n\u0000HLocationCannotHold\u0000\u000b\u0000TExceedsMaxMessageSize\u0000\f\u0000XDestinationUnsupported\u0000\r\u0000$Transport\u0000\u000e\u0000(Unroutable\u0000\u000f\u00000UnknownClaim\u0000\u0010\u00008FailedToDecode\u0000\u0011\u0000@MaxWeightInvalid\u0000\u0012\u00008NotHoldingFees\u0000\u0013\u00000TooExpensive\u0000\u0014\u0000\u0010Trap\u0004\u00000\u0001\fu64\u0000\u0015\u0000@ExpectationFalse\u0000\u0016\u00008PalletNotFound\u0000\u0017\u00000NameMismatch\u0000\u0018\u0000LVersionIncompatible\u0000\u0019\u0000PHoldingWouldOverflow\u0000\u001a\u0000,ExportError\u0000\u001b\u00008ReanchorFailed\u0000\u001c\u0000\u0018NoDeal\u0000\u001d\u0000(FeesNotMet\u0000\u001e\u0000$LockError\u0000\u001f\u00000NoPermission\u0000 \u0000(Unanchored\u0000!\u00008NotDepositable\u0000\"\u00004TooManyAssets\u0000#\u0000LUnhandledXcmVersion\u0000$\u0000HWeightLimitReached\u0004\u0000(\u0001\u0018Weight\u0000%\u0000\u001cBarrier\u0000&\u0000LWeightNotComputable\u0000'\u0000DExceedsStackLimit\u0000(\u0000\u0000\u0001\u0001\u0010,staging_xcm\bv5 location Location\u0000\u0000\b\u0001\u001cparents\b\u0001\bu8\u0000\u0001 interior\u0005\u0001\u0001$Junctions\u0000\u0000\u0005\u0001\u0010,staging_xcm\bv5$junctions$Junctions\u0000\u0001$\u0010Here\u0000\u0000\u0000\bX1\u0004\u0000\t\u0001\u0001HArc<[Junction; 1]>\u0000\u0001\u0000\bX2\u0004\u0000\u0019\u0001\u0001HArc<[Junction; 2]>\u0000\u0002\u0000\bX3\u0004\u0000\u001d\u0001\u0001HArc<[Junction; 3]>\u0000\u0003\u0000\bX4\u0004\u0000!\u0001\u0001HArc<[Junction; 4]>\u0000\u0004\u0000\bX5\u0004\u0000%\u0001\u0001HArc<[Junction; 5]>\u0000\u0005\u0000\bX6\u0004\u0000)\u0001\u0001HArc<[Junction; 6]>\u0000\u0006\u0000\bX7\u0004\u0000-\u0001\u0001HArc<[Junction; 7]>\u0000\u0007\u0000\bX8\u0004\u00001\u0001\u0001HArc<[Junction; 8]>\u0000\b\u0000\u0000\t\u0001\u0000\u0000\u0003\u0001\u0000\u0000\u0000\r\u0001\u0000\r\u0001\u0010,staging_xcm\bv5 junction Junction\u0000\u0001($Parachain\u0004\u0000�\u0001\fu32\u0000\u0000\u0000,AccountId32\b\u0001\u001cnetwork\u0011\u0001\u0001DOption<NetworkId>\u0000\u0001\bid\u0004\u0001 [u8; 32]\u0000\u0001\u00008AccountIndex64\b\u0001\u001cnetwork\u0011\u0001\u0001DOption<NetworkId>\u0000\u0001\u0014index,\u0001\fu64\u0000\u0002\u00000AccountKey20\b\u0001\u001cnetwork\u0011\u0001\u0001DOption<NetworkId>\u0000\u0001\fkey�\u0001 [u8; 20]\u0000\u0003\u00008PalletInstance\u0004\u0000\b\u0001\bu8\u0000\u0004\u00000GeneralIndex\u0004\u0000�\u0001\u0010u128\u0000\u0005\u0000(GeneralKey\b\u0001\u0018length\b\u0001\bu8\u0000\u0001\u0010data\u0004\u0001 [u8; 32]\u0000\u0006\u0000$OnlyChild\u0000\u0007\u0000$Plurality\b\u0001\bid�\u0001\u0018BodyId\u0000\u0001\u0010part�\u0001 BodyPart\u0000\b\u0000<GlobalConsensus\u0004\u0000\u0015\u0001\u0001$NetworkId\u0000\t\u0000\u0000\u0011\u0001\u0004\u0018Option\u0004\u0004T\u0001\u0015\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0015\u0001\u0000\u0000\u0001\u0000\u0000\u0015\u0001\u0010,staging_xcm\bv5 junction$NetworkId\u0000\u0001 $ByGenesis\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0000\u0000\u0018ByFork\b\u00010block_number0\u0001\fu64\u0000\u0001(block_hash\u0004\u0001 [u8; 32]\u0000\u0001\u0000 Polkadot\u0000\u0002\u0000\u0018Kusama\u0000\u0003\u0000 Ethereum\u0004\u0001 chain_id,\u0001\fu64\u0000\u0007\u0000,BitcoinCore\u0000\b\u0000,BitcoinCash\u0000\t\u0000@PolkadotBulletin\u0000\n\u0000\u0000\u0019\u0001\u0000\u0000\u0003\u0002\u0000\u0000\u0000\r\u0001\u0000\u001d\u0001\u0000\u0000\u0003\u0003\u0000\u0000\u0000\r\u0001\u0000!\u0001\u0000\u0000\u0003\u0004\u0000\u0000\u0000\r\u0001\u0000%\u0001\u0000\u0000\u0003\u0005\u0000\u0000\u0000\r\u0001\u0000)\u0001\u0000\u0000\u0003\u0006\u0000\u0000\u0000\r\u0001\u0000-\u0001\u0000\u0000\u0003\u0007\u0000\u0000\u0000\r\u0001\u00001\u0001\u0000\u0000\u0003\b\u0000\u0000\u0000\r\u0001\u00005\u0001\f,staging_xcm\bv5\fXcm\u0004\u0010Call\u0000\u0000\u0004\u00009\u0001\u0001XVec<Instruction<Call>>\u0000\u00009\u0001\u0000\u0000\u0002=\u0001\u0000=\u0001\f,staging_xcm\bv5,Instruction\u0004\u0010Call\u0000\u0001�4WithdrawAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0000\u0000TReserveAssetDeposited\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0001\u0000XReceiveTeleportedAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0002\u00004QueryResponse\u0010\u0001 query_id,\u0001\u001cQueryId\u0000\u0001 responsea\u0001\u0001 Response\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001\u001cquerier�\u0001\u0001@Option<Location>\u0000\u0003\u00004TransferAsset\b\u0001\u0018assetsA\u0001\u0001\u0018Assets\u0000\u0001,beneficiary\u0001\u0001\u0001 Location\u0000\u0004\u0000PTransferReserveAsset\f\u0001\u0018assetsA\u0001\u0001\u0018Assets\u0000\u0001\u0010dest\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u0005\u0000 Transact\f\u0001,origin_kind�\u0001\u0001(OriginKind\u0000\u0001Lfallback_max_weight�\u0001\u00018Option<Weight>\u0000\u0001\u0010call�\u0001\u0001LDoubleEncoded<Call>\u0000\u0006\u0000dHrmpNewChannelOpenRequest\f\u0001\u0018sender�\u0001\fu32\u0000\u0001@max_message_size�\u0001\fu32\u0000\u00010max_capacity�\u0001\fu32\u0000\u0007\u0000LHrmpChannelAccepted\u0004\u0001$recipient�\u0001\fu32\u0000\b\u0000HHrmpChannelClosing\f\u0001$initiator�\u0001\fu32\u0000\u0001\u0018sender�\u0001\fu32\u0000\u0001$recipient�\u0001\fu32\u0000\t\u0000,ClearOrigin\u0000\n\u00004DescendOrigin\u0004\u0000\u0005\u0001\u0001@InteriorLocation\u0000\u000b\u0000,ReportError\u0004\u0000�\u0001\u0001DQueryResponseInfo\u0000\f\u00000DepositAsset\b\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001,beneficiary\u0001\u0001\u0001 Location\u0000\r\u0000LDepositReserveAsset\f\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001\u0010dest\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u000e\u00004ExchangeAsset\f\u0001\u0010give�\u0001\u0001,AssetFilter\u0000\u0001\u0010wantA\u0001\u0001\u0018Assets\u0000\u0001\u001cmaximal \u0001\u0010bool\u0000\u000f\u0000\\InitiateReserveWithdraw\f\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001\u001creserve\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u0010\u0000@InitiateTeleport\f\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001\u0010dest\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u0011\u00004ReportHolding\b\u00014response_info�\u0001\u0001DQueryResponseInfo\u0000\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0012\u00000BuyExecution\b\u0001\u0010feesI\u0001\u0001\u0014Asset\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u0013\u00004RefundSurplus\u0000\u0014\u0000<SetErrorHandler\u0004\u00005\u0001\u0001$Xcm<Call>\u0000\u0015\u0000,SetAppendix\u0004\u00005\u0001\u0001$Xcm<Call>\u0000\u0016\u0000(ClearError\u0000\u0017\u0000(ClaimAsset\b\u0001\u0018assetsA\u0001\u0001\u0018Assets\u0000\u0001\u0018ticket\u0001\u0001\u0001 Location\u0000\u0018\u0000\u0010Trap\u0004\u0000,\u0001\fu64\u0000\u0019\u0000@SubscribeVersion\b\u0001 query_id,\u0001\u001cQueryId\u0000\u0001Lmax_response_weight(\u0001\u0018Weight\u0000\u001a\u0000HUnsubscribeVersion\u0000\u001b\u0000$BurnAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u001c\u0000,ExpectAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u001d\u00000ExpectOrigin\u0004\u0000�\u0001\u0001@Option<Location>\u0000\u001e\u0000,ExpectError\u0004\u0000e\u0001\u0001POption<(u32, Error)>\u0000\u001f\u0000PExpectTransactStatus\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000 \u0000,QueryPallet\b\u0001,module_name8\u0001\u001cVec<u8>\u0000\u00014response_info�\u0001\u0001DQueryResponseInfo\u0000!\u00000ExpectPallet\u0014\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001,module_name8\u0001\u001cVec<u8>\u0000\u0001,crate_major�\u0001\fu32\u0000\u0001<min_crate_minor�\u0001\fu32\u0000\"\u0000PReportTransactStatus\u0004\u0000�\u0001\u0001DQueryResponseInfo\u0000#\u0000LClearTransactStatus\u0000$\u0000<UniversalOrigin\u0004\u0000\r\u0001\u0001 Junction\u0000%\u00004ExportMessage\f\u0001\u001cnetwork\u0015\u0001\u0001$NetworkId\u0000\u0001,destination\u0005\u0001\u0001@InteriorLocation\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000&\u0000$LockAsset\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001 unlocker\u0001\u0001\u0001 Location\u0000'\u0000,UnlockAsset\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001\u0018target\u0001\u0001\u0001 Location\u0000(\u00008NoteUnlockable\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001\u0014owner\u0001\u0001\u0001 Location\u0000)\u00004RequestUnlock\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001\u0018locker\u0001\u0001\u0001 Location\u0000*\u0000,SetFeesMode\u0004\u00010jit_withdraw \u0001\u0010bool\u0000+\u0000 SetTopic\u0004\u0000\u0004\u0001 [u8; 32]\u0000,\u0000(ClearTopic\u0000-\u0000,AliasOrigin\u0004\u0000\u0001\u0001\u0001 Location\u0000.\u0000<UnpaidExecution\b\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u00010check_origin�\u0001\u0001@Option<Location>\u0000/\u0000\u001cPayFees\u0004\u0001\u0014assetI\u0001\u0001\u0014Asset\u00000\u0000@InitiateTransfer\u0014\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001,remote_fees�\u0001\u0001lOption<AssetTransferFilter>\u0000\u0001<preserve_origin \u0001\u0010bool\u0000\u0001\u0018assets�\u0001\u0001�BoundedVec<AssetTransferFilter, MaxAssetTransferFilters>\u0000\u0001(remote_xcm5\u0001\u0001\u001cXcm<()>\u00001\u0000DExecuteWithOrigin\b\u0001Ddescendant_origin�\u0001\u0001`Option<InteriorLocation>\u0000\u0001\fxcm5\u0001\u0001$Xcm<Call>\u00002\u0000 SetHints\u0004\u0001\u0014hints�\u0001\u0001�BoundedVec<Hint, HintNumVariants>\u00003\u0000\u0000A\u0001\u0010,staging_xcm\bv5\u0014asset\u0018Assets\u0000\u0000\u0004\u0000E\u0001\u0001(Vec<Asset>\u0000\u0000E\u0001\u0000\u0000\u0002I\u0001\u0000I\u0001\u0010,staging_xcm\bv5\u0014asset\u0014Asset\u0000\u0000\b\u0001\bidM\u0001\u0001\u001cAssetId\u0000\u0001\ffunQ\u0001\u0001,Fungibility\u0000\u0000M\u0001\u0010,staging_xcm\bv5\u0014asset\u001cAssetId\u0000\u0000\u0004\u0000\u0001\u0001\u0001 Location\u0000\u0000Q\u0001\u0010,staging_xcm\bv5\u0014asset,Fungibility\u0000\u0001\b Fungible\u0004\u0000�\u0001\u0010u128\u0000\u0000\u0000,NonFungible\u0004\u0000U\u0001\u00014AssetInstance\u0000\u0001\u0000\u0000U\u0001\u0010,staging_xcm\bv5\u0014asset4AssetInstance\u0000\u0001\u0018$Undefined\u0000\u0000\u0000\u0014Index\u0004\u0000�\u0001\u0010u128\u0000\u0001\u0000\u0018Array4\u0004\u0000H\u0001\u001c[u8; 4]\u0000\u0002\u0000\u0018Array8\u0004\u0000Y\u0001\u0001\u001c[u8; 8]\u0000\u0003\u0000\u001cArray16\u0004\u0000]\u0001\u0001 [u8; 16]\u0000\u0004\u0000\u001cArray32\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0005\u0000\u0000Y\u0001\u0000\u0000\u0003\b\u0000\u0000\u0000\b\u0000]\u0001\u0000\u0000\u0003\u0010\u0000\u0000\u0000\b\u0000a\u0001\f,staging_xcm\bv5 Response\u0000\u0001\u0018\u0010Null\u0000\u0000\u0000\u0018Assets\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0001\u0000<ExecutionResult\u0004\u0000e\u0001\u0001POption<(u32, Error)>\u0000\u0002\u0000\u001cVersion\u0004\u0000\u0010\u00018super::Version\u0000\u0003\u0000,PalletsInfo\u0004\u0000m\u0001\u0001�BoundedVec<PalletInfo, MaxPalletsInfo>\u0000\u0004\u00008DispatchResult\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000\u0005\u0000\u0000e\u0001\u0004\u0018Option\u0004\u0004T\u0001i\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000i\u0001\u0000\u0000\u0001\u0000\u0000i\u0001\u0000\u0000\u0004\b\u0010�\u0000m\u0001\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001q\u0001\u0004S\u0000\u0000\u0004\u0000y\u0001\u0001\u0018Vec<T>\u0000\u0000q\u0001\f,staging_xcm\bv5(PalletInfo\u0000\u0000\u0018\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010nameu\u0001\u0001�BoundedVec<u8, MaxPalletNameLen>\u0000\u0001,module_nameu\u0001\u0001�BoundedVec<u8, MaxPalletNameLen>\u0000\u0001\u0014major�\u0001\fu32\u0000\u0001\u0014minor�\u0001\fu32\u0000\u0001\u0014patch�\u0001\fu32\u0000\u0000u\u0001\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000y\u0001\u0000\u0000\u0002q\u0001\u0000}\u0001\f\fxcm\bv38MaybeErrorCode\u0000\u0001\f\u001cSuccess\u0000\u0000\u0000\u0014Error\u0004\u0000�\u0001\u0001�BoundedVec<u8, MaxDispatchErrorLen>\u0000\u0001\u00008TruncatedError\u0004\u0000�\u0001\u0001�BoundedVec<u8, MaxDispatchErrorLen>\u0000\u0002\u0000\u0000�\u0001\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0001\u0004\u0018Option\u0004\u0004T\u0001\u0001\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0000�\u0001\f\fxcm\bv3(OriginKind\u0000\u0001\u0010\u0018Native\u0000\u0000\u0000@SovereignAccount\u0000\u0001\u0000$Superuser\u0000\u0002\u0000\fXcm\u0000\u0003\u0000\u0000�\u0001\u0004\u0018Option\u0004\u0004T\u0001(\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000(\u0000\u0000\u0001\u0000\u0000�\u0001\f\fxcm8double_encoded4DoubleEncoded\u0004\u0004T\u0000\u0000\u0004\u0001\u001cencoded8\u0001\u001cVec<u8>\u0000\u0000�\u0001\f,staging_xcm\bv5DQueryResponseInfo\u0000\u0000\f\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001 query_id,\u0001\u001cQueryId\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0000�\u0001\u0010,staging_xcm\bv5\u0014asset,AssetFilter\u0000\u0001\b Definite\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0000\u0000\u0010Wild\u0004\u0000�\u0001\u0001$WildAsset\u0000\u0001\u0000\u0000�\u0001\u0010,staging_xcm\bv5\u0014asset$WildAsset\u0000\u0001\u0010\fAll\u0000\u0000\u0000\u0014AllOf\b\u0001\bidM\u0001\u0001\u001cAssetId\u0000\u0001\ffun�\u0001\u0001<WildFungibility\u0000\u0001\u0000(AllCounted\u0004\u0000�\u0001\fu32\u0000\u0002\u00000AllOfCounted\f\u0001\bidM\u0001\u0001\u001cAssetId\u0000\u0001\ffun�\u0001\u0001<WildFungibility\u0000\u0001\u0014count�\u0001\fu32\u0000\u0003\u0000\u0000�\u0001\u0010,staging_xcm\bv5\u0014asset<WildFungibility\u0000\u0001\b Fungible\u0000\u0000\u0000,NonFungible\u0000\u0001\u0000\u0000�\u0001\f\fxcm\bv3,WeightLimit\u0000\u0001\b$Unlimited\u0000\u0000\u0000\u001cLimited\u0004\u0000(\u0001\u0018Weight\u0000\u0001\u0000\u0000�\u0001\u0004\u0018Option\u0004\u0004T\u0001�\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0001\u0000\u0000\u0001\u0000\u0000�\u0001\u0010,staging_xcm\bv5\u0014assetLAssetTransferFilter\u0000\u0001\f Teleport\u0004\u0000�\u0001\u0001,AssetFilter\u0000\u0000\u00008ReserveDeposit\u0004\u0000�\u0001\u0001,AssetFilter\u0000\u0001\u0000<ReserveWithdraw\u0004\u0000�\u0001\u0001,AssetFilter\u0000\u0002\u0000\u0000�\u0001\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0001\u0004S\u0000\u0000\u0004\u0000�\u0001\u0001\u0018Vec<T>\u0000\u0000�\u0001\u0000\u0000\u0002�\u0001\u0000�\u0001\u0004\u0018Option\u0004\u0004T\u0001\u0005\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0005\u0001\u0000\u0000\u0001\u0000\u0000�\u0001\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0001\u0004S\u0000\u0000\u0004\u0000�\u0001\u0001\u0018Vec<T>\u0000\u0000�\u0001\f,staging_xcm\bv5\u0010Hint\u0000\u0001\u00040AssetClaimer\u0004\u0001 location\u0001\u0001\u0001 Location\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002�\u0001\u0000�\u0001\b\fxcm<VersionedAssets\u0000\u0001\f\bV3\u0004\u0000�\u0001\u0001<v3::MultiAssets\u0000\u0003\u0000\bV4\u0004\u0000�\u0001\u0001(v4::Assets\u0000\u0004\u0000\bV5\u0004\u0000A\u0001\u0001(v5::Assets\u0000\u0005\u0000\u0000�\u0001\u0010\fxcm\bv3(multiasset,MultiAssets\u0000\u0000\u0004\u0000�\u0001\u0001<Vec<MultiAsset>\u0000\u0000�\u0001\u0000\u0000\u0002�\u0001\u0000�\u0001\u0010\fxcm\bv3(multiasset(MultiAsset\u0000\u0000\b\u0001\bid�\u0001\u0001\u001cAssetId\u0000\u0001\ffun�\u0001\u0001,Fungibility\u0000\u0000�\u0001\u0010\fxcm\bv3(multiasset\u001cAssetId\u0000\u0001\b Concrete\u0004\u0000�\u0001\u00014MultiLocation\u0000\u0000\u0000 Abstract\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0001\u0000\u0000�\u0001\u0010,staging_xcm\bv34multilocation4MultiLocation\u0000\u0000\b\u0001\u001cparents\b\u0001\bu8\u0000\u0001 interior�\u0001\u0001$Junctions\u0000\u0000�\u0001\u0010\fxcm\bv3$junctions$Junctions\u0000\u0001$\u0010Here\u0000\u0000\u0000\bX1\u0004\u0000�\u0001\u0001 Junction\u0000\u0001\u0000\bX2\b\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0002\u0000\bX3\f\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0003\u0000\bX4\u0010\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0004\u0000\bX5\u0014\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0005\u0000\bX6\u0018\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0006\u0000\bX7\u001c\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0007\u0000\bX8 \u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\u0000�\u0001\u0001 Junction\u0000\b\u0000\u0000�\u0001\u0010\fxcm\bv3 junction Junction\u0000\u0001($Parachain\u0004\u0000�\u0001\fu32\u0000\u0000\u0000,AccountId32\b\u0001\u001cnetwork�\u0001\u0001DOption<NetworkId>\u0000\u0001\bid\u0004\u0001 [u8; 32]\u0000\u0001\u00008AccountIndex64\b\u0001\u001cnetwork�\u0001\u0001DOption<NetworkId>\u0000\u0001\u0014index,\u0001\fu64\u0000\u0002\u00000AccountKey20\b\u0001\u001cnetwork�\u0001\u0001DOption<NetworkId>\u0000\u0001\fkey�\u0001 [u8; 20]\u0000\u0003\u00008PalletInstance\u0004\u0000\b\u0001\bu8\u0000\u0004\u00000GeneralIndex\u0004\u0000�\u0001\u0010u128\u0000\u0005\u0000(GeneralKey\b\u0001\u0018length\b\u0001\bu8\u0000\u0001\u0010data\u0004\u0001 [u8; 32]\u0000\u0006\u0000$OnlyChild\u0000\u0007\u0000$Plurality\b\u0001\bid�\u0001\u0018BodyId\u0000\u0001\u0010part�\u0001 BodyPart\u0000\b\u0000<GlobalConsensus\u0004\u0000�\u0001\u0001$NetworkId\u0000\t\u0000\u0000�\u0001\u0004\u0018Option\u0004\u0004T\u0001�\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0001\u0000\u0000\u0001\u0000\u0000�\u0001\u0010\fxcm\bv3 junction$NetworkId\u0000\u0001,$ByGenesis\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0000\u0000\u0018ByFork\b\u00010block_number0\u0001\fu64\u0000\u0001(block_hash\u0004\u0001 [u8; 32]\u0000\u0001\u0000 Polkadot\u0000\u0002\u0000\u0018Kusama\u0000\u0003\u0000\u001cWestend\u0000\u0004\u0000\u0018Rococo\u0000\u0005\u0000\u0018Wococo\u0000\u0006\u0000 Ethereum\u0004\u0001 chain_id,\u0001\fu64\u0000\u0007\u0000,BitcoinCore\u0000\b\u0000,BitcoinCash\u0000\t\u0000@PolkadotBulletin\u0000\n\u0000\u0000�\u0001\u0010\fxcm\bv3(multiasset,Fungibility\u0000\u0001\b Fungible\u0004\u0000�\u0001\u0010u128\u0000\u0000\u0000,NonFungible\u0004\u0000�\u0001\u00014AssetInstance\u0000\u0001\u0000\u0000�\u0001\u0010\fxcm\bv3(multiasset4AssetInstance\u0000\u0001\u0018$Undefined\u0000\u0000\u0000\u0014Index\u0004\u0000�\u0001\u0010u128\u0000\u0001\u0000\u0018Array4\u0004\u0000H\u0001\u001c[u8; 4]\u0000\u0002\u0000\u0018Array8\u0004\u0000Y\u0001\u0001\u001c[u8; 8]\u0000\u0003\u0000\u001cArray16\u0004\u0000]\u0001\u0001 [u8; 16]\u0000\u0004\u0000\u001cArray32\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0005\u0000\u0000�\u0001\u0010,staging_xcm\bv4\u0014asset\u0018Assets\u0000\u0000\u0004\u0000�\u0001\u0001(Vec<Asset>\u0000\u0000�\u0001\u0000\u0000\u0002\u0001\u0002\u0000\u0001\u0002\u0010,staging_xcm\bv4\u0014asset\u0014Asset\u0000\u0000\b\u0001\bid\u0005\u0002\u0001\u001cAssetId\u0000\u0001\ffun\t\u0002\u0001,Fungibility\u0000\u0000\u0005\u0002\u0010,staging_xcm\bv4\u0014asset\u001cAssetId\u0000\u0000\u0004\u0000�\u0001 Location\u0000\u0000\t\u0002\u0010,staging_xcm\bv4\u0014asset,Fungibility\u0000\u0001\b Fungible\u0004\u0000�\u0001\u0010u128\u0000\u0000\u0000,NonFungible\u0004\u0000\r\u0002\u00014AssetInstance\u0000\u0001\u0000\u0000\r\u0002\u0010,staging_xcm\bv4\u0014asset4AssetInstance\u0000\u0001\u0018$Undefined\u0000\u0000\u0000\u0014Index\u0004\u0000�\u0001\u0010u128\u0000\u0001\u0000\u0018Array4\u0004\u0000H\u0001\u001c[u8; 4]\u0000\u0002\u0000\u0018Array8\u0004\u0000Y\u0001\u0001\u001c[u8; 8]\u0000\u0003\u0000\u001cArray16\u0004\u0000]\u0001\u0001 [u8; 16]\u0000\u0004\u0000\u001cArray32\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0005\u0000\u0000\u0011\u0002\b\fxcmDVersionedLocation\u0000\u0001\f\bV3\u0004\u0000�\u0001\u0001Dv3::MultiLocation\u0000\u0003\u0000\bV4\u0004\u0000�\u00010v4::Location\u0000\u0004\u0000\bV5\u0004\u0000\u0001\u0001\u00010v5::Location\u0000\u0005\u0000\u0000\u0015\u0002\fHcumulus_pallet_xcm\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\f4InvalidFormat\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0000\b�Downward message is invalid XCM. \\[ id \\]HUnsupportedVersion\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0001\b�Downward message is unsupported version of XCM. \\[ id \\]@ExecutedDownward\b\u0000\u0004\u0001 [u8; 32]\u0000\u0000�\u0001\u001cOutcome\u0000\u0002\b�Downward message executed with the given outcome.D\\[ id, outcome \\]\u0004|The `Event` enum of this pallet\u0019\u0002\fppallet_xcm_bridge_hub_router\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001\bhDeliveryFeeFactorDecreased\u0004\u0001$new_value\u001d\u0002\u0001$FixedU128\u0004�New value of the `DeliveryFeeFactor`.\u0000\u0004�Delivery fee factor has been decreased.hDeliveryFeeFactorIncreased\u0004\u0001$new_value\u001d\u0002\u0001$FixedU128\u0004�New value of the `DeliveryFeeFactor`.\u0001\u0004�Delivery fee factor has been increased.\u0004|The `Event` enum of this pallet\u001d\u0002\f4sp_arithmetic,fixed_point$FixedU128\u0000\u0000\u0004\u0000\u0018\u0001\u0010u128\u0000\u0000!\u0002\fPpallet_message_queue\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0010@ProcessingFailed\f\u0001\bid4\u0001\u0010H256\u0004�The `blake2_256` hash of the message.\u0001\u0018origin%\u0002\u0001HMessageOriginOf<T>\u0004dThe queue of the message.\u0001\u0014error-\u0002\u0001LProcessMessageError\u0010`The error that occurred.\u0000I\u0001This error is pretty opaque. More fine-grained errors need to be emitted as eventshby the `MessageProcessor`.\u0000\u0004U\u0001Message discarded due to an error in the `MessageProcessor` (usually a format error).$Processed\u0010\u0001\bid4\u0001\u0010H256\u0004�The `blake2_256` hash of the message.\u0001\u0018origin%\u0002\u0001HMessageOriginOf<T>\u0004dThe queue of the message.\u0001,weight_used(\u0001\u0018Weight\u0004�How much weight was used to process the message.\u0001\u001csuccess \u0001\u0010bool\u0018�Whether the message was processed.\u0000I\u0001Note that this does not mean that the underlying `MessageProcessor` was internally5\u0001successful. It *solely* means that the MQ pallet will treat this as a successM\u0001condition and discard the message. Any internal error needs to be emitted as eventshby the `MessageProcessor`.\u0001\u0004TMessage is processed.HOverweightEnqueued\u0010\u0001\bid\u0004\u0001 [u8; 32]\u0004�The `blake2_256` hash of the message.\u0001\u0018origin%\u0002\u0001HMessageOriginOf<T>\u0004dThe queue of the message.\u0001(page_index\u0010\u0001$PageIndex\u0004`The page of the message.\u00014message_index\u0010\u0001\u001cT::Size\u0004�The index of the message within the page.\u0002\u0004�Message placed in overweight queue.(PageReaped\b\u0001\u0018origin%\u0002\u0001HMessageOriginOf<T>\u0004XThe queue of the page.\u0001\u0014index\u0010\u0001$PageIndex\u0004XThe index of the page.\u0003\u0004TThis page was reaped.\u0004|The `Event` enum of this pallet%\u0002\b\\cumulus_primitives_coreXAggregateMessageOrigin\u0000\u0001\f\u0010Here\u0000\u0000\u0000\u0018Parent\u0000\u0001\u0000\u001cSibling\u0004\u0000)\u0002\u0001\u0018ParaId\u0000\u0002\u0000\u0000)\u0002\ftpolkadot_parachain_primitives(primitives\bId\u0000\u0000\u0004\u0000\u0010\u0001\fu32\u0000\u0000-\u0002\u00104frame_support\u0018traits messagesLProcessMessageError\u0000\u0001\u0018$BadFormat\u0000\u0000\u0000\u001cCorrupt\u0000\u0001\u0000,Unsupported\u0000\u0002\u0000(Overweight\u0004\u0000(\u0001\u0018Weight\u0000\u0003\u0000\u0014Yield\u0000\u0004\u0000DStackLimitReached\u0000\u0005\u0000\u00001\u0002\f8pallet_utility\u0018pallet\u0014Event\u0000\u0001\u0018@BatchInterrupted\b\u0001\u0014index\u0010\u0001\fu32\u0000\u0001\u0014errorh\u00014DispatchError\u0000\u0000\bU\u0001Batch of dispatches did not complete fully. Index of first failing dispatch given, asHwell as the error.8BatchCompleted\u0000\u0001\u0004�Batch of dispatches completed fully with no error.`BatchCompletedWithErrors\u0000\u0002\u0004�Batch of dispatches completed but has errors.4ItemCompleted\u0000\u0003\u0004\u001d\u0001A single item within a Batch of dispatches has completed with no error.(ItemFailed\u0004\u0001\u0014errorh\u00014DispatchError\u0000\u0004\u0004\u0011\u0001A single item within a Batch of dispatches has completed with error.0DispatchedAs\u0004\u0001\u0018result5\u0002\u00018DispatchResult\u0000\u0005\u0004XA call was dispatched.\u0004|The `Event` enum of this pallet5\u0002\u0004\u0018Result\b\u0004T\u00019\u0002\u0004E\u0001h\u0001\b\bOk\u0004\u00009\u0002\u0000\u0000\u0000\u0000\fErr\u0004\u0000h\u0000\u0000\u0001\u0000\u00009\u0002\u0000\u0000\u0004\u0000\u0000=\u0002\f<pallet_multisig\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0010,NewMultisig\f\u0001$approving\u0000\u00010T::AccountId\u0000\u0001 multisig\u0000\u00010T::AccountId\u0000\u0001$call_hash\u0004\u0001 CallHash\u0000\u0000\u0004�A new multisig operation has begun.@MultisigApproval\u0010\u0001$approving\u0000\u00010T::AccountId\u0000\u0001$timepointA\u0002\u0001pTimepoint<BlockNumberFor<T>>\u0000\u0001 multisig\u0000\u00010T::AccountId\u0000\u0001$call_hash\u0004\u0001 CallHash\u0000\u0001\u0004�A multisig operation has been approved by someone.@MultisigExecuted\u0014\u0001$approving\u0000\u00010T::AccountId\u0000\u0001$timepointA\u0002\u0001pTimepoint<BlockNumberFor<T>>\u0000\u0001 multisig\u0000\u00010T::AccountId\u0000\u0001$call_hash\u0004\u0001 CallHash\u0000\u0001\u0018result5\u0002\u00018DispatchResult\u0000\u0002\u0004�A multisig operation has been executed.DMultisigCancelled\u0010\u0001(cancelling\u0000\u00010T::AccountId\u0000\u0001$timepointA\u0002\u0001pTimepoint<BlockNumberFor<T>>\u0000\u0001 multisig\u0000\u00010T::AccountId\u0000\u0001$call_hash\u0004\u0001 CallHash\u0000\u0003\u0004�A multisig operation has been cancelled.\u0004|The `Event` enum of this palletA\u0002\b<pallet_multisig$Timepoint\u0004,BlockNumber\u0001\u0010\u0000\b\u0001\u0018height\u0010\u0001,BlockNumber\u0000\u0001\u0014index\u0010\u0001\fu32\u0000\u0000E\u0002\f0pallet_proxy\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u00144ProxyExecuted\u0004\u0001\u0018result5\u0002\u00018DispatchResult\u0000\u0000\u0004�A proxy was executed correctly, with the given.,PureCreated\u0010\u0001\u0010pure\u0000\u00010T::AccountId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001Pdisambiguation_indexM\u0002\u0001\fu16\u0000\u0001\b�A pure account has been created by new proxy with given�disambiguation index and proxy type.$Announced\f\u0001\u0010real\u0000\u00010T::AccountId\u0000\u0001\u0014proxy\u0000\u00010T::AccountId\u0000\u0001$call_hash4\u00014CallHashOf<T>\u0000\u0002\u0004�An announcement was placed to make a call in the future.(ProxyAdded\u0010\u0001$delegator\u0000\u00010T::AccountId\u0000\u0001$delegatee\u0000\u00010T::AccountId\u0000\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001\u0014delay\u0010\u0001DBlockNumberFor<T>\u0000\u0003\u0004HA proxy was added.0ProxyRemoved\u0010\u0001$delegator\u0000\u00010T::AccountId\u0000\u0001$delegatee\u0000\u00010T::AccountId\u0000\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001\u0014delay\u0010\u0001DBlockNumberFor<T>\u0000\u0004\u0004PA proxy was removed.\u0004|The `Event` enum of this palletI\u0002\b\\asset_hub_paseo_runtime$ProxyType\u0000\u0001\u001c\fAny\u0000\u0000\u0000,NonTransfer\u0000\u0001\u0000,CancelProxy\u0000\u0002\u0000\u0018Assets\u0000\u0003\u0000(AssetOwner\u0000\u0004\u00000AssetManager\u0000\u0005\u0000 Collator\u0000\u0006\u0000\u0000M\u0002\u0000\u0000\u0005\u0004\u0000Q\u0002\f4pallet_assets\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001h\u001cCreated\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u001ccreator\u0000\u00010T::AccountId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0000\u0004tSome asset class was created.\u0018Issued\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0001\u0004`Some assets were issued.,Transferred\u0010\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0002\u0004tSome assets were transferred.\u0018Burned\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u001cbalance\u0018\u0001(T::Balance\u0000\u0003\u0004lSome assets were destroyed.,TeamChanged\u0010\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0018issuer\u0000\u00010T::AccountId\u0000\u0001\u0014admin\u0000\u00010T::AccountId\u0000\u0001\u001cfreezer\u0000\u00010T::AccountId\u0000\u0004\u0004pThe management team changed.0OwnerChanged\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0005\u0004HThe owner changed.\u0018Frozen\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0006\u0004xSome account `who` was frozen.\u0018Thawed\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0007\u0004xSome account `who` was thawed.,AssetFrozen\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\b\u0004�Some asset `asset_id` was frozen.,AssetThawed\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\t\u0004�Some asset `asset_id` was thawed.DAccountsDestroyed\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001Haccounts_destroyed\u0010\u0001\fu32\u0000\u0001Haccounts_remaining\u0010\u0001\fu32\u0000\n\u0004�Accounts were destroyed for given asset.HApprovalsDestroyed\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001Lapprovals_destroyed\u0010\u0001\fu32\u0000\u0001Lapprovals_remaining\u0010\u0001\fu32\u0000\u000b\u0004�Approvals were destroyed for given asset.HDestructionStarted\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\f\u0004�An asset class is in the process of being destroyed.$Destroyed\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\r\u0004tAn asset class was destroyed.0ForceCreated\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u000e\u0004�Some asset class was force-created.,MetadataSet\u0014\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u000f\u0004�New metadata has been set for an asset.<MetadataCleared\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0010\u0004�Metadata has been cleared for an asset.@ApprovedTransfer\u0010\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0018source\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0011\u00041\u0001(Additional) funds have been approved for transfer to a destination account.DApprovalCancelled\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0012\u0004�An approval for account `delegate` was cancelled by `owner`.LTransferredApproved\u0014\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001,destination\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0013\b1\u0001An `amount` was transferred in its entirety from `owner` to `destination` by`the approved `delegate`.HAssetStatusChanged\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0014\u0004�An asset has had its attributes changed by the `Force` origin.XAssetMinBalanceChanged\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001<new_min_balance\u0018\u0001(T::Balance\u0000\u0015\u0004\u0001\u0001The min_balance of an asset has been updated by the asset owner.\u001cTouched\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001$depositor\u0000\u00010T::AccountId\u0000\u0016\u0004�Some account `who` was created with a deposit from `depositor`.\u001cBlocked\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0017\u0004|Some account `who` was blocked.$Deposited\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0018\u0004�Some assets were deposited (e.g. for transaction fees).$Withdrawn\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0019\u0004!\u0001Some assets were withdrawn from the account (e.g. for transaction fees).\u0004|The `Event` enum of this palletU\u0002\f8pallet_uniques\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001l\u001cCreated\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u001ccreator\u0000\u00010T::AccountId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0000\u0004lA `collection` was created.0ForceCreated\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u0004�A `collection` was force-created.$Destroyed\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0002\u0004tA `collection` was destroyed.\u0018Issued\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0003\u0004TAn `item` was issued.,Transferred\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0004\u0004hAn `item` was transferred.\u0018Burned\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0005\u0004`An `item` was destroyed.\u0018Frozen\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0006\u0004\\Some `item` was frozen.\u0018Thawed\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0007\u0004\\Some `item` was thawed.@CollectionFrozen\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\b\u0004tSome `collection` was frozen.@CollectionThawed\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\t\u0004tSome `collection` was thawed.0OwnerChanged\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001$new_owner\u0000\u00010T::AccountId\u0000\n\u0004HThe owner changed.,TeamChanged\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0018issuer\u0000\u00010T::AccountId\u0000\u0001\u0014admin\u0000\u00010T::AccountId\u0000\u0001\u001cfreezer\u0000\u00010T::AccountId\u0000\u000b\u0004pThe management team changed.@ApprovedTransfer\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\f\b1\u0001An `item` of a `collection` has been approved by the `owner` for transfer by4a `delegate`.DApprovalCancelled\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\r\b\u0019\u0001An approval for a `delegate` account to transfer the `item` of an item�`collection` was cancelled by its `owner`.DItemStatusChanged\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u000e\u0004\u0011\u0001A `collection` has had its attributes changed by the `Force` origin.TCollectionMetadataSet\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010dataY\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u000f\u0004�New metadata has been set for a `collection`.dCollectionMetadataCleared\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0010\u0004�Metadata has been cleared for a `collection`.,MetadataSet\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010dataY\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0011\u0004�New metadata has been set for an item.<MetadataCleared\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0012\u0004�Metadata has been cleared for an item.,Redeposited\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001@successful_items]\u0002\u00018Vec<T::ItemId>\u0000\u0013\u0004�Metadata has been cleared for an item.0AttributeSet\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\fkeye\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0001\u0014valuei\u0002\u0001tBoundedVec<u8, T::ValueLimit>\u0000\u0014\u0004\u0005\u0001New attribute metadata has been set for a `collection` or `item`.@AttributeCleared\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\fkeye\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0015\u0004\u0005\u0001Attribute metadata has been cleared for a `collection` or `item`.hOwnershipAcceptanceChanged\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001@maybe_collectiona\u0002\u0001\\Option<T::CollectionId>\u0000\u0016\u0004�Ownership acceptance has changed for an account.XCollectionMaxSupplySet\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(max_supply\u0010\u0001\fu32\u0000\u0017\u0004�Max supply has been set for a collection.0ItemPriceSet\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014price\u0018\u0001<ItemPrice<T, I>\u0000\u0001Dwhitelisted_buyerm\u0002\u0001POption<T::AccountId>\u0000\u0018\u0004�The price was set for the instance.@ItemPriceRemoved\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0019\u0004�The price for the instance was removed.(ItemBought\u0014\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014price\u0018\u0001<ItemPrice<T, I>\u0000\u0001\u0018seller\u0000\u00010T::AccountId\u0000\u0001\u0014buyer\u0000\u00010T::AccountId\u0000\u001a\u0004LAn item was bought.\u0004|The `Event` enum of this palletY\u0002\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000]\u0002\u0000\u0000\u0002\u0010\u0000a\u0002\u0004\u0018Option\u0004\u0004T\u0001\u0010\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0010\u0000\u0000\u0001\u0000\u0000e\u0002\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000i\u0002\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000m\u0002\u0004\u0018Option\u0004\u0004T\u0001\u0000\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0000\u0000\u0000\u0001\u0000\u0000q\u0002\f,pallet_nfts\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001�\u001cCreated\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u001ccreator\u0000\u00010T::AccountId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0000\u0004lA `collection` was created.0ForceCreated\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u0004�A `collection` was force-created.$Destroyed\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0002\u0004tA `collection` was destroyed.\u0018Issued\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0003\u0004TAn `item` was issued.,Transferred\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0004\u0004hAn `item` was transferred.\u0018Burned\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0005\u0004`An `item` was destroyed.HItemTransferLocked\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0006\u0004�An `item` became non-transferable.PItemTransferUnlocked\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0007\u0004xAn `item` became transferable.PItemPropertiesLocked\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u00014lock_metadata \u0001\u0010bool\u0000\u0001<lock_attributes \u0001\u0010bool\u0000\b\u0004�`item` metadata or attributes were locked.@CollectionLocked\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\t\u0004tSome `collection` was locked.0OwnerChanged\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001$new_owner\u0000\u00010T::AccountId\u0000\n\u0004HThe owner changed.,TeamChanged\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0018issuerm\u0002\u0001POption<T::AccountId>\u0000\u0001\u0014adminm\u0002\u0001POption<T::AccountId>\u0000\u0001\u001cfreezerm\u0002\u0001POption<T::AccountId>\u0000\u000b\u0004pThe management team changed.@TransferApproved\u0014\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001 deadlinea\u0002\u0001dOption<BlockNumberFor<T>>\u0000\f\b1\u0001An `item` of a `collection` has been approved by the `owner` for transfer by4a `delegate`.DApprovalCancelled\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\r\b\u0019\u0001An approval for a `delegate` account to transfer the `item` of an item�`collection` was cancelled by its `owner`.TAllApprovalsCancelled\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u000e\u0004�All approvals of an item got cancelled.\\CollectionConfigChanged\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u000f\u0004\u0001\u0001A `collection` has had its config changed by the `Force` origin.TCollectionMetadataSet\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010datau\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0010\u0004�New metadata has been set for a `collection`.dCollectionMetadataCleared\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0011\u0004�Metadata has been cleared for a `collection`.<ItemMetadataSet\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010datau\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0012\u0004�New metadata has been set for an item.LItemMetadataCleared\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0013\u0004�Metadata has been cleared for an item.,Redeposited\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001@successful_items]\u0002\u00018Vec<T::ItemId>\u0000\u0014\u0004!\u0001The deposit for a set of `item`s within a `collection` has been updated.0AttributeSet\u0014\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\fkeyi\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0001\u0014valueu\u0002\u0001tBoundedVec<u8, T::ValueLimit>\u0000\u0001$namespacey\u0002\u0001�AttributeNamespace<T::AccountId>\u0000\u0015\u0004\u0005\u0001New attribute metadata has been set for a `collection` or `item`.@AttributeCleared\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\fkeyi\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0001$namespacey\u0002\u0001�AttributeNamespace<T::AccountId>\u0000\u0016\u0004\u0005\u0001Attribute metadata has been cleared for a `collection` or `item`.lItemAttributesApprovalAdded\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0017\u0004�A new approval to modify item attributes was added.tItemAttributesApprovalRemoved\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0018\u0004�A new approval to modify item attributes was removed.hOwnershipAcceptanceChanged\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001@maybe_collectiona\u0002\u0001\\Option<T::CollectionId>\u0000\u0019\u0004�Ownership acceptance has changed for an account.XCollectionMaxSupplySet\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(max_supply\u0010\u0001\fu32\u0000\u001a\u0004�Max supply has been set for a collection.tCollectionMintSettingsUpdated\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u001b\u0004�Mint settings for a collection had changed.lNextCollectionIdIncremented\u0004\u0001\u001cnext_ida\u0002\u0001\\Option<T::CollectionId>\u0000\u001c\u0004\u0001\u0001Event gets emitted when the `NextCollectionId` gets incremented.0ItemPriceSet\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014price\u0018\u0001<ItemPrice<T, I>\u0000\u0001Dwhitelisted_buyerm\u0002\u0001POption<T::AccountId>\u0000\u001d\u0004|The price was set for the item.@ItemPriceRemoved\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u001e\u0004�The price for the item was removed.(ItemBought\u0014\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014price\u0018\u0001<ItemPrice<T, I>\u0000\u0001\u0018seller\u0000\u00010T::AccountId\u0000\u0001\u0014buyer\u0000\u00010T::AccountId\u0000\u001f\u0004LAn item was bought.\u001cTipSent\u0014\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0018sender\u0000\u00010T::AccountId\u0000\u0001 receiver\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001XDepositBalanceOf<T, I>\u0000 \u0004<A tip was sent.,SwapCreated\u0018\u0001Hoffered_collection\u0010\u0001<T::CollectionId\u0000\u00010offered_item\u0010\u0001$T::ItemId\u0000\u0001Hdesired_collection\u0010\u0001<T::CollectionId\u0000\u00010desired_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\u0014price}\u0002\u0001�Option<PriceWithDirection<ItemPrice<T, I>>>\u0000\u0001 deadline\u0010\u0001DBlockNumberFor<T>\u0000!\u0004�An `item` swap intent was created.4SwapCancelled\u0018\u0001Hoffered_collection\u0010\u0001<T::CollectionId\u0000\u00010offered_item\u0010\u0001$T::ItemId\u0000\u0001Hdesired_collection\u0010\u0001<T::CollectionId\u0000\u00010desired_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\u0014price}\u0002\u0001�Option<PriceWithDirection<ItemPrice<T, I>>>\u0000\u0001 deadline\u0010\u0001DBlockNumberFor<T>\u0000\"\u0004\\The swap was cancelled.,SwapClaimed \u0001<sent_collection\u0010\u0001<T::CollectionId\u0000\u0001$sent_item\u0010\u0001$T::ItemId\u0000\u0001<sent_item_owner\u0000\u00010T::AccountId\u0000\u0001Lreceived_collection\u0010\u0001<T::CollectionId\u0000\u00014received_item\u0010\u0001$T::ItemId\u0000\u0001Lreceived_item_owner\u0000\u00010T::AccountId\u0000\u0001\u0014price}\u0002\u0001�Option<PriceWithDirection<ItemPrice<T, I>>>\u0000\u0001 deadline\u0010\u0001DBlockNumberFor<T>\u0000#\u0004hThe swap has been claimed.XPreSignedAttributesSet\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001$namespacey\u0002\u0001�AttributeNamespace<T::AccountId>\u0000$\u0004�New attributes have been set for an `item` of the `collection`.HPalletAttributeSet\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010itema\u0002\u0001DOption<T::ItemId>\u0000\u0001$attribute�\u0002\u0001�PalletAttributes<T::CollectionId>\u0000\u0001\u0014valueu\u0002\u0001tBoundedVec<u8, T::ValueLimit>\u0000%\bM\u0001A new attribute in the `Pallet` namespace was set for the `collection` or an `item`dwithin that `collection`.\u0004|The `Event` enum of this palletu\u0002\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000y\u0002\f,pallet_nfts\u0014typesHAttributeNamespace\u0004$AccountId\u0001\u0000\u0001\u0010\u0018Pallet\u0000\u0000\u0000<CollectionOwner\u0000\u0001\u0000$ItemOwner\u0000\u0002\u0000\u001cAccount\u0004\u0000\u0000\u0001$AccountId\u0000\u0003\u0000\u0000}\u0002\u0004\u0018Option\u0004\u0004T\u0001�\u0002\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0002\u0000\u0000\u0001\u0000\u0000�\u0002\f,pallet_nfts\u0014typesHPriceWithDirection\u0004\u0018Amount\u0001\u0018\u0000\b\u0001\u0018amount\u0018\u0001\u0018Amount\u0000\u0001$direction�\u0002\u00018PriceDirection\u0000\u0000�\u0002\f,pallet_nfts\u0014types8PriceDirection\u0000\u0001\b\u0010Send\u0000\u0000\u0000\u001cReceive\u0000\u0001\u0000\u0000�\u0002\f,pallet_nfts\u0014types@PalletAttributes\u00040CollectionId\u0001\u0010\u0001\b,UsedToClaim\u0004\u0000\u0010\u00010CollectionId\u0000\u0000\u0000@TransferDisabled\u0000\u0001\u0000\u0000�\u0002\f4pallet_assets\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001h\u001cCreated\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u001ccreator\u0000\u00010T::AccountId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0000\u0004tSome asset class was created.\u0018Issued\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0001\u0004`Some assets were issued.,Transferred\u0010\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0002\u0004tSome assets were transferred.\u0018Burned\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u001cbalance\u0018\u0001(T::Balance\u0000\u0003\u0004lSome assets were destroyed.,TeamChanged\u0010\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0018issuer\u0000\u00010T::AccountId\u0000\u0001\u0014admin\u0000\u00010T::AccountId\u0000\u0001\u001cfreezer\u0000\u00010T::AccountId\u0000\u0004\u0004pThe management team changed.0OwnerChanged\b\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0005\u0004HThe owner changed.\u0018Frozen\b\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0006\u0004xSome account `who` was frozen.\u0018Thawed\b\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0007\u0004xSome account `who` was thawed.,AssetFrozen\u0004\u0001 asset_id�\u0001(T::AssetId\u0000\b\u0004�Some asset `asset_id` was frozen.,AssetThawed\u0004\u0001 asset_id�\u0001(T::AssetId\u0000\t\u0004�Some asset `asset_id` was thawed.DAccountsDestroyed\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001Haccounts_destroyed\u0010\u0001\fu32\u0000\u0001Haccounts_remaining\u0010\u0001\fu32\u0000\n\u0004�Accounts were destroyed for given asset.HApprovalsDestroyed\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001Lapprovals_destroyed\u0010\u0001\fu32\u0000\u0001Lapprovals_remaining\u0010\u0001\fu32\u0000\u000b\u0004�Approvals were destroyed for given asset.HDestructionStarted\u0004\u0001 asset_id�\u0001(T::AssetId\u0000\f\u0004�An asset class is in the process of being destroyed.$Destroyed\u0004\u0001 asset_id�\u0001(T::AssetId\u0000\r\u0004tAn asset class was destroyed.0ForceCreated\b\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u000e\u0004�Some asset class was force-created.,MetadataSet\u0014\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u000f\u0004�New metadata has been set for an asset.<MetadataCleared\u0004\u0001 asset_id�\u0001(T::AssetId\u0000\u0010\u0004�Metadata has been cleared for an asset.@ApprovedTransfer\u0010\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0018source\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0011\u00041\u0001(Additional) funds have been approved for transfer to a destination account.DApprovalCancelled\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0012\u0004�An approval for account `delegate` was cancelled by `owner`.LTransferredApproved\u0014\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001,destination\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0013\b1\u0001An `amount` was transferred in its entirety from `owner` to `destination` by`the approved `delegate`.HAssetStatusChanged\u0004\u0001 asset_id�\u0001(T::AssetId\u0000\u0014\u0004�An asset has had its attributes changed by the `Force` origin.XAssetMinBalanceChanged\b\u0001 asset_id�\u0001(T::AssetId\u0000\u0001<new_min_balance\u0018\u0001(T::Balance\u0000\u0015\u0004\u0001\u0001The min_balance of an asset has been updated by the asset owner.\u001cTouched\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001$depositor\u0000\u00010T::AccountId\u0000\u0016\u0004�Some account `who` was created with a deposit from `depositor`.\u001cBlocked\b\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0017\u0004|Some account `who` was blocked.$Deposited\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0018\u0004�Some assets were deposited (e.g. for transaction fees).$Withdrawn\f\u0001 asset_id�\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0019\u0004!\u0001Some assets were withdrawn from the account (e.g. for transaction fees).\u0004|The `Event` enum of this pallet�\u0002\f4pallet_assets\u0018pallet\u0014Event\b\u0004T\u0000\u0004I\u0000\u0001h\u001cCreated\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u001ccreator\u0000\u00010T::AccountId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0000\u0004tSome asset class was created.\u0018Issued\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0001\u0004`Some assets were issued.,Transferred\u0010\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0010from\u0000\u00010T::AccountId\u0000\u0001\bto\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0002\u0004tSome assets were transferred.\u0018Burned\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001\u001cbalance\u0018\u0001(T::Balance\u0000\u0003\u0004lSome assets were destroyed.,TeamChanged\u0010\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0018issuer\u0000\u00010T::AccountId\u0000\u0001\u0014admin\u0000\u00010T::AccountId\u0000\u0001\u001cfreezer\u0000\u00010T::AccountId\u0000\u0004\u0004pThe management team changed.0OwnerChanged\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0005\u0004HThe owner changed.\u0018Frozen\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0006\u0004xSome account `who` was frozen.\u0018Thawed\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0007\u0004xSome account `who` was thawed.,AssetFrozen\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\b\u0004�Some asset `asset_id` was frozen.,AssetThawed\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\t\u0004�Some asset `asset_id` was thawed.DAccountsDestroyed\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001Haccounts_destroyed\u0010\u0001\fu32\u0000\u0001Haccounts_remaining\u0010\u0001\fu32\u0000\n\u0004�Accounts were destroyed for given asset.HApprovalsDestroyed\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001Lapprovals_destroyed\u0010\u0001\fu32\u0000\u0001Lapprovals_remaining\u0010\u0001\fu32\u0000\u000b\u0004�Approvals were destroyed for given asset.HDestructionStarted\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\f\u0004�An asset class is in the process of being destroyed.$Destroyed\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\r\u0004tAn asset class was destroyed.0ForceCreated\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u000e\u0004�Some asset class was force-created.,MetadataSet\u0014\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u000f\u0004�New metadata has been set for an asset.<MetadataCleared\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0010\u0004�Metadata has been cleared for an asset.@ApprovedTransfer\u0010\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0018source\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0011\u00041\u0001(Additional) funds have been approved for transfer to a destination account.DApprovalCancelled\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0012\u0004�An approval for account `delegate` was cancelled by `owner`.LTransferredApproved\u0014\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\u0014owner\u0000\u00010T::AccountId\u0000\u0001 delegate\u0000\u00010T::AccountId\u0000\u0001,destination\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0013\b1\u0001An `amount` was transferred in its entirety from `owner` to `destination` by`the approved `delegate`.HAssetStatusChanged\u0004\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0014\u0004�An asset has had its attributes changed by the `Force` origin.XAssetMinBalanceChanged\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001<new_min_balance\u0018\u0001(T::Balance\u0000\u0015\u0004\u0001\u0001The min_balance of an asset has been updated by the asset owner.\u001cTouched\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001$depositor\u0000\u00010T::AccountId\u0000\u0016\u0004�Some account `who` was created with a deposit from `depositor`.\u001cBlocked\b\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0017\u0004|Some account `who` was blocked.$Deposited\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0018\u0004�Some assets were deposited (e.g. for transaction fees).$Withdrawn\f\u0001 asset_id\u0010\u0001(T::AssetId\u0000\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0019\u0004!\u0001Some assets were withdrawn from the account (e.g. for transaction fees).\u0004|The `Event` enum of this pallet�\u0002\f\\pallet_asset_conversion\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0018,PoolCreated\u0010\u0001\u001ccreator\u0000\u00010T::AccountId\u0004�The account that created the pool.\u0001\u001cpool_id�\u0002\u0001$T::PoolId\bI\u0001The pool id associated with the pool. Note that the order of the assets may not be�the same as the order specified in the create pool extrinsic.\u00010pool_account\u0000\u00010T::AccountId\u0004lThe account ID of the pool.\u0001 lp_token\u0010\u00018T::PoolAssetId\bA\u0001The id of the liquidity tokens that will be minted when assets are added to this\u0014pool.\u0000\u0004\u001d\u0001A successful call of the `CreatePool` extrinsic will create this event.8LiquidityAdded\u001c\u0001\fwho\u0000\u00010T::AccountId\u0004�The account that the liquidity was taken from.\u0001\u001cmint_to\u0000\u00010T::AccountId\u0004�The account that the liquidity tokens were minted to.\u0001\u001cpool_id�\u0002\u0001$T::PoolId\u0004�The pool id of the pool that the liquidity was added to.\u0001@amount1_provided\u0018\u0001(T::Balance\u0004�The amount of the first asset that was added to the pool.\u0001@amount2_provided\u0018\u0001(T::Balance\u0004�The amount of the second asset that was added to the pool.\u0001 lp_token\u0010\u00018T::PoolAssetId\u0004�The id of the lp token that was minted.\u0001<lp_token_minted\u0018\u0001(T::Balance\u0004�The amount of lp tokens that were minted of that id.\u0001\u0004%\u0001A successful call of the `AddLiquidity` extrinsic will create this event.@LiquidityRemoved \u0001\fwho\u0000\u00010T::AccountId\u0004�The account that the liquidity tokens were burned from.\u0001,withdraw_to\u0000\u00010T::AccountId\u0004�The account that the assets were transferred to.\u0001\u001cpool_id�\u0002\u0001$T::PoolId\u0004�The pool id that the liquidity was removed from.\u0001\u001camount1\u0018\u0001(T::Balance\u0004�The amount of the first asset that was removed from the pool.\u0001\u001camount2\u0018\u0001(T::Balance\u0004�The amount of the second asset that was removed from the pool.\u0001 lp_token\u0010\u00018T::PoolAssetId\u0004�The id of the lp token that was burned.\u0001<lp_token_burned\u0018\u0001(T::Balance\u0004�The amount of lp tokens that were burned of that id.\u00018withdrawal_fee�\u0002\u0001\u001cPermill\u0004tLiquidity withdrawal fee (%).\u0002\u00041\u0001A successful call of the `RemoveLiquidity` extrinsic will create this event.0SwapExecuted\u0014\u0001\fwho\u0000\u00010T::AccountId\u0004�Which account was the instigator of the swap.\u0001\u001csend_to\u0000\u00010T::AccountId\u0004�The account that the assets were transferred to.\u0001$amount_in\u0018\u0001(T::Balance\u0004�The amount of the first asset that was swapped.\u0001(amount_out\u0018\u0001(T::Balance\u0004�The amount of the second asset that was received.\u0001\u0010path�\u0002\u00018BalancePath<T>\b�The route of asset IDs with amounts that the swap went through.�E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)\u0003\b5\u0001Assets have been converted from one to another. Both `SwapExactTokenForToken`�and `SwapTokenForExactToken` will generate this event.HSwapCreditExecuted\f\u0001$amount_in\u0018\u0001(T::Balance\u0004�The amount of the first asset that was swapped.\u0001(amount_out\u0018\u0001(T::Balance\u0004�The amount of the second asset that was received.\u0001\u0010path�\u0002\u00018BalancePath<T>\b�The route of asset IDs with amounts that the swap went through.�E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)\u0004\u0004�Assets have been converted from one to another.\u001cTouched\b\u0001\u001cpool_id�\u0002\u0001$T::PoolId\u0004LThe ID of the pool.\u0001\fwho\u0000\u00010T::AccountId\u0004�The account initiating the touch.\u0005\u0004\r\u0001Pool has been touched in order to fulfill operational requirements.\u0004|The `Event` enum of this pallet�\u0002\u0000\u0000\u0004\b��\u0000�\u0002\f4sp_arithmetic(per_things\u001cPermill\u0000\u0000\u0004\u0000\u0010\u0001\fu32\u0000\u0000�\u0002\u0000\u0000\u0002�\u0002\u0000�\u0002\u0000\u0000\u0004\b�\u0018\u0000�\u0002\flpallet_state_trie_migration\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0010 Migrated\f\u0001\ftop\u0010\u0001\fu32\u0000\u0001\u0014child\u0010\u0001\fu32\u0000\u0001\u001ccompute�\u0002\u0001@MigrationCompute\u0000\u0000\b9\u0001Given number of `(top, child)` keys were migrated respectively, with the given(`compute`.\u001cSlashed\b\u0001\fwho\u0000\u00010T::AccountId\u0000\u0001\u0018amount\u0018\u00010BalanceOf<T>\u0000\u0001\u0004�Some account got slashed by the given amount.TAutoMigrationFinished\u0000\u0002\u0004�The auto migration task finished.\u0018Halted\u0004\u0001\u0014error�\u0002\u0001 Error<T>\u0000\u0003\u0004�Migration got halted due to an error or miss-configuration.\u0004pInner events of this pallet.�\u0002\flpallet_state_trie_migration\u0018pallet@MigrationCompute\u0000\u0001\b\u0018Signed\u0000\u0000\u0000\u0010Auto\u0000\u0001\u0000\u0000�\u0002\flpallet_state_trie_migration\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\u0018<MaxSignedLimits\u0000\u0000\u0004�Max signed limits not respected.(KeyTooLong\u0000\u0001\u001c�A key was longer than the configured maximum.\u0000\u0011\u0001This means that the migration halted at the current [`Progress`] and\u0001\u0001can be resumed with a larger [`crate::Config::MaxKeyLen`] value.!\u0001Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.E\u0001The value should only be increased to avoid a storage migration for the currently�stored [`crate::Progress::LastKey`].8NotEnoughFunds\u0000\u0002\u0004�submitter does not have enough funds.(BadWitness\u0000\u0003\u0004hBad witness data provided.dSignedMigrationNotAllowed\u0000\u0004\u0004%\u0001Signed migration is not allowed because the maximum limit is not set yet.0BadChildRoot\u0000\u0005\u0004`Bad child root provided.\u0004�The `Error` enum of this pallet.�\u0002\f,pallet_sudo\u0018pallet\u0014Event\u0004\u0004T\u0000\u0001\u0010\u0014Sudid\u0004\u0001,sudo_result5\u0002\u00018DispatchResult\u0004�The result of the call made by the sudo user.\u0000\u0004pA sudo call just took place.(KeyChanged\b\u0001\foldm\u0002\u0001POption<T::AccountId>\u0004�The old sudo key (if one was previously set).\u0001\fnew\u0000\u00010T::AccountId\u0004�The new sudo key (if one was set).\u0001\u0004xThe sudo key has been updated.(KeyRemoved\u0000\u0002\u0004�The key was permanently removed.(SudoAsDone\u0004\u0001,sudo_result5\u0002\u00018DispatchResult\u0004�The result of the call made by the sudo user.\u0003\u0004�A [sudo_as](Pallet::sudo_as) call just took place.\u0004|The `Event` enum of this pallet�\u0002\b0frame_system\u0014Phase\u0000\u0001\f8ApplyExtrinsic\u0004\u0000\u0010\u0001\fu32\u0000\u0000\u00000Finalization\u0000\u0001\u00008Initialization\u0000\u0002\u0000\u0000�\u0002\u0000\u0000\u00024\u0000�\u0002\u0000\u0000\u0002�\u0002\u0000�\u0002\u0000\u0000\u0004\b\u0010\u0010\u0000�\u0002\b0frame_systemXLastRuntimeUpgradeInfo\u0000\u0000\b\u00010spec_version�\u0001Lcodec::Compact<u32>\u0000\u0001$spec_name�\u0002\u0001DCow<'static, str>\u0000\u0000�\u0002\u0004\fCow\u0004\u0004T\u0001�\u0002\u0000\u0004\u0000�\u0002\u0000\u0000\u0000�\u0002\u0000\u0000\u0005\u0002\u0000�\u0002\b0frame_system`CodeUpgradeAuthorization\u0004\u0004T\u0000\u0000\b\u0001$code_hash4\u0001\u001cT::Hash\u0000\u00014check_version \u0001\u0010bool\u0000\u0000�\u0002\f0frame_system\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001,\u0018remark\u0004\u0001\u0018remark8\u0001\u001cVec<u8>\u0000\u0000\fhMake some on-chain remark.\u0000�Can be executed by every `origin`.8set_heap_pages\u0004\u0001\u0014pages0\u0001\fu64\u0000\u0001\u0004�Set the number of pages in the WebAssembly environment's heap. set_code\u0004\u0001\u0010code8\u0001\u001cVec<u8>\u0000\u0002\u0004dSet the new runtime code.\\set_code_without_checks\u0004\u0001\u0010code8\u0001\u001cVec<u8>\u0000\u0003\u0010\u0019\u0001Set the new runtime code without doing any checks of the given `code`.\u0000Q\u0001Note that runtime upgrades will not run if this is called with a not-increasing spec version!,set_storage\u0004\u0001\u0014items�\u0002\u00014Vec<KeyValue>\u0000\u0004\u0004hSet some items of storage.0kill_storage\u0004\u0001\u0010keys�\u0002\u0001 Vec<Key>\u0000\u0005\u0004tKill some items from storage.,kill_prefix\b\u0001\u0018prefix8\u0001\fKey\u0000\u0001\u001csubkeys\u0010\u0001\fu32\u0000\u0006\u0010\u0011\u0001Kill all storage items with a key that starts with the given prefix.\u00009\u0001**NOTE:** We rely on the Root origin to provide us the number of subkeys under=\u0001the prefix we are removing to accurately calculate the weight of this function.Dremark_with_event\u0004\u0001\u0018remark8\u0001\u001cVec<u8>\u0000\u0007\u0004�Make some on-chain remark and emit event.Dauthorize_upgrade\u0004\u0001$code_hash4\u0001\u001cT::Hash\u0000\t\u0010a\u0001Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied\u0018later.\u0000|This call requires Root origin.�authorize_upgrade_without_checks\u0004\u0001$code_hash4\u0001\u001cT::Hash\u0000\n a\u0001Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied\u0018later.\u0000]\u0001WARNING: This authorizes an upgrade that will take place without any safety checks, forY\u0001example that the spec name remains the same and that the version number increases. Not�recommended for normal use. Use `authorize_upgrade` instead.\u0000|This call requires Root origin.`apply_authorized_upgrade\u0004\u0001\u0010code8\u0001\u001cVec<u8>\u0000\u000b$U\u0001Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.\u0000I\u0001If the authorization required a version check, this call will ensure the spec name�remains unchanged and that the spec version has increased.\u0000Y\u0001Depending on the runtime's `OnSetCode` configuration, this function may directly apply\u0011\u0001the new `code` in the same block or attempt to schedule the upgrade.\u0000`All origins are allowed.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0002\u0000\u0000\u0002�\u0002\u0000�\u0002\u0000\u0000\u0004\b88\u0000�\u0002\u0000\u0000\u00028\u0000�\u0002\f0frame_system\u0018limits0BlockWeights\u0000\u0000\f\u0001(base_block(\u0001\u0018Weight\u0000\u0001$max_block(\u0001\u0018Weight\u0000\u0001$per_class�\u0002\u0001�PerDispatchClass<WeightsPerClass>\u0000\u0000�\u0002\f4frame_support dispatch@PerDispatchClass\u0004\u0004T\u0001�\u0002\u0000\f\u0001\u0018normal�\u0002\u0001\u0004T\u0000\u0001,operational�\u0002\u0001\u0004T\u0000\u0001$mandatory�\u0002\u0001\u0004T\u0000\u0000�\u0002\f0frame_system\u0018limits<WeightsPerClass\u0000\u0000\u0010\u00018base_extrinsic(\u0001\u0018Weight\u0000\u00014max_extrinsic�\u0001\u00018Option<Weight>\u0000\u0001$max_total�\u0001\u00018Option<Weight>\u0000\u0001 reserved�\u0001\u00018Option<Weight>\u0000\u0000�\u0002\f0frame_system\u0018limits,BlockLength\u0000\u0000\u0004\u0001\fmax�\u0002\u0001TPerDispatchClass<u32>\u0000\u0000�\u0002\f4frame_support dispatch@PerDispatchClass\u0004\u0004T\u0001\u0010\u0000\f\u0001\u0018normal\u0010\u0001\u0004T\u0000\u0001,operational\u0010\u0001\u0004T\u0000\u0001$mandatory\u0010\u0001\u0004T\u0000\u0000�\u0002\b(sp_weights<RuntimeDbWeight\u0000\u0000\b\u0001\u0010read0\u0001\fu64\u0000\u0001\u0014write0\u0001\fu64\u0000\u0000\u0001\u0003\b(sp_version8RuntimeVersion\u0000\u0000 \u0001$spec_name�\u0002\u0001DCow<'static, str>\u0000\u0001$impl_name�\u0002\u0001DCow<'static, str>\u0000\u0001Dauthoring_version\u0010\u0001\fu32\u0000\u00010spec_version\u0010\u0001\fu32\u0000\u00010impl_version\u0010\u0001\fu32\u0000\u0001\u0010apis\u0005\u0003\u0001\u001cApisVec\u0000\u0001Ltransaction_version\u0010\u0001\fu32\u0000\u00018system_version\b\u0001\bu8\u0000\u0000\u0005\u0003\u0004\fCow\u0004\u0004T\u0001\t\u0003\u0000\u0004\u0000\t\u0003\u0000\u0000\u0000\t\u0003\u0000\u0000\u0002\r\u0003\u0000\r\u0003\u0000\u0000\u0004\bY\u0001\u0010\u0000\u0011\u0003\f0frame_system\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001$<InvalidSpecName\u0000\u0000\b\u0011\u0001The name of specification does not match between the current runtimePand the new runtime.hSpecVersionNeedsToIncrease\u0000\u0001\bA\u0001The specification version is not allowed to decrease between the current runtimePand the new runtime.tFailedToExtractRuntimeVersion\u0000\u0002\f�Failed to extract the runtime version from the new runtime.\u0000\t\u0001Either calling `Core_version` or decoding `RuntimeVersion` failed.LNonDefaultComposite\u0000\u0003\u0004�Suicide called when the account has non-default composite data.<NonZeroRefCount\u0000\u0004\u00045\u0001There is a non-zero reference count preventing the account from being purged.0CallFiltered\u0000\u0005\u0004�The origin filter prevent the call to be dispatched.lMultiBlockMigrationsOngoing\u0000\u0006\u0004U\u0001A multi-block migration is ongoing and prevents the current code from being replaced.DNothingAuthorized\u0000\u0007\u0004XNo upgrade authorized.0Unauthorized\u0000\b\u0004�The submitted code is not authorized.\u0004lError for the System pallet\u0015\u0003\u0000\u0000\u0002\u0019\u0003\u0000\u0019\u0003\f|cumulus_pallet_parachain_systemHunincluded_segment Ancestor\u0004\u0004H\u00014\u0000\f\u00018used_bandwidth\u001d\u0003\u00014UsedBandwidth\u0000\u00018para_head_hash1\u0003\u0001$Option<H>\u0000\u0001`consumed_go_ahead_signal5\u0003\u0001�Option<relay_chain::UpgradeGoAhead>\u0000\u0000\u001d\u0003\f|cumulus_pallet_parachain_systemHunincluded_segment4UsedBandwidth\u0000\u0000\f\u00014ump_msg_count\u0010\u0001\fu32\u0000\u0001<ump_total_bytes\u0010\u0001\fu32\u0000\u00014hrmp_outgoing!\u0003\u0001�BTreeMap<ParaId, HrmpChannelUpdate>\u0000\u0000!\u0003\u0004 BTreeMap\b\u0004K\u0001)\u0002\u0004V\u0001%\u0003\u0000\u0004\u0000)\u0003\u0000\u0000\u0000%\u0003\f|cumulus_pallet_parachain_systemHunincluded_segmentDHrmpChannelUpdate\u0000\u0000\b\u0001$msg_count\u0010\u0001\fu32\u0000\u0001,total_bytes\u0010\u0001\fu32\u0000\u0000)\u0003\u0000\u0000\u0002-\u0003\u0000-\u0003\u0000\u0000\u0004\b)\u0002%\u0003\u00001\u0003\u0004\u0018Option\u0004\u0004T\u00014\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u00004\u0000\u0000\u0001\u0000\u00005\u0003\u0004\u0018Option\u0004\u0004T\u00019\u0003\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u00009\u0003\u0000\u0000\u0001\u0000\u00009\u0003\fLpolkadot_primitives\bv88UpgradeGoAhead\u0000\u0001\b\u0014Abort\u0000\u0000\u0000\u001cGoAhead\u0000\u0001\u0000\u0000=\u0003\f|cumulus_pallet_parachain_systemHunincluded_segment8SegmentTracker\u0004\u0004H\u00014\u0000\f\u00018used_bandwidth\u001d\u0003\u00014UsedBandwidth\u0000\u00018hrmp_watermarka\u0002\u0001�Option<relay_chain::BlockNumber>\u0000\u0001`consumed_go_ahead_signal5\u0003\u0001�Option<relay_chain::UpgradeGoAhead>\u0000\u0000A\u0003\fLpolkadot_primitives\bv8\\PersistedValidationData\b\u0004H\u00014\u0004N\u0001\u0010\u0000\u0010\u0001,parent_headE\u0003\u0001 HeadData\u0000\u0001Lrelay_parent_number\u0010\u0001\u0004N\u0000\u0001drelay_parent_storage_root4\u0001\u0004H\u0000\u00010max_pov_size\u0010\u0001\fu32\u0000\u0000E\u0003\ftpolkadot_parachain_primitives(primitives HeadData\u0000\u0000\u0004\u00008\u0001\u001cVec<u8>\u0000\u0000I\u0003\u0004\u0018Option\u0004\u0004T\u0001M\u0003\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000M\u0003\u0000\u0000\u0001\u0000\u0000M\u0003\fLpolkadot_primitives\bv8HUpgradeRestriction\u0000\u0001\u0004\u001cPresent\u0000\u0000\u0000\u0000Q\u0003\f\u001csp_trie4storage_proof0StorageProof\u0000\u0000\u0004\u0001(trie_nodesU\u0003\u0001DBTreeSet<Vec<u8>>\u0000\u0000U\u0003\u0004 BTreeSet\u0004\u0004T\u00018\u0000\u0004\u0000�\u0002\u0000\u0000\u0000Y\u0003\f|cumulus_pallet_parachain_systemPrelay_state_snapshotXMessagingStateSnapshot\u0000\u0000\u0010\u00010dmq_mqc_head4\u0001Drelay_chain::Hash\u0000\u0001�relay_dispatch_queue_remaining_capacity]\u0003\u0001�RelayDispatchQueueRemainingCapacity\u0000\u0001@ingress_channelsa\u0003\u0001�Vec<(ParaId, AbridgedHrmpChannel)>\u0000\u0001<egress_channelsa\u0003\u0001�Vec<(ParaId, AbridgedHrmpChannel)>\u0000\u0000]\u0003\f|cumulus_pallet_parachain_systemPrelay_state_snapshot�RelayDispatchQueueRemainingCapacity\u0000\u0000\b\u0001<remaining_count\u0010\u0001\fu32\u0000\u00018remaining_size\u0010\u0001\fu32\u0000\u0000a\u0003\u0000\u0000\u0002e\u0003\u0000e\u0003\u0000\u0000\u0004\b)\u0002i\u0003\u0000i\u0003\fLpolkadot_primitives\bv8LAbridgedHrmpChannel\u0000\u0000\u0018\u00010max_capacity\u0010\u0001\fu32\u0000\u00018max_total_size\u0010\u0001\fu32\u0000\u0001@max_message_size\u0010\u0001\fu32\u0000\u0001$msg_count\u0010\u0001\fu32\u0000\u0001(total_size\u0010\u0001\fu32\u0000\u0001 mqc_head1\u0003\u00010Option<Hash>\u0000\u0000m\u0003\fLpolkadot_primitives\bv8dAbridgedHostConfiguration\u0000\u0000(\u00014max_code_size\u0010\u0001\fu32\u0000\u0001Hmax_head_data_size\u0010\u0001\fu32\u0000\u0001Xmax_upward_queue_count\u0010\u0001\fu32\u0000\u0001Tmax_upward_queue_size\u0010\u0001\fu32\u0000\u0001\\max_upward_message_size\u0010\u0001\fu32\u0000\u0001�max_upward_message_num_per_candidate\u0010\u0001\fu32\u0000\u0001�hrmp_max_message_num_per_candidate\u0010\u0001\fu32\u0000\u0001lvalidation_upgrade_cooldown\u0010\u0001,BlockNumber\u0000\u0001`validation_upgrade_delay\u0010\u0001,BlockNumber\u0000\u0001Pasync_backing_paramsq\u0003\u0001HAsyncBackingParams\u0000\u0000q\u0003\u0010Lpolkadot_primitives\bv84async_backingHAsyncBackingParams\u0000\u0000\b\u0001Lmax_candidate_depth\u0010\u0001\fu32\u0000\u0001Pallowed_ancestry_len\u0010\u0001\fu32\u0000\u0000u\u0003\b�cumulus_primitives_parachain_inherentDMessageQueueChain\u0000\u0000\u0004\u00004\u0001$RelayHash\u0000\u0000y\u0003\u0004 BTreeMap\b\u0004K\u0001)\u0002\u0004V\u0001u\u0003\u0000\u0004\u0000}\u0003\u0000\u0000\u0000}\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\u0000\u0000\u0004\b)\u0002u\u0003\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\b`polkadot_core_primitivesLOutboundHrmpMessage\u0004\bId\u0001)\u0002\u0000\b\u0001$recipient)\u0002\u0001\bId\u0000\u0001\u0010data8\u0001Lalloc::vec::Vec<u8>\u0000\u0000�\u0003\f|cumulus_pallet_parachain_system\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\bLset_validation_data\u0004\u0001\u0010data�\u0003\u0001TParachainInherentData\u0000\u0000$�Set the current validation data.\u0000A\u0001This should be invoked exactly once per block. It will panic at the finalization�phase if the call was not invoked.\u0000�The dispatch origin for this call must be `Inherent`\u0000!\u0001As a side effect, this function upgrades the current validation function�if the appropriate time has come.`sudo_send_upward_message\u0004\u0001\u001cmessage8\u00014UpwardMessage\u0000\u0001\u0000\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0003\b�cumulus_primitives_parachain_inherentTParachainInherentData\u0000\u0000\u0010\u0001<validation_dataA\u0003\u0001\\PersistedValidationData\u0000\u0001Drelay_chain_stateQ\u0003\u0001Tsp_trie::StorageProof\u0000\u0001Ddownward_messages�\u0003\u0001lVec<InboundDownwardMessage>\u0000\u0001Lhorizontal_messages�\u0003\u0001�BTreeMap<ParaId, Vec<InboundHrmpMessage>>\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\b`polkadot_core_primitivesXInboundDownwardMessage\u0004,BlockNumber\u0001\u0010\u0000\b\u0001\u001csent_at\u0010\u0001,BlockNumber\u0000\u0001\fmsg8\u0001<DownwardMessage\u0000\u0000�\u0003\u0004 BTreeMap\b\u0004K\u0001)\u0002\u0004V\u0001�\u0003\u0000\u0004\u0000�\u0003\u0000\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\b`polkadot_core_primitivesHInboundHrmpMessage\u0004,BlockNumber\u0001\u0010\u0000\b\u0001\u001csent_at\u0010\u0001,BlockNumber\u0000\u0001\u0010data8\u0001Lalloc::vec::Vec<u8>\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\u0000\u0000\u0004\b)\u0002�\u0003\u0000�\u0003\f|cumulus_pallet_parachain_system\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001 LOverlappingUpgrades\u0000\u0000\u0004\u0019\u0001Attempt to upgrade validation function while existing upgrade pending.PProhibitedByPolkadot\u0000\u0001\u0004M\u0001Polkadot currently prohibits this parachain from upgrading its validation function.\u0018TooBig\u0000\u0002\bE\u0001The supplied validation function has compiled into a blob larger than Polkadot is<willing to run.hValidationDataNotAvailable\u0000\u0003\u0004\u001d\u0001The inherent which supplies the validation data did not run this block.tHostConfigurationNotAvailable\u0000\u0004\u0004)\u0001The inherent which supplies the host configuration did not run this block.0NotScheduled\u0000\u0005\u0004�No validation function upgrade is currently scheduled.DNothingAuthorized\u0000\u0006\u0004�No code upgrade has been authorized.0Unauthorized\u0000\u0007\u0004�The given code upgrade has not been authorized.\u0004�The `Error` enum of this pallet.�\u0003\f@pallet_timestamp\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0004\fset\u0004\u0001\fnow,\u0001$T::Moment\u0000\u0000LTSet the current time.\u0000U\u0001This call should be invoked exactly once per block. It will panic at the finalization�phase, if this call hasn't been invoked by that time.\u0000A\u0001The timestamp should be greater than the previous one by the amount specified byh[`Config::MinimumPeriod`].\u0000�The dispatch origin for this call must be _None_.\u0000Q\u0001This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be awareQ\u0001that changing the complexity of this call could result exhausting the resources in a�block to execute any other calls.\u00004## Complexity1\u0001- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)U\u0001- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in@  `on_finalize`)�- 1 event handler `on_timestamp_set`. Must be `O(1)`.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0003\fXstaging_parachain_info\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0000\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0003\fLbounded_collections@weak_bounded_vec8WeakBoundedVec\b\u0004T\u0001�\u0003\u0004S\u0000\u0000\u0004\u0000�\u0003\u0001\u0018Vec<T>\u0000\u0000�\u0003\f<pallet_balances\u0014types,BalanceLock\u0004\u001cBalance\u0001\u0018\u0000\f\u0001\bidY\u0001\u00018LockIdentifier\u0000\u0001\u0018amount\u0018\u0001\u001cBalance\u0000\u0001\u001creasons�\u0003\u0001\u001cReasons\u0000\u0000�\u0003\f<pallet_balances\u0014types\u001cReasons\u0000\u0001\f\fFee\u0000\u0000\u0000\u0010Misc\u0000\u0001\u0000\fAll\u0000\u0002\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0003\u0004S\u0000\u0000\u0004\u0000�\u0003\u0001\u0018Vec<T>\u0000\u0000�\u0003\f<pallet_balances\u0014types,ReserveData\bDReserveIdentifier\u0001Y\u0001\u001cBalance\u0001\u0018\u0000\b\u0001\bidY\u0001\u0001DReserveIdentifier\u0000\u0001\u0018amount\u0018\u0001\u001cBalance\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0003\u0004S\u0000\u0000\u0004\u0000�\u0003\u0001\u0018Vec<T>\u0000\u0000�\u0003\u00144frame_support\u0018traits\u0018tokens\u0010misc IdAmount\b\bId\u0001�\u0003\u001cBalance\u0001\u0018\u0000\b\u0001\bid�\u0003\u0001\bId\u0000\u0001\u0018amount\u0018\u0001\u001cBalance\u0000\u0000�\u0003\b\\asset_hub_paseo_runtimeDRuntimeHoldReason\u0000\u0001\u0004HStateTrieMigration\u0004\u0000�\u0003\u0001�pallet_state_trie_migration::HoldReason\u0000F\u0000\u0000�\u0003\flpallet_state_trie_migration\u0018pallet(HoldReason\u0000\u0001\u0004<SlashForMigrate\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0003\u0004S\u0000\u0000\u0004\u0000�\u0003\u0001\u0018Vec<T>\u0000\u0000�\u0003\u00144frame_support\u0018traits\u0018tokens\u0010misc IdAmount\b\bId\u00019\u0002\u001cBalance\u0001\u0018\u0000\b\u0001\bid9\u0002\u0001\bId\u0000\u0001\u0018amount\u0018\u0001\u001cBalance\u0000\u0000�\u0003\u0000\u0000\u0002�\u0003\u0000�\u0003\f<pallet_balances\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001$Ptransfer_allow_death\b\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014value�\u0001(T::Balance\u0000\u0000\u001c�Transfer some liquid free balance to another account.\u00005\u0001`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.\u0011\u0001If the sender's account is below the existential deposit as a result�of the transfer, the account will be reaped.\u0000\u0015\u0001The dispatch origin for this call must be `Signed` by the transactor.8force_transfer\f\u0001\u0018source�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014value�\u0001(T::Balance\u0000\u0002\ba\u0001Exactly as `transfer_allow_death`, except the origin must be root and the source accountDmay be specified.Ltransfer_keep_alive\b\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014value�\u0001(T::Balance\u0000\u0003\u0018Y\u0001Same as the [`transfer_allow_death`] call, but with a check that the transfer will not`kill the origin account.\u0000�99% of the time you want [`transfer_allow_death`] instead.\u0000�[`transfer_allow_death`]: struct.Pallet.html#method.transfer0transfer_all\b\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(keep_alive \u0001\u0010bool\u0000\u0004<\u0005\u0001Transfer the entire transferable balance from the caller account.\u0000Y\u0001NOTE: This function only attempts to transfer _transferable_ balances. This means thata\u0001any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be]\u0001transferred by this function. To ensure that this function results in a killed account,E\u0001you might need to prepare the account by removing any reference counters, storage@deposits, etc...\u0000�The dispatch origin of this call must be Signed.\u0000�- `dest`: The recipient of the transfer.Y\u0001- `keep_alive`: A boolean to determine if the `transfer_all` operation should send allM\u0001  of the funds the account has, causing the sender account to be killed (false), orY\u0001  transfer everything except at least the existential deposit, which will guarantee to�  keep the sender account alive (true).<force_unreserve\b\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount\u0018\u0001(T::Balance\u0000\u0005\f�Unreserve some balance from a user by force.\u0000lCan only be called by ROOT.@upgrade_accounts\u0004\u0001\fwho�\u0001DVec<T::AccountId>\u0000\u0006 pUpgrade a specified account.\u0000t- `origin`: Must be `Signed`.�- `who`: The account to be upgraded.\u0000U\u0001This will waive the transaction fee if at least all but 10% of the accounts needed toA\u0001be upgraded. (We let some not have to be upgraded just in order to allow for theXpossibility of churn).Dforce_set_balance\b\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001 new_free�\u0001(T::Balance\u0000\b\f�Set the regular balance of a given account.\u0000�The dispatch origin for this call is `root`.lforce_adjust_total_issuance\b\u0001$direction\u0005\u0004\u0001LAdjustmentDirection\u0000\u0001\u0014delta�\u0001(T::Balance\u0000\t\u0014�Adjust the total issuance in a saturating way.\u0000�Can only be called by root and always needs a positive `delta`.\u0000$# Example\u0010burn\b\u0001\u0014value�\u0001(T::Balance\u0000\u0001(keep_alive \u0001\u0010bool\u0000\n\u001c�Burn the specified liquid free balance from the origin account.\u0000%\u0001If the origin's account ends up below the existential deposit as a result\t\u0001of the burn and `keep_alive` is false, the account will be reaped.\u0000Q\u0001Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,!\u0001this `burn` operation will reduce total issuance by the amount _burned_.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0003\f(sp_runtime0multiaddress0MultiAddress\b$AccountId\u0001\u00000AccountIndex\u00019\u0002\u0001\u0014\bId\u0004\u0000\u0000\u0001$AccountId\u0000\u0000\u0000\u0014Index\u0004\u0000\u0001\u0004\u00010AccountIndex\u0000\u0001\u0000\fRaw\u0004\u00008\u0001\u001cVec<u8>\u0000\u0002\u0000$Address32\u0004\u0000\u0004\u0001 [u8; 32]\u0000\u0003\u0000$Address20\u0004\u0000�\u0001 [u8; 20]\u0000\u0004\u0000\u0000\u0001\u0004\u0000\u0000\u00069\u0002\u0000\u0005\u0004\f<pallet_balances\u0014typesLAdjustmentDirection\u0000\u0001\b Increase\u0000\u0000\u0000 Decrease\u0000\u0001\u0000\u0000\t\u0004\f<pallet_balances\u0018pallet\u0014Error\b\u0004T\u0000\u0004I\u0000\u000108VestingBalance\u0000\u0000\u0004�Vesting balance too high to send value.TLiquidityRestrictions\u0000\u0001\u0004�Account liquidity restrictions prevent withdrawal.LInsufficientBalance\u0000\u0002\u0004xBalance too low to send value.HExistentialDeposit\u0000\u0003\u0004�Value too low to create account due to existential deposit.4Expendability\u0000\u0004\u0004�Transfer/payment would kill account.\\ExistingVestingSchedule\u0000\u0005\u0004�A vesting schedule already exists for this account.,DeadAccount\u0000\u0006\u0004�Beneficiary account must pre-exist.<TooManyReserves\u0000\u0007\u0004�Number of named reserves exceed `MaxReserves`.0TooManyHolds\u0000\b\u0004�Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.8TooManyFreezes\u0000\t\u0004�Number of freezes exceed `MaxFreezes`.LIssuanceDeactivated\u0000\n\u0004\u0001\u0001The issuance cannot be modified since it is already deactivated.$DeltaZero\u0000\u000b\u0004dThe delta cannot be zero.\u0004�The `Error` enum of this pallet.\r\u0004\bhpallet_transaction_payment Releases\u0000\u0001\b$V1Ancient\u0000\u0000\u0000\bV2\u0000\u0001\u0000\u0000\u0011\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\u0015\u0004\u0004S\u0000\u0000\u0004\u0000\u0019\u0004\u0001\u0018Vec<T>\u0000\u0000\u0015\u0004\f8pallet_vesting0vesting_info,VestingInfo\b\u001cBalance\u0001\u0018,BlockNumber\u0001\u0010\u0000\f\u0001\u0018locked\u0018\u0001\u001cBalance\u0000\u0001$per_block\u0018\u0001\u001cBalance\u0000\u00018starting_block\u0010\u0001,BlockNumber\u0000\u0000\u0019\u0004\u0000\u0000\u0002\u0015\u0004\u0000\u001d\u0004\b8pallet_vesting Releases\u0000\u0001\b\bV0\u0000\u0000\u0000\bV1\u0000\u0001\u0000\u0000!\u0004\f8pallet_vesting\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0018\u0010vest\u0000\u0000$�Unlock any vested funds of the sender account.\u0000]\u0001The dispatch origin for this call must be _Signed_ and the sender must have funds stilldlocked under this pallet.\u0000�Emits either `VestingCompleted` or `VestingUpdated`.\u00004## Complexity$- `O(1)`.(vest_other\u0004\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,�Unlock any vested funds of a `target` account.\u0000�The dispatch origin for this call must be _Signed_.\u0000Q\u0001- `target`: The account whose vested funds should be unlocked. Must have funds stilldlocked under this pallet.\u0000�Emits either `VestingCompleted` or `VestingUpdated`.\u00004## Complexity$- `O(1)`.<vested_transfer\b\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001 schedule\u0015\u0004\u0001�VestingInfo<BalanceOf<T>, BlockNumberFor<T>>\u0000\u00024dCreate a vested transfer.\u0000�The dispatch origin for this call must be _Signed_.\u0000�- `target`: The account receiving the vested funds.�- `schedule`: The vesting schedule attached to the transfer.\u0000\\Emits `VestingCreated`.\u0000�NOTE: This will unlock all schedules through the current block.\u00004## Complexity$- `O(1)`.Tforce_vested_transfer\f\u0001\u0018source�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001 schedule\u0015\u0004\u0001�VestingInfo<BalanceOf<T>, BlockNumberFor<T>>\u0000\u00038`Force a vested transfer.\u0000�The dispatch origin for this call must be _Root_.\u0000�- `source`: The account whose funds should be transferred.\u0011\u0001- `target`: The account that should be transferred the vested funds.�- `schedule`: The vesting schedule attached to the transfer.\u0000\\Emits `VestingCreated`.\u0000�NOTE: This will unlock all schedules through the current block.\u00004## Complexity$- `O(1)`.<merge_schedules\b\u0001<schedule1_index\u0010\u0001\fu32\u0000\u0001<schedule2_index\u0010\u0001\fu32\u0000\u0004T]\u0001Merge two vesting schedules together, creating a new vesting schedule that unlocks overU\u0001the highest possible start and end blocks. If both schedules have already started theY\u0001current block will be used as the schedule start; with the caveat that if one schedule]\u0001is finished by the current block, the other will be treated as the new merged schedule,,unmodified.\u0000�NOTE: If `schedule1_index == schedule2_index` this is a no-op.A\u0001NOTE: This will unlock all schedules through the current block prior to merging.a\u0001NOTE: If both schedules have ended by the current block, no new schedule will be createddand both will be removed.\u0000lMerged schedule attributes:5\u0001- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,H  current_block)`.!\u0001- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.Y\u0001- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.\u0000�The dispatch origin for this call must be _Signed_.\u0000�- `schedule1_index`: index of the first schedule to merge.�- `schedule2_index`: index of the second schedule to merge.tforce_remove_vesting_schedule\b\u0001\u0018target�\u0003\u0001�<T::Lookup as StaticLookup>::Source\u0000\u00018schedule_index\u0010\u0001\fu32\u0000\u0005\u0018|Force remove a vesting schedule\u0000�The dispatch origin for this call must be _Root_.\u0000�- `target`: An account that has a vesting schedule\u0015\u0001- `schedule_index`: The vesting schedule index that should be removed\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.%\u0004\f8pallet_vesting\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\u0014(NotVesting\u0000\u0000\u0004�The account given is not vesting.TAtMaxVestingSchedules\u0000\u0001\b%\u0001The account already has `MaxVestingSchedules` count of schedules and thusQ\u0001cannot add another one. Consider merging existing schedules in order to add another.$AmountLow\u0000\u0002\u0004\u0005\u0001Amount being transferred is too low to create a vesting schedule.`ScheduleIndexOutOfBounds\u0000\u0003\u0004�An index was out of bounds of the vesting schedules.TInvalidScheduleParams\u0000\u0004\u0004\r\u0001Failed to create a new schedule because some parameter was invalid.\u0004tError for the vesting pallet.)\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\u0000\u0004S\u0000\u0000\u0004\u0000�\u0001\u0018Vec<T>\u0000\u0000-\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u00011\u0004\u0004S\u0000\u0000\u0004\u00005\u0004\u0001\u0018Vec<T>\u0000\u00001\u0004\fdpallet_collator_selection\u0018pallet4CandidateInfo\b$AccountId\u0001\u0000\u001cBalance\u0001\u0018\u0000\b\u0001\fwho\u0000\u0001$AccountId\u0000\u0001\u001cdeposit\u0018\u0001\u001cBalance\u0000\u00005\u0004\u0000\u0000\u00021\u0004\u00009\u0004\fdpallet_collator_selection\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001$Dset_invulnerables\u0004\u0001\fnew�\u0001DVec<T::AccountId>\u0000\u000041\u0001Set the list of invulnerable (fixed) collators. These collators must do some�preparation, namely to have registered session keys.\u0000Y\u0001The call will remove any accounts that have not registered keys from the set. That is,]\u0001it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as1\u0001acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.\u0000Y\u0001This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. Ita\u0001is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. AQ\u0001`batch_all` can also be used to enforce atomicity. If any candidates are included inM\u0001`new`, they should be removed with `remove_invulnerable_candidate` after execution.\u0000�Must be called by the `UpdateOrigin`.Xset_desired_candidates\u0004\u0001\fmax\u0010\u0001\fu32\u0000\u0001\u0014U\u0001Set the ideal number of non-invulnerable collators. If lowering this number, then thea\u0001number of running collators could be higher than this figure. Aside from that edge case,5\u0001there should be no other way to have more candidates than the desired number.\u0000�The origin for this call must be the `UpdateOrigin`.Hset_candidacy_bond\u0004\u0001\u0010bond\u0018\u00010BalanceOf<T>\u0000\u0002\u001cxSet the candidacy bond amount.\u0000Q\u0001If the candidacy bond is increased by this call, all current candidates which have aM\u0001deposit lower than the new bond will be kicked from the list and get their deposits\u0014back.\u0000�The origin for this call must be the `UpdateOrigin`.Tregister_as_candidate\u0000\u0003\u0010A\u0001Register this account as a collator candidate. The account must (a) already have\u001d\u0001registered session keys and (b) be able to reserve the `CandidacyBond`.\u0000�This call is not available to `Invulnerable` collators.0leave_intent\u0000\u0004\u0014U\u0001Deregister `origin` as a collator candidate. Note that the collator can only leave on\r\u0001session change. The `CandidacyBond` will be unreserved immediately.\u0000\u0019\u0001This call will fail if the total number of candidates would drop below\\`MinEligibleCollators`.@add_invulnerable\u0004\u0001\fwho\u0000\u00010T::AccountId\u0000\u0005\u0010E\u0001Add a new account `who` to the list of `Invulnerables` collators. `who` must have\u001d\u0001registered session keys. If `who` is a candidate, they will be removed.\u0000�The origin for this call must be the `UpdateOrigin`.Lremove_invulnerable\u0004\u0001\fwho\u0000\u00010T::AccountId\u0000\u0006\u0010a\u0001Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must(be sorted.\u0000�The origin for this call must be the `UpdateOrigin`.,update_bond\u0004\u0001,new_deposit\u0018\u00010BalanceOf<T>\u0000\u0007\u001c]\u0001Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.\u0000A\u0001Setting a `new_deposit` that is lower than the current deposit while `origin` is�occupying a top-`DesiredCandidates` slot is not allowed.\u0000Y\u0001This call will fail if `origin` is not a collator candidate, the updated bond is lower\u0019\u0001than the minimum candidacy bond, and/or the amount cannot be reserved.Ltake_candidate_slot\b\u0001\u001cdeposit\u0018\u00010BalanceOf<T>\u0000\u0001\u0018target\u0000\u00010T::AccountId\u0000\b\u001cM\u0001The caller `origin` replaces a candidate `target` in the collator candidate list byU\u0001reserving `deposit`. The amount `deposit` reserved by the caller must be greater than�the existing bond of the target it is trying to replace.\u0000Y\u0001This call will fail if the caller is already a collator candidate or invulnerable, theU\u0001caller does not have registered session keys, the target is not a collator candidate,�and/or the `deposit` amount cannot be reserved.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.=\u0004\fdpallet_collator_selection\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001DDTooManyCandidates\u0000\u0000\u0004�The pallet has too many candidates.\\TooFewEligibleCollators\u0000\u0001\u0004�Leaving would result in too few candidates.@AlreadyCandidate\u0000\u0002\u0004|Account is already a candidate.0NotCandidate\u0000\u0003\u0004lAccount is not a candidate.PTooManyInvulnerables\u0000\u0004\u0004�There are too many Invulnerables.LAlreadyInvulnerable\u0000\u0005\u0004�Account is already an Invulnerable.<NotInvulnerable\u0000\u0006\u0004|Account is not an Invulnerable.\\NoAssociatedValidatorId\u0000\u0007\u0004�Account has no associated validator ID.XValidatorNotRegistered\u0000\b\u0004�Validator ID is not yet registered.lInsertToCandidateListFailed\u0000\t\u0004�Could not insert in the candidate list.tRemoveFromCandidateListFailed\u0000\n\u0004�Could not remove from the candidate list.4DepositTooLow\u0000\u000b\u0004�New deposit amount would be below the minimum candidacy bond.dUpdateCandidateListFailed\u0000\f\u0004�Could not update the candidate list.@InsufficientBond\u0000\r\u0004)\u0001Deposit amount is too low to take the target's slot in the candidate list.PTargetIsNotCandidate\u0000\u000e\u0004-\u0001The target account to be replaced in the candidate list is not a candidate.@IdenticalDeposit\u0000\u000f\u0004\r\u0001The updated deposit amount is equal to the amount already reserved.@InvalidUnreserve\u0000\u0010\u0004=\u0001Cannot lower candidacy bond while occupying a future collator slot in the list.\u0004�The `Error` enum of this pallet.A\u0004\u0000\u0000\u0002E\u0004\u0000E\u0004\u0000\u0000\u0004\b\u0000I\u0004\u0000I\u0004\b\\asset_hub_paseo_runtime,SessionKeys\u0000\u0000\u0004\u0001\u0010auraM\u0004\u0001�<Aura as $crate::BoundToRuntimeAppPublic>::Public\u0000\u0000M\u0004\u0010Dsp_consensus_aura\u001csr25519,app_sr25519\u0018Public\u0000\u0000\u0004\u0000\u0004\u0001<sr25519::Public\u0000\u0000Q\u0004\u0000\u0000\u0004\bU\u00048\u0000U\u0004\f\u001csp_core\u0018crypto$KeyTypeId\u0000\u0000\u0004\u0000H\u0001\u001c[u8; 4]\u0000\u0000Y\u0004\f8pallet_session\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\b set_keys\b\u0001\u0010keysI\u0004\u0001\u001cT::Keys\u0000\u0001\u0014proof8\u0001\u001cVec<u8>\u0000\u0000$�Sets the session key(s) of the function caller to `keys`.\u001d\u0001Allows an account to set its session key prior to becoming a validator.�This doesn't take effect until the next session.\u0000�The dispatch origin of this function must be signed.\u00004## ComplexityY\u0001- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is   fixed.(purge_keys\u0000\u00010�Removes any session key(s) of the function caller.\u0000�This doesn't take effect until the next session.\u0000U\u0001The dispatch origin of this function must be Signed and the account must be either be]\u0001convertible to a validator ID using the chain's typical addressing system (this usuallyQ\u0001means being a controller account) or directly convertible into a validator ID (which�usually means being a stash account).\u00004## Complexity=\u0001- `O(1)` in number of key types. Actual cost depends on the number of length of�  `T::Keys::key_ids()` which is fixed.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.]\u0004\f8pallet_session\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\u00140InvalidProof\u0000\u0000\u0004`Invalid ownership proof.\\NoAssociatedValidatorId\u0000\u0001\u0004�No associated validator ID for account.4DuplicatedKey\u0000\u0002\u0004dRegistered duplicate key.\u0018NoKeys\u0000\u0003\u0004�No keys are associated with this account.$NoAccount\u0000\u0004\u0004\u0019\u0001Key setting account is not live, so it's impossible to associate keys.\u0004tError for the session pallet.a\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001M\u0004\u0004S\u0000\u0000\u0004\u0000e\u0004\u0001\u0018Vec<T>\u0000\u0000e\u0004\u0000\u0000\u0002M\u0004\u0000i\u0004\bHsp_consensus_slots\u0010Slot\u0000\u0000\u0004\u00000\u0001\fu64\u0000\u0000m\u0004\u0000\u0000\u0004\bi\u0004\u0010\u0000q\u0004\fLbounded_collectionsDbounded_btree_set<BoundedBTreeSet\b\u0004T\u0001)\u0002\u0004S\u0000\u0000\u0004\u0000u\u0004\u0001,BTreeSet<T>\u0000\u0000u\u0004\u0004 BTreeSet\u0004\u0004T\u0001)\u0002\u0000\u0004\u0000y\u0004\u0000\u0000\u0000y\u0004\u0000\u0000\u0002)\u0002\u0000}\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0004\u0004S\u0000\u0000\u0004\u0000�\u0004\u0001\u0018Vec<T>\u0000\u0000�\u0004\bdcumulus_pallet_xcmp_queueXOutboundChannelDetails\u0000\u0000\u0014\u0001$recipient)\u0002\u0001\u0018ParaId\u0000\u0001\u0014state�\u0004\u00014OutboundState\u0000\u00014signals_exist \u0001\u0010bool\u0000\u0001,first_indexM\u0002\u0001\fu16\u0000\u0001(last_indexM\u0002\u0001\fu16\u0000\u0000�\u0004\bdcumulus_pallet_xcmp_queue4OutboundState\u0000\u0001\b\bOk\u0000\u0000\u0000$Suspended\u0000\u0001\u0000\u0000�\u0004\u0000\u0000\u0002�\u0004\u0000�\u0004\u0000\u0000\u0004\b)\u0002M\u0002\u0000�\u0004\fLbounded_collections@weak_bounded_vec8WeakBoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0004\bdcumulus_pallet_xcmp_queue<QueueConfigData\u0000\u0000\f\u0001Dsuspend_threshold\u0010\u0001\fu32\u0000\u00018drop_threshold\u0010\u0001\fu32\u0000\u0001@resume_threshold\u0010\u0001\fu32\u0000\u0000�\u0004\fdcumulus_pallet_xcmp_queue\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0014Tsuspend_xcm_execution\u0000\u0001\fI\u0001Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.\u0000�- `origin`: Must pass `ControllerOrigin`.Presume_xcm_execution\u0000\u0002\u0014�Resumes all XCM executions for the XCMP queue.\u0000=\u0001Note that this function doesn't change the status of the in/out bound channels.\u0000�- `origin`: Must pass `ControllerOrigin`.`update_suspend_threshold\u0004\u0001\fnew\u0010\u0001\fu32\u0000\u0003\u0014I\u0001Overwrites the number of pages which must be in the queue for the other side to bextold to suspend their sending.\u0000t- `origin`: Must pass `Root`.�- `new`: Desired value for `QueueConfigData.suspend_value`Tupdate_drop_threshold\u0004\u0001\fnew\u0010\u0001\fu32\u0000\u0004\u0014E\u0001Overwrites the number of pages which must be in the queue after which we drop any�further messages from the channel.\u0000t- `origin`: Must pass `Root`.�- `new`: Desired value for `QueueConfigData.drop_threshold`\\update_resume_threshold\u0004\u0001\fnew\u0010\u0001\fu32\u0000\u0005\u0014M\u0001Overwrites the number of pages which the queue must be reduced to before it signals\u0001\u0001that message sending may recommence after it has been suspended.\u0000t- `origin`: Must pass `Root`.�- `new`: Desired value for `QueueConfigData.resume_threshold`\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0004\fdcumulus_pallet_xcmp_queue\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\u00148BadQueueConfig\u0000\u0000\u0004\u0011\u0001Setting the queue config failed since one of its values was invalid.@AlreadySuspended\u0000\u0001\u0004�The execution is already suspended.8AlreadyResumed\u0000\u0002\u0004�The execution is already resumed.tTooManyActiveOutboundChannels\u0000\u0003\u0004�There are too many active outbound channels.\u0018TooBig\u0000\u0004\u0004\\The message is too big.\u0004�The `Error` enum of this pallet.�\u0004\f(pallet_xcm\u0018pallet,QueryStatus\u0004,BlockNumber\u0001\u0010\u0001\f\u001cPending\u0010\u0001$responder\u0011\u0002\u0001DVersionedLocation\u0000\u0001Lmaybe_match_querier�\u0004\u0001dOption<VersionedLocation>\u0000\u00010maybe_notify�\u0004\u0001@Option<(u8, u8)>\u0000\u0001\u001ctimeout\u0010\u0001,BlockNumber\u0000\u0000\u0000<VersionNotifier\b\u0001\u0018origin\u0011\u0002\u0001DVersionedLocation\u0000\u0001$is_active \u0001\u0010bool\u0000\u0001\u0000\u0014Ready\b\u0001 response�\u0004\u0001DVersionedResponse\u0000\u0001\bat\u0010\u0001,BlockNumber\u0000\u0002\u0000\u0000�\u0004\u0004\u0018Option\u0004\u0004T\u0001\u0011\u0002\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0011\u0002\u0000\u0000\u0001\u0000\u0000�\u0004\u0004\u0018Option\u0004\u0004T\u0001�\u0004\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0004\u0000\u0000\u0001\u0000\u0000�\u0004\u0000\u0000\u0004\b\b\b\u0000�\u0004\b\fxcmDVersionedResponse\u0000\u0001\f\bV3\u0004\u0000�\u0004\u00010v3::Response\u0000\u0003\u0000\bV4\u0004\u0000�\u0004\u00010v4::Response\u0000\u0004\u0000\bV5\u0004\u0000a\u0001\u00010v5::Response\u0000\u0005\u0000\u0000�\u0004\f\fxcm\bv3 Response\u0000\u0001\u0018\u0010Null\u0000\u0000\u0000\u0018Assets\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0001\u0000<ExecutionResult\u0004\u0000�\u0004\u0001POption<(u32, Error)>\u0000\u0002\u0000\u001cVersion\u0004\u0000\u0010\u00018super::Version\u0000\u0003\u0000,PalletsInfo\u0004\u0000�\u0004\u0001�BoundedVec<PalletInfo, MaxPalletsInfo>\u0000\u0004\u00008DispatchResult\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000\u0005\u0000\u0000�\u0004\u0004\u0018Option\u0004\u0004T\u0001�\u0004\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0004\u0000\u0000\u0001\u0000\u0000�\u0004\u0000\u0000\u0004\b\u0010�\u0004\u0000�\u0004\u0010\fxcm\bv3\u0018traits\u0014Error\u0000\u0001� Overflow\u0000\u0000\u00004Unimplemented\u0000\u0001\u0000`UntrustedReserveLocation\u0000\u0002\u0000dUntrustedTeleportLocation\u0000\u0003\u00000LocationFull\u0000\u0004\u0000TLocationNotInvertible\u0000\u0005\u0000$BadOrigin\u0000\u0006\u0000<InvalidLocation\u0000\u0007\u00004AssetNotFound\u0000\b\u0000TFailedToTransactAsset\u0000\t\u0000<NotWithdrawable\u0000\n\u0000HLocationCannotHold\u0000\u000b\u0000TExceedsMaxMessageSize\u0000\f\u0000XDestinationUnsupported\u0000\r\u0000$Transport\u0000\u000e\u0000(Unroutable\u0000\u000f\u00000UnknownClaim\u0000\u0010\u00008FailedToDecode\u0000\u0011\u0000@MaxWeightInvalid\u0000\u0012\u00008NotHoldingFees\u0000\u0013\u00000TooExpensive\u0000\u0014\u0000\u0010Trap\u0004\u00000\u0001\fu64\u0000\u0015\u0000@ExpectationFalse\u0000\u0016\u00008PalletNotFound\u0000\u0017\u00000NameMismatch\u0000\u0018\u0000LVersionIncompatible\u0000\u0019\u0000PHoldingWouldOverflow\u0000\u001a\u0000,ExportError\u0000\u001b\u00008ReanchorFailed\u0000\u001c\u0000\u0018NoDeal\u0000\u001d\u0000(FeesNotMet\u0000\u001e\u0000$LockError\u0000\u001f\u00000NoPermission\u0000 \u0000(Unanchored\u0000!\u00008NotDepositable\u0000\"\u0000LUnhandledXcmVersion\u0000#\u0000HWeightLimitReached\u0004\u0000(\u0001\u0018Weight\u0000$\u0000\u001cBarrier\u0000%\u0000LWeightNotComputable\u0000&\u0000DExceedsStackLimit\u0000'\u0000\u0000�\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0004\u0004S\u0000\u0000\u0004\u0000�\u0004\u0001\u0018Vec<T>\u0000\u0000�\u0004\f\fxcm\bv3(PalletInfo\u0000\u0000\u0018\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name�\u0004\u0001�BoundedVec<u8, MaxPalletNameLen>\u0000\u0001,module_name�\u0004\u0001�BoundedVec<u8, MaxPalletNameLen>\u0000\u0001\u0014major�\u0001\fu32\u0000\u0001\u0014minor�\u0001\fu32\u0000\u0001\u0014patch�\u0001\fu32\u0000\u0000�\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0004\u0000\u0000\u0002�\u0004\u0000�\u0004\f,staging_xcm\bv4 Response\u0000\u0001\u0018\u0010Null\u0000\u0000\u0000\u0018Assets\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0001\u0000<ExecutionResult\u0004\u0000�\u0004\u0001POption<(u32, Error)>\u0000\u0002\u0000\u001cVersion\u0004\u0000\u0010\u00018super::Version\u0000\u0003\u0000,PalletsInfo\u0004\u0000�\u0004\u0001�BoundedVec<PalletInfo, MaxPalletsInfo>\u0000\u0004\u00008DispatchResult\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000\u0005\u0000\u0000�\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0004\u0004S\u0000\u0000\u0004\u0000�\u0004\u0001\u0018Vec<T>\u0000\u0000�\u0004\f,staging_xcm\bv4(PalletInfo\u0000\u0000\u0018\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name�\u0004\u0001�BoundedVec<u8, MaxPalletNameLen>\u0000\u0001,module_name�\u0004\u0001�BoundedVec<u8, MaxPalletNameLen>\u0000\u0001\u0014major�\u0001\fu32\u0000\u0001\u0014minor�\u0001\fu32\u0000\u0001\u0014patch�\u0001\fu32\u0000\u0000�\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0004\u0000\u0000\u0002�\u0004\u0000�\u0004\u0000\u0000\u0004\b\u0010\u0011\u0002\u0000�\u0004\u0000\u0000\u0004\f0(\u0010\u0000�\u0004\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0004\u0004S\u0000\u0000\u0004\u0000�\u0004\u0001\u0018Vec<T>\u0000\u0000�\u0004\u0000\u0000\u0004\b\u0011\u0002\u0010\u0000�\u0004\u0000\u0000\u0002�\u0004\u0000�\u0004\f(pallet_xcm\u0018palletTVersionMigrationStage\u0000\u0001\u0010\\MigrateSupportedVersion\u0000\u0000\u0000\\MigrateVersionNotifiers\u0000\u0001\u0000PNotifyCurrentTargets\u0004\u0000\u0001\u0005\u0001<Option<Vec<u8>>\u0000\u0002\u0000hMigrateAndNotifyOldTargets\u0000\u0003\u0000\u0000\u0001\u0005\u0004\u0018Option\u0004\u0004T\u00018\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u00008\u0000\u0000\u0001\u0000\u0000\u0005\u0005\u0000\u0000\u0004\f\u0010\u0000\t\u0005\u0000\t\u0005\b\fxcm@VersionedAssetId\u0000\u0001\f\bV3\u0004\u0000�\u0001\u0001,v3::AssetId\u0000\u0003\u0000\bV4\u0004\u0000\u0005\u0002\u0001,v4::AssetId\u0000\u0004\u0000\bV5\u0004\u0000M\u0001\u0001,v5::AssetId\u0000\u0005\u0000\u0000\r\u0005\f(pallet_xcm\u0018pallethRemoteLockedFungibleRecord\bHConsumerIdentifier\u00019\u00020MaxConsumers\u0000\u0000\u0010\u0001\u0018amount\u0018\u0001\u0010u128\u0000\u0001\u0014owner\u0011\u0002\u0001DVersionedLocation\u0000\u0001\u0018locker\u0011\u0002\u0001DVersionedLocation\u0000\u0001$consumers\u0011\u0005\u0001�BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>\u0000\u0000\u0011\u0005\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\u0015\u0005\u0004S\u0000\u0000\u0004\u0000\u0019\u0005\u0001\u0018Vec<T>\u0000\u0000\u0015\u0005\u0000\u0000\u0004\b9\u0002\u0018\u0000\u0019\u0005\u0000\u0000\u0002\u0015\u0005\u0000\u001d\u0005\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001!\u0005\u0004S\u0000\u0000\u0004\u0000%\u0005\u0001\u0018Vec<T>\u0000\u0000!\u0005\u0000\u0000\u0004\b\u0018\u0011\u0002\u0000%\u0005\u0000\u0000\u0002!\u0005\u0000)\u0005\f(pallet_xcm\u0018pallet\u0010Call\u0004\u0004T\u0000\u00018\u0010send\b\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u001cmessage-\u0005\u0001TBox<VersionedXcm<()>>\u0000\u0000\u0000<teleport_assets\u0010\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001,beneficiary\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u00018fee_asset_item\u0010\u0001\fu32\u0000\u0001H\u0011\u0001Teleport some assets from the local chain to some destination chain.\u0000\u001d\u0001**This function is deprecated: Use `limited_teleport_assets` instead.**\u0000Q\u0001Fee payment on the destination side is made from the asset in the `assets` vector ofa\u0001index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,�with all fees taken as needed from the asset.\u0000)\u0001- `origin`: Must be capable of withdrawing the `assets` and executing XCM.%\u0001- `dest`: Destination context for the assets. Will typically be `[Parent,a\u0001  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send fromT  relay to parachain.U\u0001- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will�  generally be an `AccountId32` value.Y\u0001- `assets`: The assets to be withdrawn. This should include the assets used to pay theh  fee on the `dest` chain.M\u0001- `fee_asset_item`: The index into `assets` of the item which should be used to pay\u001c  fees.\\reserve_transfer_assets\u0010\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001,beneficiary\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u00018fee_asset_item\u0010\u0001\fu32\u0000\u0002x]\u0001Transfer some assets from the local chain to the destination chain through their local,xdestination or remote reserve.\u0000=\u0001`assets` must have same reserve location and may not be teleportable to `dest`.M\u0001 - `assets` have local reserve: transfer assets to sovereign account of destinationM\u0001   chain and forward a notification XCM to `dest` to mint and deposit reserve-basedl   assets to `beneficiary`.U\u0001 - `assets` have destination reserve: burn local assets and forward a notification toY\u0001   `dest` chain to withdraw the reserve assets from this chain's sovereign account and�   deposit them to `beneficiary`.a\u0001 - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to movea\u0001   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`�   to mint and deposit reserve-based assets to `beneficiary`.\u0000=\u0001**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**\u0000Q\u0001Fee payment on the destination side is made from the asset in the `assets` vector ofa\u0001index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,�with all fees taken as needed from the asset.\u0000)\u0001- `origin`: Must be capable of withdrawing the `assets` and executing XCM.%\u0001- `dest`: Destination context for the assets. Will typically be `[Parent,a\u0001  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send fromT  relay to parachain.U\u0001- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will�  generally be an `AccountId32` value.Y\u0001- `assets`: The assets to be withdrawn. This should include the assets used to pay the�  fee on the `dest` (and possibly reserve) chains.M\u0001- `fee_asset_item`: The index into `assets` of the item which should be used to pay\u001c  fees.\u001cexecute\b\u0001\u001cmessageq\u0005\u0001�Box<VersionedXcm<<T as Config>::RuntimeCall>>\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0003 �Execute an XCM message from a local, signed, origin.\u0000M\u0001An event is deposited indicating whether `msg` could be executed completely or only(partially.\u0000]\u0001No more than `max_weight` will be used in its attempted execution. If this is less thanA\u0001the maximum amount of weight that the message could take to be executed, then no|execution attempt will be made.Dforce_xcm_version\b\u0001 location\u0001\u0001\u00014Box<Location>\u0000\u0001\u001cversion\u0010\u0001(XcmVersion\u0000\u0004\u0018I\u0001Extoll that a particular destination can be communicated with through a particular<version of XCM.\u0000�- `origin`: Must be an origin specified by AdminOrigin.�- `location`: The destination that is being described.\u0011\u0001- `xcm_version`: The latest version of XCM that `location` supports.dforce_default_xcm_version\u0004\u0001Dmaybe_xcm_versiona\u0002\u0001HOption<XcmVersion>\u0000\u0005\u0014Y\u0001Set a safe XCM version (the version that XCM should be encoded with if the most recent�version a destination can accept is unknown).\u0000�- `origin`: Must be an origin specified by AdminOrigin.9\u0001- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.xforce_subscribe_version_notify\u0004\u0001 location\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0006\u00109\u0001Ask a location to notify us regarding their XCM version and any changes to it.\u0000�- `origin`: Must be an origin specified by AdminOrigin.Y\u0001- `location`: The location to which we should subscribe for XCM version notifications.�force_unsubscribe_version_notify\u0004\u0001 location\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0007\u0018I\u0001Require that a particular destination should no longer notify us regarding any XCM@version changes.\u0000�- `origin`: Must be an origin specified by AdminOrigin.=\u0001- `location`: The location to which we are currently subscribed for XCM version�  notifications which we no longer desire.|limited_reserve_transfer_assets\u0014\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001,beneficiary\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u00018fee_asset_item\u0010\u0001\fu32\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\bx]\u0001Transfer some assets from the local chain to the destination chain through their local,xdestination or remote reserve.\u0000=\u0001`assets` must have same reserve location and may not be teleportable to `dest`.M\u0001 - `assets` have local reserve: transfer assets to sovereign account of destinationM\u0001   chain and forward a notification XCM to `dest` to mint and deposit reserve-basedl   assets to `beneficiary`.U\u0001 - `assets` have destination reserve: burn local assets and forward a notification toY\u0001   `dest` chain to withdraw the reserve assets from this chain's sovereign account and�   deposit them to `beneficiary`.a\u0001 - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to movea\u0001   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`�   to mint and deposit reserve-based assets to `beneficiary`.\u0000Q\u0001Fee payment on the destination side is made from the asset in the `assets` vector ofa\u0001index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weightY\u0001is needed than `weight_limit`, then the operation will fail and the sent assets may be at risk.\u0000)\u0001- `origin`: Must be capable of withdrawing the `assets` and executing XCM.%\u0001- `dest`: Destination context for the assets. Will typically be `[Parent,a\u0001  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send fromT  relay to parachain.U\u0001- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will�  generally be an `AccountId32` value.Y\u0001- `assets`: The assets to be withdrawn. This should include the assets used to pay the�  fee on the `dest` (and possibly reserve) chains.M\u0001- `fee_asset_item`: The index into `assets` of the item which should be used to pay\u001c  fees.E\u0001- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.\\limited_teleport_assets\u0014\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001,beneficiary\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u00018fee_asset_item\u0010\u0001\fu32\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\tH\u0011\u0001Teleport some assets from the local chain to some destination chain.\u0000Q\u0001Fee payment on the destination side is made from the asset in the `assets` vector ofa\u0001index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weightY\u0001is needed than `weight_limit`, then the operation will fail and the sent assets may be at risk.\u0000)\u0001- `origin`: Must be capable of withdrawing the `assets` and executing XCM.%\u0001- `dest`: Destination context for the assets. Will typically be `[Parent,a\u0001  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send fromT  relay to parachain.U\u0001- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will�  generally be an `AccountId32` value.Y\u0001- `assets`: The assets to be withdrawn. This should include the assets used to pay theh  fee on the `dest` chain.M\u0001- `fee_asset_item`: The index into `assets` of the item which should be used to pay\u001c  fees.E\u0001- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.@force_suspension\u0004\u0001$suspended \u0001\u0010bool\u0000\n\u0010�Set or unset the global suspension state of the XCM executor.\u0000�- `origin`: Must be an origin specified by AdminOrigin.�- `suspended`: `true` to suspend, `false` to resume.<transfer_assets\u0014\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001,beneficiary\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u00018fee_asset_item\u0010\u0001\fu32\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u000b�]\u0001Transfer some assets from the local chain to the destination chain through their local,�destination or remote reserve, or through teleports.\u0000Q\u0001Fee payment on the destination side is made from the asset in the `assets` vector of5\u0001index `fee_asset_item` (hence referred to as `fees`), up to enough to pay forA\u0001`weight_limit` of weight. If more weight is needed than `weight_limit`, then the�operation will fail and the sent assets may be at risk.\u0000a\u0001`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable�to `dest`, no limitations imposed on `fees`.M\u0001 - for local reserve: transfer assets to sovereign account of destination chain andM\u0001   forward a notification XCM to `dest` to mint and deposit reserve-based assets toD   `beneficiary`.a\u0001 - for destination reserve: burn local assets and forward a notification to `dest` chainY\u0001   to withdraw the reserve assets from this chain's sovereign account and deposit themP   to `beneficiary`.]\u0001 - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves]\u0001   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint�   and deposit reserve-based assets to `beneficiary`.Q\u0001 - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport�   assets and deposit them to `beneficiary`.\u0000)\u0001- `origin`: Must be capable of withdrawing the `assets` and executing XCM.-\u0001- `dest`: Destination context for the assets. Will typically be `X2(Parent,U\u0001  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to sendh  from relay to parachain.U\u0001- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will�  generally be an `AccountId32` value.Y\u0001- `assets`: The assets to be withdrawn. This should include the assets used to pay the�  fee on the `dest` (and possibly reserve) chains.M\u0001- `fee_asset_item`: The index into `assets` of the item which should be used to pay\u001c  fees.E\u0001- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.0claim_assets\b\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u0001,beneficiary\u0011\u0002\u0001XBox<VersionedLocation>\u0000\f\u0018U\u0001Claims assets trapped on this pallet because of leftover assets during XCM execution.\u0000�- `origin`: Anyone can call this extrinsic.]\u0001- `assets`: The exact assets that were trapped. Use the version to specify what version�was the latest when they were trapped.E\u0001- `beneficiary`: The location/account where the claimed assets will be deposited.�transfer_assets_using_type_and_then\u001c\u0001\u0010dest\u0011\u0002\u0001XBox<VersionedLocation>\u0000\u0001\u0018assets�\u0001\u0001PBox<VersionedAssets>\u0000\u0001Passets_transfer_type�\u0005\u0001DBox<TransferType>\u0000\u00018remote_fees_id\t\u0005\u0001TBox<VersionedAssetId>\u0000\u0001Hfees_transfer_type�\u0005\u0001DBox<TransferType>\u0000\u0001Hcustom_xcm_on_dest-\u0005\u0001TBox<VersionedXcm<()>>\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\r�U\u0001Transfer assets from the local chain to the destination chain using explicit transferhtypes for assets and fees.\u0000Y\u0001`assets` must have same reserve location or may be teleportable to `dest`. Caller must�provide the `assets_transfer_type` to be used for `assets`:Q\u0001 - `TransferType::LocalReserve`: transfer assets to sovereign account of destinationM\u0001   chain and forward a notification XCM to `dest` to mint and deposit reserve-basedl   assets to `beneficiary`.Y\u0001 - `TransferType::DestinationReserve`: burn local assets and forward a notification toY\u0001   `dest` chain to withdraw the reserve assets from this chain's sovereign account and�   deposit them to `beneficiary`.Y\u0001 - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`a\u0001   chain to move reserves from this chain's SA to `dest` chain's SA, and forward anotherU\u0001   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically�   the remote `reserve` is Asset Hub.E\u0001 - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to�   mint/teleport assets and deposit them to `beneficiary`.\u0000U\u0001On the destination chain, as well as any intermediary hops, `BuyExecution` is used to!\u0001buy execution using transferred `assets` identified by `remote_fees_id`.Y\u0001Make sure enough of the specified `remote_fees_id` asset is included in the given lista\u0001of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weightY\u0001is needed than `weight_limit`, then the operation will fail and the sent assets may be at risk.\u0000E\u0001`remote_fees_id` may use different transfer type than rest of `assets` and can be�specified through `fees_transfer_type`.\u0000a\u0001The caller needs to specify what should happen to the transferred assets once they reachA\u0001the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which�contains the instructions to execute on `dest` as a final step.|  This is usually as simple as:Q\u0001  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,1\u0001  but could be something more exotic like sending the `assets` even further.\u0000)\u0001- `origin`: Must be capable of withdrawing the `assets` and executing XCM.%\u0001- `dest`: Destination context for the assets. Will typically be `[Parent,a\u0001  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from=\u0001  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from�  parachain across a bridge to another ecosystem destination.Y\u0001- `assets`: The assets to be withdrawn. This should include the assets used to pay the�  fee on the `dest` (and possibly reserve) chains.=\u0001- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.!\u0001- `remote_fees_id`: One of the included `assets` to be used to pay fees.I\u0001- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.Y\u0001- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of theY\u0001  transfer, which also determines what happens to the assets on the destination chain.E\u0001- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.-\u0005\b\fxcm0VersionedXcm\u0004,RuntimeCall\u0000\u0001\f\bV3\u0004\u00001\u0005\u0001Pv3::Xcm<RuntimeCall>\u0000\u0003\u0000\bV4\u0004\u0000Q\u0005\u0001Pv4::Xcm<RuntimeCall>\u0000\u0004\u0000\bV5\u0004\u00005\u0001\u0001Pv5::Xcm<RuntimeCall>\u0000\u0005\u0000\u00001\u0005\f\fxcm\bv3\fXcm\u0004\u0010Call\u0000\u0000\u0004\u00005\u0005\u0001XVec<Instruction<Call>>\u0000\u00005\u0005\u0000\u0000\u00029\u0005\u00009\u0005\f\fxcm\bv3,Instruction\u0004\u0010Call\u0000\u0001�4WithdrawAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0000\u0000TReserveAssetDeposited\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0001\u0000XReceiveTeleportedAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0002\u00004QueryResponse\u0010\u0001 query_id,\u0001\u001cQueryId\u0000\u0001 response�\u0004\u0001 Response\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001\u001cquerier=\u0005\u0001TOption<MultiLocation>\u0000\u0003\u00004TransferAsset\b\u0001\u0018assets�\u0001\u0001,MultiAssets\u0000\u0001,beneficiary�\u0001\u00014MultiLocation\u0000\u0004\u0000PTransferReserveAsset\f\u0001\u0018assets�\u0001\u0001,MultiAssets\u0000\u0001\u0010dest�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u0005\u0000 Transact\f\u0001,origin_kind�\u0001\u0001(OriginKind\u0000\u0001Xrequire_weight_at_most(\u0001\u0018Weight\u0000\u0001\u0010call�\u0001\u0001LDoubleEncoded<Call>\u0000\u0006\u0000dHrmpNewChannelOpenRequest\f\u0001\u0018sender�\u0001\fu32\u0000\u0001@max_message_size�\u0001\fu32\u0000\u00010max_capacity�\u0001\fu32\u0000\u0007\u0000LHrmpChannelAccepted\u0004\u0001$recipient�\u0001\fu32\u0000\b\u0000HHrmpChannelClosing\f\u0001$initiator�\u0001\fu32\u0000\u0001\u0018sender�\u0001\fu32\u0000\u0001$recipient�\u0001\fu32\u0000\t\u0000,ClearOrigin\u0000\n\u00004DescendOrigin\u0004\u0000�\u0001\u0001TInteriorMultiLocation\u0000\u000b\u0000,ReportError\u0004\u0000A\u0005\u0001DQueryResponseInfo\u0000\f\u00000DepositAsset\b\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001,beneficiary�\u0001\u00014MultiLocation\u0000\r\u0000LDepositReserveAsset\f\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001\u0010dest�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u000e\u00004ExchangeAsset\f\u0001\u0010giveE\u0005\u0001@MultiAssetFilter\u0000\u0001\u0010want�\u0001\u0001,MultiAssets\u0000\u0001\u001cmaximal \u0001\u0010bool\u0000\u000f\u0000\\InitiateReserveWithdraw\f\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001\u001creserve�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u0010\u0000@InitiateTeleport\f\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001\u0010dest�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u0011\u00004ReportHolding\b\u00014response_infoA\u0005\u0001DQueryResponseInfo\u0000\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0012\u00000BuyExecution\b\u0001\u0010fees�\u0001\u0001(MultiAsset\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u0013\u00004RefundSurplus\u0000\u0014\u0000<SetErrorHandler\u0004\u00001\u0005\u0001$Xcm<Call>\u0000\u0015\u0000,SetAppendix\u0004\u00001\u0005\u0001$Xcm<Call>\u0000\u0016\u0000(ClearError\u0000\u0017\u0000(ClaimAsset\b\u0001\u0018assets�\u0001\u0001,MultiAssets\u0000\u0001\u0018ticket�\u0001\u00014MultiLocation\u0000\u0018\u0000\u0010Trap\u0004\u0000,\u0001\fu64\u0000\u0019\u0000@SubscribeVersion\b\u0001 query_id,\u0001\u001cQueryId\u0000\u0001Lmax_response_weight(\u0001\u0018Weight\u0000\u001a\u0000HUnsubscribeVersion\u0000\u001b\u0000$BurnAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u001c\u0000,ExpectAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u001d\u00000ExpectOrigin\u0004\u0000=\u0005\u0001TOption<MultiLocation>\u0000\u001e\u0000,ExpectError\u0004\u0000�\u0004\u0001POption<(u32, Error)>\u0000\u001f\u0000PExpectTransactStatus\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000 \u0000,QueryPallet\b\u0001,module_name8\u0001\u001cVec<u8>\u0000\u00014response_infoA\u0005\u0001DQueryResponseInfo\u0000!\u00000ExpectPallet\u0014\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001,module_name8\u0001\u001cVec<u8>\u0000\u0001,crate_major�\u0001\fu32\u0000\u0001<min_crate_minor�\u0001\fu32\u0000\"\u0000PReportTransactStatus\u0004\u0000A\u0005\u0001DQueryResponseInfo\u0000#\u0000LClearTransactStatus\u0000$\u0000<UniversalOrigin\u0004\u0000�\u0001\u0001 Junction\u0000%\u00004ExportMessage\f\u0001\u001cnetwork�\u0001\u0001$NetworkId\u0000\u0001,destination�\u0001\u0001TInteriorMultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000&\u0000$LockAsset\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001 unlocker�\u0001\u00014MultiLocation\u0000'\u0000,UnlockAsset\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001\u0018target�\u0001\u00014MultiLocation\u0000(\u00008NoteUnlockable\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001\u0014owner�\u0001\u00014MultiLocation\u0000)\u00004RequestUnlock\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001\u0018locker�\u0001\u00014MultiLocation\u0000*\u0000,SetFeesMode\u0004\u00010jit_withdraw \u0001\u0010bool\u0000+\u0000 SetTopic\u0004\u0000\u0004\u0001 [u8; 32]\u0000,\u0000(ClearTopic\u0000-\u0000,AliasOrigin\u0004\u0000�\u0001\u00014MultiLocation\u0000.\u0000<UnpaidExecution\b\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u00010check_origin=\u0005\u0001TOption<MultiLocation>\u0000/\u0000\u0000=\u0005\u0004\u0018Option\u0004\u0004T\u0001�\u0001\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0001\u0000\u0000\u0001\u0000\u0000A\u0005\f\fxcm\bv3DQueryResponseInfo\u0000\u0000\f\u0001,destination�\u0001\u00014MultiLocation\u0000\u0001 query_id,\u0001\u001cQueryId\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0000E\u0005\u0010\fxcm\bv3(multiasset@MultiAssetFilter\u0000\u0001\b Definite\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0000\u0000\u0010Wild\u0004\u0000I\u0005\u00018WildMultiAsset\u0000\u0001\u0000\u0000I\u0005\u0010\fxcm\bv3(multiasset8WildMultiAsset\u0000\u0001\u0010\fAll\u0000\u0000\u0000\u0014AllOf\b\u0001\bid�\u0001\u0001\u001cAssetId\u0000\u0001\ffunM\u0005\u0001<WildFungibility\u0000\u0001\u0000(AllCounted\u0004\u0000�\u0001\fu32\u0000\u0002\u00000AllOfCounted\f\u0001\bid�\u0001\u0001\u001cAssetId\u0000\u0001\ffunM\u0005\u0001<WildFungibility\u0000\u0001\u0014count�\u0001\fu32\u0000\u0003\u0000\u0000M\u0005\u0010\fxcm\bv3(multiasset<WildFungibility\u0000\u0001\b Fungible\u0000\u0000\u0000,NonFungible\u0000\u0001\u0000\u0000Q\u0005\f,staging_xcm\bv4\fXcm\u0004\u0010Call\u0000\u0000\u0004\u0000U\u0005\u0001XVec<Instruction<Call>>\u0000\u0000U\u0005\u0000\u0000\u0002Y\u0005\u0000Y\u0005\f,staging_xcm\bv4,Instruction\u0004\u0010Call\u0000\u0001�4WithdrawAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0000\u0000TReserveAssetDeposited\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0001\u0000XReceiveTeleportedAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0002\u00004QueryResponse\u0010\u0001 query_id,\u0001\u001cQueryId\u0000\u0001 response�\u0004\u0001 Response\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001\u001cquerier]\u0005\u0001@Option<Location>\u0000\u0003\u00004TransferAsset\b\u0001\u0018assets�\u0001\u0001\u0018Assets\u0000\u0001,beneficiary�\u0001 Location\u0000\u0004\u0000PTransferReserveAsset\f\u0001\u0018assets�\u0001\u0001\u0018Assets\u0000\u0001\u0010dest�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u0005\u0000 Transact\f\u0001,origin_kind�\u0001\u0001(OriginKind\u0000\u0001Xrequire_weight_at_most(\u0001\u0018Weight\u0000\u0001\u0010call�\u0001\u0001LDoubleEncoded<Call>\u0000\u0006\u0000dHrmpNewChannelOpenRequest\f\u0001\u0018sender�\u0001\fu32\u0000\u0001@max_message_size�\u0001\fu32\u0000\u00010max_capacity�\u0001\fu32\u0000\u0007\u0000LHrmpChannelAccepted\u0004\u0001$recipient�\u0001\fu32\u0000\b\u0000HHrmpChannelClosing\f\u0001$initiator�\u0001\fu32\u0000\u0001\u0018sender�\u0001\fu32\u0000\u0001$recipient�\u0001\fu32\u0000\t\u0000,ClearOrigin\u0000\n\u00004DescendOrigin\u0004\u0000�\u0001@InteriorLocation\u0000\u000b\u0000,ReportError\u0004\u0000a\u0005\u0001DQueryResponseInfo\u0000\f\u00000DepositAsset\b\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001,beneficiary�\u0001 Location\u0000\r\u0000LDepositReserveAsset\f\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001\u0010dest�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u000e\u00004ExchangeAsset\f\u0001\u0010givee\u0005\u0001,AssetFilter\u0000\u0001\u0010want�\u0001\u0001\u0018Assets\u0000\u0001\u001cmaximal \u0001\u0010bool\u0000\u000f\u0000\\InitiateReserveWithdraw\f\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001\u001creserve�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u0010\u0000@InitiateTeleport\f\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001\u0010dest�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u0011\u00004ReportHolding\b\u00014response_infoa\u0005\u0001DQueryResponseInfo\u0000\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0012\u00000BuyExecution\b\u0001\u0010fees\u0001\u0002\u0001\u0014Asset\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u0013\u00004RefundSurplus\u0000\u0014\u0000<SetErrorHandler\u0004\u0000Q\u0005\u0001$Xcm<Call>\u0000\u0015\u0000,SetAppendix\u0004\u0000Q\u0005\u0001$Xcm<Call>\u0000\u0016\u0000(ClearError\u0000\u0017\u0000(ClaimAsset\b\u0001\u0018assets�\u0001\u0001\u0018Assets\u0000\u0001\u0018ticket�\u0001 Location\u0000\u0018\u0000\u0010Trap\u0004\u0000,\u0001\fu64\u0000\u0019\u0000@SubscribeVersion\b\u0001 query_id,\u0001\u001cQueryId\u0000\u0001Lmax_response_weight(\u0001\u0018Weight\u0000\u001a\u0000HUnsubscribeVersion\u0000\u001b\u0000$BurnAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u001c\u0000,ExpectAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u001d\u00000ExpectOrigin\u0004\u0000]\u0005\u0001@Option<Location>\u0000\u001e\u0000,ExpectError\u0004\u0000�\u0004\u0001POption<(u32, Error)>\u0000\u001f\u0000PExpectTransactStatus\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000 \u0000,QueryPallet\b\u0001,module_name8\u0001\u001cVec<u8>\u0000\u00014response_infoa\u0005\u0001DQueryResponseInfo\u0000!\u00000ExpectPallet\u0014\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001,module_name8\u0001\u001cVec<u8>\u0000\u0001,crate_major�\u0001\fu32\u0000\u0001<min_crate_minor�\u0001\fu32\u0000\"\u0000PReportTransactStatus\u0004\u0000a\u0005\u0001DQueryResponseInfo\u0000#\u0000LClearTransactStatus\u0000$\u0000<UniversalOrigin\u0004\u0000�\u0001 Junction\u0000%\u00004ExportMessage\f\u0001\u001cnetwork�\u0001$NetworkId\u0000\u0001,destination�\u0001@InteriorLocation\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000&\u0000$LockAsset\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001 unlocker�\u0001 Location\u0000'\u0000,UnlockAsset\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001\u0018target�\u0001 Location\u0000(\u00008NoteUnlockable\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001\u0014owner�\u0001 Location\u0000)\u00004RequestUnlock\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001\u0018locker�\u0001 Location\u0000*\u0000,SetFeesMode\u0004\u00010jit_withdraw \u0001\u0010bool\u0000+\u0000 SetTopic\u0004\u0000\u0004\u0001 [u8; 32]\u0000,\u0000(ClearTopic\u0000-\u0000,AliasOrigin\u0004\u0000�\u0001 Location\u0000.\u0000<UnpaidExecution\b\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u00010check_origin]\u0005\u0001@Option<Location>\u0000/\u0000\u0000]\u0005\u0004\u0018Option\u0004\u0004T\u0001�\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0000\u0000\u0001\u0000\u0000a\u0005\f,staging_xcm\bv4DQueryResponseInfo\u0000\u0000\f\u0001,destination�\u0001 Location\u0000\u0001 query_id,\u0001\u001cQueryId\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0000e\u0005\u0010,staging_xcm\bv4\u0014asset,AssetFilter\u0000\u0001\b Definite\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0000\u0000\u0010Wild\u0004\u0000i\u0005\u0001$WildAsset\u0000\u0001\u0000\u0000i\u0005\u0010,staging_xcm\bv4\u0014asset$WildAsset\u0000\u0001\u0010\fAll\u0000\u0000\u0000\u0014AllOf\b\u0001\bid\u0005\u0002\u0001\u001cAssetId\u0000\u0001\ffunm\u0005\u0001<WildFungibility\u0000\u0001\u0000(AllCounted\u0004\u0000�\u0001\fu32\u0000\u0002\u00000AllOfCounted\f\u0001\bid\u0005\u0002\u0001\u001cAssetId\u0000\u0001\ffunm\u0005\u0001<WildFungibility\u0000\u0001\u0014count�\u0001\fu32\u0000\u0003\u0000\u0000m\u0005\u0010,staging_xcm\bv4\u0014asset<WildFungibility\u0000\u0001\b Fungible\u0000\u0000\u0000,NonFungible\u0000\u0001\u0000\u0000q\u0005\b\fxcm0VersionedXcm\u0004,RuntimeCall\u0000\u0001\f\bV3\u0004\u0000u\u0005\u0001Pv3::Xcm<RuntimeCall>\u0000\u0003\u0000\bV4\u0004\u0000�\u0005\u0001Pv4::Xcm<RuntimeCall>\u0000\u0004\u0000\bV5\u0004\u0000�\u0005\u0001Pv5::Xcm<RuntimeCall>\u0000\u0005\u0000\u0000u\u0005\f\fxcm\bv3\fXcm\u0004\u0010Call\u0000\u0000\u0004\u0000y\u0005\u0001XVec<Instruction<Call>>\u0000\u0000y\u0005\u0000\u0000\u0002}\u0005\u0000}\u0005\f\fxcm\bv3,Instruction\u0004\u0010Call\u0000\u0001�4WithdrawAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0000\u0000TReserveAssetDeposited\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0001\u0000XReceiveTeleportedAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u0002\u00004QueryResponse\u0010\u0001 query_id,\u0001\u001cQueryId\u0000\u0001 response�\u0004\u0001 Response\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001\u001cquerier=\u0005\u0001TOption<MultiLocation>\u0000\u0003\u00004TransferAsset\b\u0001\u0018assets�\u0001\u0001,MultiAssets\u0000\u0001,beneficiary�\u0001\u00014MultiLocation\u0000\u0004\u0000PTransferReserveAsset\f\u0001\u0018assets�\u0001\u0001,MultiAssets\u0000\u0001\u0010dest�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u0005\u0000 Transact\f\u0001,origin_kind�\u0001\u0001(OriginKind\u0000\u0001Xrequire_weight_at_most(\u0001\u0018Weight\u0000\u0001\u0010call�\u0005\u0001LDoubleEncoded<Call>\u0000\u0006\u0000dHrmpNewChannelOpenRequest\f\u0001\u0018sender�\u0001\fu32\u0000\u0001@max_message_size�\u0001\fu32\u0000\u00010max_capacity�\u0001\fu32\u0000\u0007\u0000LHrmpChannelAccepted\u0004\u0001$recipient�\u0001\fu32\u0000\b\u0000HHrmpChannelClosing\f\u0001$initiator�\u0001\fu32\u0000\u0001\u0018sender�\u0001\fu32\u0000\u0001$recipient�\u0001\fu32\u0000\t\u0000,ClearOrigin\u0000\n\u00004DescendOrigin\u0004\u0000�\u0001\u0001TInteriorMultiLocation\u0000\u000b\u0000,ReportError\u0004\u0000A\u0005\u0001DQueryResponseInfo\u0000\f\u00000DepositAsset\b\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001,beneficiary�\u0001\u00014MultiLocation\u0000\r\u0000LDepositReserveAsset\f\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001\u0010dest�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u000e\u00004ExchangeAsset\f\u0001\u0010giveE\u0005\u0001@MultiAssetFilter\u0000\u0001\u0010want�\u0001\u0001,MultiAssets\u0000\u0001\u001cmaximal \u0001\u0010bool\u0000\u000f\u0000\\InitiateReserveWithdraw\f\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001\u001creserve�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u0010\u0000@InitiateTeleport\f\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0001\u0010dest�\u0001\u00014MultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000\u0011\u00004ReportHolding\b\u00014response_infoA\u0005\u0001DQueryResponseInfo\u0000\u0001\u0018assetsE\u0005\u0001@MultiAssetFilter\u0000\u0012\u00000BuyExecution\b\u0001\u0010fees�\u0001\u0001(MultiAsset\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u0013\u00004RefundSurplus\u0000\u0014\u0000<SetErrorHandler\u0004\u0000u\u0005\u0001$Xcm<Call>\u0000\u0015\u0000,SetAppendix\u0004\u0000u\u0005\u0001$Xcm<Call>\u0000\u0016\u0000(ClearError\u0000\u0017\u0000(ClaimAsset\b\u0001\u0018assets�\u0001\u0001,MultiAssets\u0000\u0001\u0018ticket�\u0001\u00014MultiLocation\u0000\u0018\u0000\u0010Trap\u0004\u0000,\u0001\fu64\u0000\u0019\u0000@SubscribeVersion\b\u0001 query_id,\u0001\u001cQueryId\u0000\u0001Lmax_response_weight(\u0001\u0018Weight\u0000\u001a\u0000HUnsubscribeVersion\u0000\u001b\u0000$BurnAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u001c\u0000,ExpectAsset\u0004\u0000�\u0001\u0001,MultiAssets\u0000\u001d\u00000ExpectOrigin\u0004\u0000=\u0005\u0001TOption<MultiLocation>\u0000\u001e\u0000,ExpectError\u0004\u0000�\u0004\u0001POption<(u32, Error)>\u0000\u001f\u0000PExpectTransactStatus\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000 \u0000,QueryPallet\b\u0001,module_name8\u0001\u001cVec<u8>\u0000\u00014response_infoA\u0005\u0001DQueryResponseInfo\u0000!\u00000ExpectPallet\u0014\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001,module_name8\u0001\u001cVec<u8>\u0000\u0001,crate_major�\u0001\fu32\u0000\u0001<min_crate_minor�\u0001\fu32\u0000\"\u0000PReportTransactStatus\u0004\u0000A\u0005\u0001DQueryResponseInfo\u0000#\u0000LClearTransactStatus\u0000$\u0000<UniversalOrigin\u0004\u0000�\u0001\u0001 Junction\u0000%\u00004ExportMessage\f\u0001\u001cnetwork�\u0001\u0001$NetworkId\u0000\u0001,destination�\u0001\u0001TInteriorMultiLocation\u0000\u0001\fxcm1\u0005\u0001\u001cXcm<()>\u0000&\u0000$LockAsset\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001 unlocker�\u0001\u00014MultiLocation\u0000'\u0000,UnlockAsset\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001\u0018target�\u0001\u00014MultiLocation\u0000(\u00008NoteUnlockable\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001\u0014owner�\u0001\u00014MultiLocation\u0000)\u00004RequestUnlock\b\u0001\u0014asset�\u0001\u0001(MultiAsset\u0000\u0001\u0018locker�\u0001\u00014MultiLocation\u0000*\u0000,SetFeesMode\u0004\u00010jit_withdraw \u0001\u0010bool\u0000+\u0000 SetTopic\u0004\u0000\u0004\u0001 [u8; 32]\u0000,\u0000(ClearTopic\u0000-\u0000,AliasOrigin\u0004\u0000�\u0001\u00014MultiLocation\u0000.\u0000<UnpaidExecution\b\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u00010check_origin=\u0005\u0001TOption<MultiLocation>\u0000/\u0000\u0000�\u0005\f\fxcm8double_encoded4DoubleEncoded\u0004\u0004T\u0000\u0000\u0004\u0001\u001cencoded8\u0001\u001cVec<u8>\u0000\u0000�\u0005\f,staging_xcm\bv4\fXcm\u0004\u0010Call\u0000\u0000\u0004\u0000�\u0005\u0001XVec<Instruction<Call>>\u0000\u0000�\u0005\u0000\u0000\u0002�\u0005\u0000�\u0005\f,staging_xcm\bv4,Instruction\u0004\u0010Call\u0000\u0001�4WithdrawAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0000\u0000TReserveAssetDeposited\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0001\u0000XReceiveTeleportedAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u0002\u00004QueryResponse\u0010\u0001 query_id,\u0001\u001cQueryId\u0000\u0001 response�\u0004\u0001 Response\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001\u001cquerier]\u0005\u0001@Option<Location>\u0000\u0003\u00004TransferAsset\b\u0001\u0018assets�\u0001\u0001\u0018Assets\u0000\u0001,beneficiary�\u0001 Location\u0000\u0004\u0000PTransferReserveAsset\f\u0001\u0018assets�\u0001\u0001\u0018Assets\u0000\u0001\u0010dest�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u0005\u0000 Transact\f\u0001,origin_kind�\u0001\u0001(OriginKind\u0000\u0001Xrequire_weight_at_most(\u0001\u0018Weight\u0000\u0001\u0010call�\u0005\u0001LDoubleEncoded<Call>\u0000\u0006\u0000dHrmpNewChannelOpenRequest\f\u0001\u0018sender�\u0001\fu32\u0000\u0001@max_message_size�\u0001\fu32\u0000\u00010max_capacity�\u0001\fu32\u0000\u0007\u0000LHrmpChannelAccepted\u0004\u0001$recipient�\u0001\fu32\u0000\b\u0000HHrmpChannelClosing\f\u0001$initiator�\u0001\fu32\u0000\u0001\u0018sender�\u0001\fu32\u0000\u0001$recipient�\u0001\fu32\u0000\t\u0000,ClearOrigin\u0000\n\u00004DescendOrigin\u0004\u0000�\u0001@InteriorLocation\u0000\u000b\u0000,ReportError\u0004\u0000a\u0005\u0001DQueryResponseInfo\u0000\f\u00000DepositAsset\b\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001,beneficiary�\u0001 Location\u0000\r\u0000LDepositReserveAsset\f\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001\u0010dest�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u000e\u00004ExchangeAsset\f\u0001\u0010givee\u0005\u0001,AssetFilter\u0000\u0001\u0010want�\u0001\u0001\u0018Assets\u0000\u0001\u001cmaximal \u0001\u0010bool\u0000\u000f\u0000\\InitiateReserveWithdraw\f\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001\u001creserve�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u0010\u0000@InitiateTeleport\f\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0001\u0010dest�\u0001 Location\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000\u0011\u00004ReportHolding\b\u00014response_infoa\u0005\u0001DQueryResponseInfo\u0000\u0001\u0018assetse\u0005\u0001,AssetFilter\u0000\u0012\u00000BuyExecution\b\u0001\u0010fees\u0001\u0002\u0001\u0014Asset\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u0013\u00004RefundSurplus\u0000\u0014\u0000<SetErrorHandler\u0004\u0000�\u0005\u0001$Xcm<Call>\u0000\u0015\u0000,SetAppendix\u0004\u0000�\u0005\u0001$Xcm<Call>\u0000\u0016\u0000(ClearError\u0000\u0017\u0000(ClaimAsset\b\u0001\u0018assets�\u0001\u0001\u0018Assets\u0000\u0001\u0018ticket�\u0001 Location\u0000\u0018\u0000\u0010Trap\u0004\u0000,\u0001\fu64\u0000\u0019\u0000@SubscribeVersion\b\u0001 query_id,\u0001\u001cQueryId\u0000\u0001Lmax_response_weight(\u0001\u0018Weight\u0000\u001a\u0000HUnsubscribeVersion\u0000\u001b\u0000$BurnAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u001c\u0000,ExpectAsset\u0004\u0000�\u0001\u0001\u0018Assets\u0000\u001d\u00000ExpectOrigin\u0004\u0000]\u0005\u0001@Option<Location>\u0000\u001e\u0000,ExpectError\u0004\u0000�\u0004\u0001POption<(u32, Error)>\u0000\u001f\u0000PExpectTransactStatus\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000 \u0000,QueryPallet\b\u0001,module_name8\u0001\u001cVec<u8>\u0000\u00014response_infoa\u0005\u0001DQueryResponseInfo\u0000!\u00000ExpectPallet\u0014\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001,module_name8\u0001\u001cVec<u8>\u0000\u0001,crate_major�\u0001\fu32\u0000\u0001<min_crate_minor�\u0001\fu32\u0000\"\u0000PReportTransactStatus\u0004\u0000a\u0005\u0001DQueryResponseInfo\u0000#\u0000LClearTransactStatus\u0000$\u0000<UniversalOrigin\u0004\u0000�\u0001 Junction\u0000%\u00004ExportMessage\f\u0001\u001cnetwork�\u0001$NetworkId\u0000\u0001,destination�\u0001@InteriorLocation\u0000\u0001\fxcmQ\u0005\u0001\u001cXcm<()>\u0000&\u0000$LockAsset\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001 unlocker�\u0001 Location\u0000'\u0000,UnlockAsset\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001\u0018target�\u0001 Location\u0000(\u00008NoteUnlockable\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001\u0014owner�\u0001 Location\u0000)\u00004RequestUnlock\b\u0001\u0014asset\u0001\u0002\u0001\u0014Asset\u0000\u0001\u0018locker�\u0001 Location\u0000*\u0000,SetFeesMode\u0004\u00010jit_withdraw \u0001\u0010bool\u0000+\u0000 SetTopic\u0004\u0000\u0004\u0001 [u8; 32]\u0000,\u0000(ClearTopic\u0000-\u0000,AliasOrigin\u0004\u0000�\u0001 Location\u0000.\u0000<UnpaidExecution\b\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u00010check_origin]\u0005\u0001@Option<Location>\u0000/\u0000\u0000�\u0005\f,staging_xcm\bv5\fXcm\u0004\u0010Call\u0000\u0000\u0004\u0000�\u0005\u0001XVec<Instruction<Call>>\u0000\u0000�\u0005\u0000\u0000\u0002�\u0005\u0000�\u0005\f,staging_xcm\bv5,Instruction\u0004\u0010Call\u0000\u0001�4WithdrawAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0000\u0000TReserveAssetDeposited\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0001\u0000XReceiveTeleportedAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u0002\u00004QueryResponse\u0010\u0001 query_id,\u0001\u001cQueryId\u0000\u0001 responsea\u0001\u0001 Response\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001\u001cquerier�\u0001\u0001@Option<Location>\u0000\u0003\u00004TransferAsset\b\u0001\u0018assetsA\u0001\u0001\u0018Assets\u0000\u0001,beneficiary\u0001\u0001\u0001 Location\u0000\u0004\u0000PTransferReserveAsset\f\u0001\u0018assetsA\u0001\u0001\u0018Assets\u0000\u0001\u0010dest\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u0005\u0000 Transact\f\u0001,origin_kind�\u0001\u0001(OriginKind\u0000\u0001Lfallback_max_weight�\u0001\u00018Option<Weight>\u0000\u0001\u0010call�\u0005\u0001LDoubleEncoded<Call>\u0000\u0006\u0000dHrmpNewChannelOpenRequest\f\u0001\u0018sender�\u0001\fu32\u0000\u0001@max_message_size�\u0001\fu32\u0000\u00010max_capacity�\u0001\fu32\u0000\u0007\u0000LHrmpChannelAccepted\u0004\u0001$recipient�\u0001\fu32\u0000\b\u0000HHrmpChannelClosing\f\u0001$initiator�\u0001\fu32\u0000\u0001\u0018sender�\u0001\fu32\u0000\u0001$recipient�\u0001\fu32\u0000\t\u0000,ClearOrigin\u0000\n\u00004DescendOrigin\u0004\u0000\u0005\u0001\u0001@InteriorLocation\u0000\u000b\u0000,ReportError\u0004\u0000�\u0001\u0001DQueryResponseInfo\u0000\f\u00000DepositAsset\b\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001,beneficiary\u0001\u0001\u0001 Location\u0000\r\u0000LDepositReserveAsset\f\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001\u0010dest\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u000e\u00004ExchangeAsset\f\u0001\u0010give�\u0001\u0001,AssetFilter\u0000\u0001\u0010wantA\u0001\u0001\u0018Assets\u0000\u0001\u001cmaximal \u0001\u0010bool\u0000\u000f\u0000\\InitiateReserveWithdraw\f\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001\u001creserve\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u0010\u0000@InitiateTeleport\f\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0001\u0010dest\u0001\u0001\u0001 Location\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000\u0011\u00004ReportHolding\b\u00014response_info�\u0001\u0001DQueryResponseInfo\u0000\u0001\u0018assets�\u0001\u0001,AssetFilter\u0000\u0012\u00000BuyExecution\b\u0001\u0010feesI\u0001\u0001\u0014Asset\u0000\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u0013\u00004RefundSurplus\u0000\u0014\u0000<SetErrorHandler\u0004\u0000�\u0005\u0001$Xcm<Call>\u0000\u0015\u0000,SetAppendix\u0004\u0000�\u0005\u0001$Xcm<Call>\u0000\u0016\u0000(ClearError\u0000\u0017\u0000(ClaimAsset\b\u0001\u0018assetsA\u0001\u0001\u0018Assets\u0000\u0001\u0018ticket\u0001\u0001\u0001 Location\u0000\u0018\u0000\u0010Trap\u0004\u0000,\u0001\fu64\u0000\u0019\u0000@SubscribeVersion\b\u0001 query_id,\u0001\u001cQueryId\u0000\u0001Lmax_response_weight(\u0001\u0018Weight\u0000\u001a\u0000HUnsubscribeVersion\u0000\u001b\u0000$BurnAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u001c\u0000,ExpectAsset\u0004\u0000A\u0001\u0001\u0018Assets\u0000\u001d\u00000ExpectOrigin\u0004\u0000�\u0001\u0001@Option<Location>\u0000\u001e\u0000,ExpectError\u0004\u0000e\u0001\u0001POption<(u32, Error)>\u0000\u001f\u0000PExpectTransactStatus\u0004\u0000}\u0001\u00018MaybeErrorCode\u0000 \u0000,QueryPallet\b\u0001,module_name8\u0001\u001cVec<u8>\u0000\u00014response_info�\u0001\u0001DQueryResponseInfo\u0000!\u00000ExpectPallet\u0014\u0001\u0014index�\u0001\fu32\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001,module_name8\u0001\u001cVec<u8>\u0000\u0001,crate_major�\u0001\fu32\u0000\u0001<min_crate_minor�\u0001\fu32\u0000\"\u0000PReportTransactStatus\u0004\u0000�\u0001\u0001DQueryResponseInfo\u0000#\u0000LClearTransactStatus\u0000$\u0000<UniversalOrigin\u0004\u0000\r\u0001\u0001 Junction\u0000%\u00004ExportMessage\f\u0001\u001cnetwork\u0015\u0001\u0001$NetworkId\u0000\u0001,destination\u0005\u0001\u0001@InteriorLocation\u0000\u0001\fxcm5\u0001\u0001\u001cXcm<()>\u0000&\u0000$LockAsset\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001 unlocker\u0001\u0001\u0001 Location\u0000'\u0000,UnlockAsset\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001\u0018target\u0001\u0001\u0001 Location\u0000(\u00008NoteUnlockable\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001\u0014owner\u0001\u0001\u0001 Location\u0000)\u00004RequestUnlock\b\u0001\u0014assetI\u0001\u0001\u0014Asset\u0000\u0001\u0018locker\u0001\u0001\u0001 Location\u0000*\u0000,SetFeesMode\u0004\u00010jit_withdraw \u0001\u0010bool\u0000+\u0000 SetTopic\u0004\u0000\u0004\u0001 [u8; 32]\u0000,\u0000(ClearTopic\u0000-\u0000,AliasOrigin\u0004\u0000\u0001\u0001\u0001 Location\u0000.\u0000<UnpaidExecution\b\u00010weight_limit�\u0001\u0001,WeightLimit\u0000\u00010check_origin�\u0001\u0001@Option<Location>\u0000/\u0000\u001cPayFees\u0004\u0001\u0014assetI\u0001\u0001\u0014Asset\u00000\u0000@InitiateTransfer\u0014\u0001,destination\u0001\u0001\u0001 Location\u0000\u0001,remote_fees�\u0001\u0001lOption<AssetTransferFilter>\u0000\u0001<preserve_origin \u0001\u0010bool\u0000\u0001\u0018assets�\u0001\u0001�BoundedVec<AssetTransferFilter, MaxAssetTransferFilters>\u0000\u0001(remote_xcm5\u0001\u0001\u001cXcm<()>\u00001\u0000DExecuteWithOrigin\b\u0001Ddescendant_origin�\u0001\u0001`Option<InteriorLocation>\u0000\u0001\fxcm�\u0005\u0001$Xcm<Call>\u00002\u0000 SetHints\u0004\u0001\u0014hints�\u0001\u0001�BoundedVec<Hint, HintNumVariants>\u00003\u0000\u0000�\u0005\u0010Pstaging_xcm_executor\u0018traits8asset_transfer0TransferType\u0000\u0001\u0010 Teleport\u0000\u0000\u00000LocalReserve\u0000\u0001\u0000HDestinationReserve\u0000\u0002\u00004RemoteReserve\u0004\u0000\u0011\u0002\u0001DVersionedLocation\u0000\u0003\u0000\u0000�\u0005\f(pallet_xcm\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001`,Unreachable\u0000\u0000\b]\u0001The desired destination was unreachable, generally because there is a no way of routing\u0018to it.,SendFailure\u0000\u0001\bA\u0001There was some other issue (i.e. not to do with routing) in sending the message.�Perhaps a lack of space for buffering the message. Filtered\u0000\u0002\u0004�The message execution fails the filter.HUnweighableMessage\u0000\u0003\u0004�The message's weight could not be determined.`DestinationNotInvertible\u0000\u0004\u0004�The destination `Location` provided cannot be inverted.\u0014Empty\u0000\u0005\u0004�The assets to be sent are empty.8CannotReanchor\u0000\u0006\u00045\u0001Could not re-anchor the assets to declare the fees for the destination chain.4TooManyAssets\u0000\u0007\u0004�Too many assets have been attempted for transfer.4InvalidOrigin\u0000\b\u0004xOrigin is invalid for sending.(BadVersion\u0000\t\u0004!\u0001The version of the `Versioned` value used is not able to be interpreted.,BadLocation\u0000\n\bA\u0001The given location could not be used (e.g. because it cannot be expressed in the`desired version of XCM).8NoSubscription\u0000\u000b\u0004�The referenced subscription could not be found.DAlreadySubscribed\u0000\f\u0004\u0011\u0001The location is invalid since it already has a subscription from us.XCannotCheckOutTeleport\u0000\r\u0004)\u0001Could not check-out the assets for teleportation to the destination chain.(LowBalance\u0000\u000e\u0004A\u0001The owner does not own (all) of the asset that they wish to do the operation on.0TooManyLocks\u0000\u000f\u0004�The asset owner has too many locks on the asset.LAccountNotSovereign\u0000\u0010\u00041\u0001The given account is not an identifiable sovereign account for any location.(FeesNotMet\u0000\u0011\u0004)\u0001The operation required fees to be paid which the initiator could not meet.0LockNotFound\u0000\u0012\u0004�A remote lock with the corresponding data could not be found.\u0014InUse\u0000\u0013\u0004I\u0001The unlock operation cannot succeed because there are still consumers of the lock.hInvalidAssetUnknownReserve\u0000\u0015\u0004�Invalid asset, reserve chain could not be determined for it.xInvalidAssetUnsupportedReserve\u0000\u0016\u0004E\u0001Invalid asset, do not support remote asset reserves with different fees reserves.<TooManyReserves\u0000\u0017\u0004I\u0001Too many assets with different reserve locations have been attempted for transfer.`LocalExecutionIncomplete\u0000\u0018\u0004|Local XCM execution incomplete.\u0004�The `Error` enum of this pallet.�\u0005\fHcumulus_pallet_xcm\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0000\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\b`bp_xcm_bridge_hub_router,BridgeState\u0000\u0000\b\u0001Ldelivery_fee_factor\u001d\u0002\u0001$FixedU128\u0000\u00010is_congested \u0001\u0010bool\u0000\u0000�\u0005\fppallet_xcm_bridge_hub_router\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001\u0004Preport_bridge_status\b\u0001$bridge_id4\u0001\u0010H256\u0000\u00010is_congested \u0001\u0010bool\u0000\u0000\u0004�Notification about congested bridge queue.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\bPpallet_message_queue$BookState\u00044MessageOrigin\u0001%\u0002\u0000\u0018\u0001\u0014begin\u0010\u0001$PageIndex\u0000\u0001\fend\u0010\u0001$PageIndex\u0000\u0001\u0014count\u0010\u0001$PageIndex\u0000\u0001@ready_neighbours�\u0005\u0001�Option<Neighbours<MessageOrigin>>\u0000\u00014message_count0\u0001\fu64\u0000\u0001\u0010size0\u0001\fu64\u0000\u0000�\u0005\u0004\u0018Option\u0004\u0004T\u0001�\u0005\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0005\u0000\u0000\u0001\u0000\u0000�\u0005\bPpallet_message_queue(Neighbours\u00044MessageOrigin\u0001%\u0002\u0000\b\u0001\u0010prev%\u0002\u00014MessageOrigin\u0000\u0001\u0010next%\u0002\u00014MessageOrigin\u0000\u0000�\u0005\u0000\u0000\u0004\b%\u0002\u0010\u0000�\u0005\bPpallet_message_queue\u0010Page\b\u0010Size\u0001\u0010 HeapSize\u0000\u0000\u0018\u0001$remaining\u0010\u0001\u0010Size\u0000\u00018remaining_size\u0010\u0001\u0010Size\u0000\u0001,first_index\u0010\u0001\u0010Size\u0000\u0001\u0014first\u0010\u0001\u0010Size\u0000\u0001\u0010last\u0010\u0001\u0010Size\u0000\u0001\u0010heap�\u0005\u0001�BoundedVec<u8, IntoU32<HeapSize, Size>>\u0000\u0000�\u0005\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0005\fPpallet_message_queue\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\b$reap_page\b\u00018message_origin%\u0002\u0001HMessageOriginOf<T>\u0000\u0001(page_index\u0010\u0001$PageIndex\u0000\u0000\u0004=\u0001Remove a page which has no more messages remaining to be processed or is stale.Hexecute_overweight\u0010\u00018message_origin%\u0002\u0001HMessageOriginOf<T>\u0000\u0001\u0010page\u0010\u0001$PageIndex\u0000\u0001\u0014index\u0010\u0001\u001cT::Size\u0000\u00010weight_limit(\u0001\u0018Weight\u0000\u00014xExecute an overweight message.\u0000M\u0001Temporary processing errors will be propagated whereas permanent errors are treatedTas success condition.\u0000t- `origin`: Must be `Signed`.5\u0001- `message_origin`: The origin from which the message to be executed arrived.=\u0001- `page`: The page in the queue in which the message to be executed is sitting.\t\u0001- `index`: The index into the queue of the message to be executed.Y\u0001- `weight_limit`: The maximum amount of weight allowed to be consumed in the executionD  of the message.\u0000�Benchmark complexity considerations: O(index + weight_limit).\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\fPpallet_message_queue\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001$,NotReapable\u0000\u0000\bI\u0001Page is not reapable because it has items remaining to be processed and is not old\u001cenough.\u0018NoPage\u0000\u0001\u0004�Page to be reaped does not exist.$NoMessage\u0000\u0002\u0004�The referenced message could not be found.@AlreadyProcessed\u0000\u0003\u0004\u0001\u0001The message was already processed and cannot be processed again.\u0018Queued\u0000\u0004\u0004�The message is queued for future execution.HInsufficientWeight\u0000\u0005\u0004\u0019\u0001There is temporarily not enough weight to continue servicing messages.`TemporarilyUnprocessable\u0000\u0006\u0010�This message is temporarily unprocessable.\u0000Y\u0001Such errors are expected, but not guaranteed, to resolve themselves eventually through$retrying.,QueuePaused\u0000\u0007\f�The queue is paused and no message can be executed from it.\u0000\u001d\u0001This can change at any time and may resolve in the future by re-trying.LRecursiveDisallowed\u0000\b\u00041\u0001Another call is in progress and needs to finish before this call can happen.\u0004�The `Error` enum of this pallet.�\u0005\f8pallet_utility\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0018\u0014batch\u0004\u0001\u0014calls�\u0005\u0001|Vec<<T as Config>::RuntimeCall>\u0000\u0000H|Send a batch of dispatch calls.\u0000�May be called from any origin except `None`.\u0000]\u0001- `calls`: The calls to be dispatched from the same origin. The number of call must not9\u0001  exceed the constant: `batched_calls_limit` (available in constant metadata).\u0000U\u0001If origin is root then the calls are dispatched without checking origin filter. (This�includes bypassing `frame_system::Config::BaseCallFilter`).\u00004## Complexity�- O(C) where C is the number of calls to be batched.\u0000U\u0001This will return `Ok` in all circumstances. To determine the success of the batch, an1\u0001event is deposited. If a call failed and the batch was interrupted, then theU\u0001`BatchInterrupted` event is deposited, along with the number of successful calls madeM\u0001and the error of the failed call. If all were successful, then the `BatchCompleted`Levent is deposited.4as_derivative\b\u0001\u0014indexM\u0002\u0001\fu16\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u00014�Send a call through an indexed pseudonym of the sender.\u0000U\u0001Filter from origin are passed along. The call will be dispatched with an origin which�use the same filter as the origin of this call.\u0000E\u0001NOTE: If you need to ensure that any account-based filtering is not honored (i.e.a\u0001because you expect `proxy` to have been used prior in the call stack and you do not wantQ\u0001the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`|in the Multisig pallet instead.\u0000�NOTE: Prior to version *12, this was called `as_limited_sub`.\u0000�The dispatch origin for this call must be _Signed_.$batch_all\u0004\u0001\u0014calls�\u0005\u0001|Vec<<T as Config>::RuntimeCall>\u0000\u00024�Send a batch of dispatch calls and atomically execute them.!\u0001The whole transaction will rollback and fail if any of the calls failed.\u0000�May be called from any origin except `None`.\u0000]\u0001- `calls`: The calls to be dispatched from the same origin. The number of call must not9\u0001  exceed the constant: `batched_calls_limit` (available in constant metadata).\u0000U\u0001If origin is root then the calls are dispatched without checking origin filter. (This�includes bypassing `frame_system::Config::BaseCallFilter`).\u00004## Complexity�- O(C) where C is the number of calls to be batched.,dispatch_as\b\u0001$as_origin�\u0006\u0001TBox<T::PalletsOrigin>\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0003\u0018�Dispatches a function call with a provided origin.\u0000�The dispatch origin for this call must be _Root_.\u00004## Complexity\u001c- O(1).,force_batch\u0004\u0001\u0014calls�\u0005\u0001|Vec<<T as Config>::RuntimeCall>\u0000\u00044|Send a batch of dispatch calls.�Unlike `batch`, it allows errors and won't interrupt.\u0000�May be called from any origin except `None`.\u0000]\u0001- `calls`: The calls to be dispatched from the same origin. The number of call must not9\u0001  exceed the constant: `batched_calls_limit` (available in constant metadata).\u0000M\u0001If origin is root then the calls are dispatch without checking origin filter. (This�includes bypassing `frame_system::Config::BaseCallFilter`).\u00004## Complexity�- O(C) where C is the number of calls to be batched.,with_weight\b\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0001\u0018weight(\u0001\u0018Weight\u0000\u0005\u0018�Dispatch a function call with a specified weight.\u0000-\u0001This function does not check the weight of the call, and instead allows the�Root origin to specify the weight of the call.\u0000�The dispatch origin for this call must be _Root_.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\u0000\u0000\u0002�\u0005\u0000�\u0005\b\\asset_hub_paseo_runtime,RuntimeCall\u0000\u0001`\u0018System\u0004\u0000�\u0002\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>\u0000\u0000\u0000<ParachainSystem\u0004\u0000�\u0003\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>\u0000\u0001\u0000$Timestamp\u0004\u0000�\u0003\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>\u0000\u0003\u00004ParachainInfo\u0004\u0000�\u0003\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>\u0000\u0004\u0000 Balances\u0004\u0000�\u0003\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>\u0000\n\u0000\u001cVesting\u0004\u0000!\u0004\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>\u0000\u000e\u0000DCollatorSelection\u0004\u00009\u0004\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>\u0000\u0015\u0000\u001cSession\u0004\u0000Y\u0004\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>\u0000\u0016\u0000$XcmpQueue\u0004\u0000�\u0004\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>\u0000\u001e\u0000,PolkadotXcm\u0004\u0000)\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>\u0000\u001f\u0000(CumulusXcm\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>\u0000 \u0000DToKusamaXcmRouter\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ToKusamaXcmRouter, Runtime>\u0000\"\u00000MessageQueue\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>\u0000#\u0000\u001cUtility\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>\u0000(\u0000 Multisig\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>\u0000)\u0000\u0014Proxy\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>\u0000*\u0000\u0018Assets\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>\u00002\u0000\u001cUniques\u0004\u0000�\u0005\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>\u00003\u0000\u0010Nfts\u0004\u0000\u0001\u0006\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nfts, Runtime>\u00004\u00004ForeignAssets\u0004\u0000U\u0006\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ForeignAssets, Runtime>\u00005\u0000(PoolAssets\u0004\u0000Y\u0006\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PoolAssets, Runtime>\u00006\u0000<AssetConversion\u0004\u0000]\u0006\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetConversion, Runtime>\u00007\u0000HStateTrieMigration\u0004\u0000e\u0006\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>\u0000F\u0000\u0010Sudo\u0004\u0000}\u0006\u0001�\u0001self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>\u0000�\u0000\u0000�\u0005\f<pallet_multisig\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0010Pas_multi_threshold_1\b\u0001Dother_signatories�\u0001DVec<T::AccountId>\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u00000Q\u0001Immediately dispatch a multi-signature call using a single approval from the caller.\u0000�The dispatch origin for this call must be _Signed_.\u0000=\u0001- `other_signatories`: The accounts (other than the sender) who are part of the\u0001\u0001multi-signature, but do not participate in the approval process.�- `call`: The call to be executed.\u0000�Result is equivalent to the dispatched result.\u00004## Complexity\u0019\u0001O(Z + C) where Z is the length of the call and C its execution weight. as_multi\u0014\u0001$thresholdM\u0002\u0001\fu16\u0000\u0001Dother_signatories�\u0001DVec<T::AccountId>\u0000\u0001<maybe_timepoint�\u0005\u0001�Option<Timepoint<BlockNumberFor<T>>>\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0001�U\u0001Register approval for a dispatch to be made from a deterministic composite account if�approved by a total of `threshold - 1` of `other_signatories`.\u0000�If there are enough, then dispatch the call.\u0000-\u0001Payment: `DepositBase` will be reserved if this is the first approval, plus=\u0001`threshold` times `DepositFactor`. It is returned once this dispatch happens or4is cancelled.\u0000�The dispatch origin for this call must be _Signed_.\u0000U\u0001- `threshold`: The total number of approvals for this dispatch before it is executed.A\u0001- `other_signatories`: The accounts (other than the sender) who can approve thisldispatch. May not be empty.Y\u0001- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it isQ\u0001not the first approval, then it must be `Some`, with the timepoint (block number and�transaction index) of the first approval transaction.�- `call`: The call to be executed.\u0000\u001d\u0001NOTE: Unless this is the final approval, you will generally want to use\u0019\u0001`approve_as_multi` instead, since it only requires a hash of the call.\u0000Y\u0001Result is equivalent to the dispatched result if `threshold` is exactly `1`. OtherwiseU\u0001on success, result is `Ok` and the result from the interior call, if it was executed,�may be found in the deposited `MultisigExecuted` event.\u00004## ComplexityP- `O(S + Z + Call)`.�- Up to one balance-reserve or unreserve operation.=\u0001- One passthrough operation, one insert, both `O(S)` where `S` is the number ofE\u0001  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.!\u0001- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.�- One encode & hash, both of complexity `O(S)`.�- Up to one binary search and insert (`O(logS + S)`).�- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.0- One event.l- The weight of the `call`.M\u0001- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit\u0019\u0001  taken for its lifetime of `DepositBase + threshold * DepositFactor`.@approve_as_multi\u0014\u0001$thresholdM\u0002\u0001\fu16\u0000\u0001Dother_signatories�\u0001DVec<T::AccountId>\u0000\u0001<maybe_timepoint�\u0005\u0001�Option<Timepoint<BlockNumberFor<T>>>\u0000\u0001$call_hash\u0004\u0001 [u8; 32]\u0000\u0001(max_weight(\u0001\u0018Weight\u0000\u0002xU\u0001Register approval for a dispatch to be made from a deterministic composite account if�approved by a total of `threshold - 1` of `other_signatories`.\u0000-\u0001Payment: `DepositBase` will be reserved if this is the first approval, plus=\u0001`threshold` times `DepositFactor`. It is returned once this dispatch happens or4is cancelled.\u0000�The dispatch origin for this call must be _Signed_.\u0000U\u0001- `threshold`: The total number of approvals for this dispatch before it is executed.A\u0001- `other_signatories`: The accounts (other than the sender) who can approve thisldispatch. May not be empty.Y\u0001- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it isQ\u0001not the first approval, then it must be `Some`, with the timepoint (block number and�transaction index) of the first approval transaction.�- `call_hash`: The hash of the call to be executed.\u00005\u0001NOTE: If this is the final approval, you will want to use `as_multi` instead.\u00004## Complexity$- `O(S)`.�- Up to one balance-reserve or unreserve operation.=\u0001- One passthrough operation, one insert, both `O(S)` where `S` is the number ofE\u0001  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.�- One encode & hash, both of complexity `O(S)`.�- Up to one binary search and insert (`O(logS + S)`).�- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.0- One event.M\u0001- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit\u0019\u0001  taken for its lifetime of `DepositBase + threshold * DepositFactor`.<cancel_as_multi\u0010\u0001$thresholdM\u0002\u0001\fu16\u0000\u0001Dother_signatories�\u0001DVec<T::AccountId>\u0000\u0001$timepointA\u0002\u0001pTimepoint<BlockNumberFor<T>>\u0000\u0001$call_hash\u0004\u0001 [u8; 32]\u0000\u0003TU\u0001Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously�for this operation will be unreserved on success.\u0000�The dispatch origin for this call must be _Signed_.\u0000U\u0001- `threshold`: The total number of approvals for this dispatch before it is executed.A\u0001- `other_signatories`: The accounts (other than the sender) who can approve thisldispatch. May not be empty.]\u0001- `timepoint`: The timepoint (block number and transaction index) of the first approvalxtransaction for this dispatch.�- `call_hash`: The hash of the call to be executed.\u00004## Complexity$- `O(S)`.�- Up to one balance-reserve or unreserve operation.=\u0001- One passthrough operation, one insert, both `O(S)` where `S` is the number ofE\u0001  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.�- One encode & hash, both of complexity `O(S)`.0- One event.�- I/O: 1 read `O(S)`, one remove.p- Storage: removes one item.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\u0004\u0018Option\u0004\u0004T\u0001A\u0002\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000A\u0002\u0000\u0000\u0001\u0000\u0000�\u0005\f0pallet_proxy\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001(\u0014proxy\f\u0001\u0010real�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001@force_proxy_type�\u0005\u0001POption<T::ProxyType>\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0000$M\u0001Dispatch the given `call` from an account that the sender is authorised for through0`add_proxy`.\u0000�The dispatch origin for this call must be _Signed_.\u0000,Parameters:\r\u0001- `real`: The account that the proxy will make a call on behalf of.a\u0001- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.�- `call`: The call to be made by the `real` account.$add_proxy\f\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001\u0014delay\u0010\u0001DBlockNumberFor<T>\u0000\u0001$E\u0001Register a proxy account for the sender that is able to make calls on its behalf.\u0000�The dispatch origin for this call must be _Signed_.\u0000,Parameters:\u0011\u0001- `proxy`: The account that the `caller` would like to make a proxy.�- `proxy_type`: The permissions allowed for this proxy account.M\u0001- `delay`: The announcement period required of the initial proxy. Will generally be\u0014zero.0remove_proxy\f\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001\u0014delay\u0010\u0001DBlockNumberFor<T>\u0000\u0002\u001c�Unregister a proxy account for the sender.\u0000�The dispatch origin for this call must be _Signed_.\u0000,Parameters:%\u0001- `proxy`: The account that the `caller` would like to remove as a proxy.A\u0001- `proxy_type`: The permissions currently enabled for the removed proxy account.8remove_proxies\u0000\u0003\u0018�Unregister all proxy accounts for the sender.\u0000�The dispatch origin for this call must be _Signed_.\u0000A\u0001WARNING: This may be called on accounts created by `pure`, however if done, thenY\u0001the unreserved fees will be inaccessible. **All access to this account will be lost.**,create_pure\f\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001\u0014delay\u0010\u0001DBlockNumberFor<T>\u0000\u0001\u0014indexM\u0002\u0001\fu16\u0000\u0004H9\u0001Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and�initialize it with a proxy of `proxy_type` for `origin` sender.\u0000lRequires a `Signed` origin.\u0000Q\u0001- `proxy_type`: The type of the proxy that the sender will be registered as over theM\u0001new account. This will almost always be the most permissive `ProxyType` possible toxallow for maximum flexibility.Q\u0001- `index`: A disambiguation index, in case this is called multiple times in the same]\u0001transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just@want to use `0`.M\u0001- `delay`: The announcement period required of the initial proxy. Will generally be\u0014zero.\u0000Q\u0001Fails with `Duplicate` if this has already been called in this transaction, from the�same sender, with the same parameters.\u0000�Fails if there are insufficient funds to pay for deposit.$kill_pure\u0014\u0001\u001cspawner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(proxy_typeI\u0002\u00010T::ProxyType\u0000\u0001\u0014indexM\u0002\u0001\fu16\u0000\u0001\u0018height�\u0001DBlockNumberFor<T>\u0000\u0001$ext_index�\u0001\fu32\u0000\u0005@�Removes a previously spawned pure proxy.\u0000I\u0001WARNING: **All access to this account will be lost.** Any funds held in it will be4inaccessible.\u0000Y\u0001Requires a `Signed` origin, and the sender account must have been created by a call to�`pure` with corresponding parameters.\u00009\u0001- `spawner`: The account that originally called `pure` to create this account.9\u0001- `index`: The disambiguation index originally passed to `pure`. Probably `0`.�- `proxy_type`: The proxy type originally passed to `pure`.)\u0001- `height`: The height of the chain when the call to `pure` was processed.5\u0001- `ext_index`: The extrinsic index in which the call to `pure` was processed.\u00005\u0001Fails with `NoPermission` in case the caller is not a previously created pure�account whose `pure` call has corresponding parameters. announce\b\u0001\u0010real�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001$call_hash4\u00014CallHashOf<T>\u0000\u0006<\u0005\u0001Publish the hash of a proxy-call that will be made in the future.\u0000]\u0001This must be called some number of blocks before the corresponding `proxy` is attempted%\u0001if the delay associated with the proxy relationship is greater than zero.\u0000\u0011\u0001No more than `MaxPending` announcements may be made at any one time.\u0000\t\u0001This will take a deposit of `AnnouncementDepositFactor` as well as\u0019\u0001`AnnouncementDepositBase` if there are no other pending announcements.\u0000%\u0001The dispatch origin for this call must be _Signed_ and a proxy of `real`.\u0000,Parameters:\r\u0001- `real`: The account that the proxy will make a call on behalf of.\u0015\u0001- `call_hash`: The hash of the call to be made by the `real` account.Lremove_announcement\b\u0001\u0010real�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001$call_hash4\u00014CallHashOf<T>\u0000\u0007(pRemove a given announcement.\u0000Y\u0001May be called by a proxy account to remove a call they previously announced and return0the deposit.\u0000�The dispatch origin for this call must be _Signed_.\u0000,Parameters:\r\u0001- `real`: The account that the proxy will make a call on behalf of.\u0015\u0001- `call_hash`: The hash of the call to be made by the `real` account.Lreject_announcement\b\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001$call_hash4\u00014CallHashOf<T>\u0000\b(�Remove the given announcement of a delegate.\u0000a\u0001May be called by a target (proxied) account to remove a call that one of their delegates%\u0001(`delegate`) has announced they want to execute. The deposit is returned.\u0000�The dispatch origin for this call must be _Signed_.\u0000,Parameters:�- `delegate`: The account that previously announced the call.�- `call_hash`: The hash of the call to be made.<proxy_announced\u0010\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0010real�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001@force_proxy_type�\u0005\u0001POption<T::ProxyType>\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\t,M\u0001Dispatch the given `call` from an account that the sender is authorized for through0`add_proxy`.\u0000�Removes any corresponding announcement(s).\u0000�The dispatch origin for this call must be _Signed_.\u0000,Parameters:\r\u0001- `real`: The account that the proxy will make a call on behalf of.a\u0001- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.�- `call`: The call to be made by the `real` account.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\u0004\u0018Option\u0004\u0004T\u0001I\u0002\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000I\u0002\u0000\u0000\u0001\u0000\u0000�\u0005\f4pallet_assets\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001�\u0018create\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,min_balance\u0018\u0001(T::Balance\u0000\u0000L�Issue a new class of fungible assets from a public origin.\u0000%\u0001This new asset class has no assets initially and its owner is the origin.\u0000a\u0001The origin must conform to the configured `CreateOrigin` and have sufficient funds free.\u0000�Funds of sender are reserved by `AssetDeposit`.\u0000,Parameters:Y\u0001- `id`: The identifier of the new asset. This must not be currently in use to identify1\u0001an existing asset. If [`NextAssetId`] is set, then this must be equal to it.Y\u0001- `admin`: The admin of this class of assets. The admin is the initial address of each�member of the asset class's admin team.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.\u0000�Emits `Created` event when successful.\u00008Weight: `O(1)`0force_create\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001,min_balance�\u0001(T::Balance\u0000\u0001L�Issue a new class of fungible assets from a privileged origin.\u0000�This new asset class has no assets initially.\u0000�The origin must conform to `ForceOrigin`.\u0000�Unlike `create`, no funds are reserved.\u0000Y\u0001- `id`: The identifier of the new asset. This must not be currently in use to identify1\u0001an existing asset. If [`NextAssetId`] is set, then this must be equal to it.Y\u0001- `owner`: The owner of this class of assets. The owner has full superuser permissions%\u0001over this asset, but may later change and configure the permissions using�`transfer_ownership` and `set_team`.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.\u0000�Emits `ForceCreated` event when successful.\u00008Weight: `O(1)`4start_destroy\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0002$�Start the process of destroying a fungible asset class.\u0000Y\u0001`start_destroy` is the first in a series of extrinsics that should be called, to allowxdestruction of an asset class.\u0000Q\u0001The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.@destroy_accounts\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u00030�Destroy all accounts associated with a given asset.\u0000]\u0001`destroy_accounts` should only be called after `start_destroy` has been called, and the�asset is in a `Destroying` state.\u0000]\u0001Due to weight restrictions, this function may need to be called multiple times to fully1\u0001destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each call emits the `Event::DestroyedAccounts` event.Ddestroy_approvals\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u00040a\u0001Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).\u0000a\u0001`destroy_approvals` should only be called after `start_destroy` has been called, and the�asset is in a `Destroying` state.\u0000]\u0001Due to weight restrictions, this function may need to be called multiple times to fully9\u0001destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each call emits the `Event::DestroyedApprovals` event.8finish_destroy\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0005(�Complete destroying asset and unreserve currency.\u0000U\u0001`finish_destroy` should only be called after `start_destroy` has been called, and theY\u0001asset is in a `Destroying` state. All accounts or approvals should be destroyed before\u0014hand.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each successful call emits the `Event::Destroyed` event.\u0010mint\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001,beneficiary�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u00060�Mint assets of a particular class.\u00009\u0001The origin must be Signed and the sender must be the Issuer of the asset `id`.\u0000�- `id`: The identifier of the asset to have some amount minted.\r\u0001- `beneficiary`: The account to be credited with the minted assets.�- `amount`: The amount of the asset to be minted.\u0000�Emits `Issued` event when successful.\u00008Weight: `O(1)`U\u0001Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.\u0010burn\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0007<E\u0001Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.\u00005\u0001Origin must be Signed and the sender should be the Manager of the asset `id`.\u0000�Bails with `NoAccount` if the `who` is already dead.\u0000�- `id`: The identifier of the asset to have some amount burned.�- `who`: The account to be debited from.)\u0001- `amount`: The maximum amount by which `who`'s balance should be reduced.\u0000Q\u0001Emits `Burned` with the actual amount burned. If this takes the balance to below the9\u0001minimum for the asset, then the amount burned is increased to take it to zero.\u00008Weight: `O(1)`\t\u0001Modes: Post-existence of `who`; Pre & post Zombie-status of `who`. transfer\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\bH�Move some assets from the sender account to another.\u0000XOrigin must be Signed.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `target`: The account to be credited.Q\u0001- `amount`: The amount by which the sender's balance of assets should be reduced anda\u0001`target`'s balance increased. The amount actually transferred may be slightly greater in]\u0001the case that the transfer would otherwise take the sender balance above zero but below�the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of$`target`.Ltransfer_keep_alive\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\tHY\u0001Move some assets from the sender account to another, keeping the sender account alive.\u0000XOrigin must be Signed.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `target`: The account to be credited.Q\u0001- `amount`: The amount by which the sender's balance of assets should be reduced anda\u0001`target`'s balance increased. The amount actually transferred may be slightly greater in]\u0001the case that the transfer would otherwise take the sender balance above zero but below�the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of$`target`.8force_transfer\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018source�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\nL�Move some assets from one account to another.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `source`: The account to be debited.�- `dest`: The account to be credited.Y\u0001- `amount`: The amount by which the `source`'s balance of assets should be reduced andY\u0001`dest`'s balance increased. The amount actually transferred may be slightly greater inM\u0001the case that the transfer would otherwise take the `source` balance above zero but�below the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of\u001c`dest`.\u0018freeze\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000b0U\u0001Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`M\u0001must already exist as an entry in `Account`s of the asset. If you want to freeze an�account that does not have an entry, use `touch_other` first.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `who`: The account to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`\u0010thaw\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\f(�Allow unprivileged transfers to and from an account again.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `who`: The account to be unfrozen.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`0freeze_asset\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\r$�Disallow further unprivileged transfers for the asset class.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`(thaw_asset\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u000e$�Allow unprivileged transfers for the asset again.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000�- `id`: The identifier of the asset to be thawed.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`Htransfer_ownership\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000f(tChange the Owner of an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�- `id`: The identifier of the asset.�- `owner`: The new Owner of this asset.\u0000TEmits `OwnerChanged`.\u00008Weight: `O(1)` set_team\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00100�Change the Issuer, Admin and Freezer of an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `issuer`: The new Issuer of this asset.�- `admin`: The new Admin of this asset.�- `freezer`: The new Freezer of this asset.\u0000PEmits `TeamChanged`.\u00008Weight: `O(1)`0set_metadata\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0011@xSet the metadata for an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�Funds of sender are reserved according to the formula:Q\u0001`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into�account any already reserved funds.\u0000�- `id`: The identifier of the asset to update.M\u0001- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.M\u0001- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.-\u0001- `decimals`: The number of decimals this asset uses to represent one unit.\u0000PEmits `MetadataSet`.\u00008Weight: `O(1)`8clear_metadata\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0012,�Clear the metadata for an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�Any deposit is freed for the asset owner.\u0000�- `id`: The identifier of the asset to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`Hforce_set_metadata\u0014\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u00138�Force the metadata for an asset to some value.\u0000lOrigin must be ForceOrigin.\u0000hAny deposit is left alone.\u0000�- `id`: The identifier of the asset to update.M\u0001- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.M\u0001- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.-\u0001- `decimals`: The number of decimals this asset uses to represent one unit.\u0000PEmits `MetadataSet`.\u0000Q\u0001Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.Pforce_clear_metadata\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0014,�Clear the metadata for an asset.\u0000lOrigin must be ForceOrigin.\u0000`Any deposit is returned.\u0000�- `id`: The identifier of the asset to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`Hforce_asset_status \u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,min_balance�\u0001(T::Balance\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0015X�Alter the attributes of a given asset.\u0000tOrigin must be `ForceOrigin`.\u0000�- `id`: The identifier of the asset.�- `owner`: The new Owner of this asset.�- `issuer`: The new Issuer of this asset.�- `admin`: The new Admin of this asset.�- `freezer`: The new Freezer of this asset.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.Q\u0001- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficientM\u0001value to account for the state bloat associated with its balance storage. If set toU\u0001`true`, then non-zero balances may be stored without a `consumer` reference (and thusM\u0001an ED in the Balances pallet or whatever else is used to control user-account state growth).=\u0001- `is_frozen`: Whether this asset class is frozen except for permissioned/admin4instructions.\u0000�Emits `AssetStatusChanged` with the identity of the asset.\u00008Weight: `O(1)`@approve_transfer\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0016P-\u0001Approve an amount of asset for transfer by a delegated third-party account.\u0000XOrigin must be Signed.\u0000M\u0001Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing accountU\u0001for the purpose of holding the approval. If some non-zero amount of assets is alreadyI\u0001approved from signing account to `delegate`, then it is topped up or unreserved toTmeet the right value.\u0000E\u0001NOTE: The signing account does not need to own `amount` of assets at the point ofDmaking this call.\u0000�- `id`: The identifier of the asset.\r\u0001- `delegate`: The account to delegate permission to transfer asset.I\u0001- `amount`: The amount of asset that may be transferred by `delegate`. If there is�already an approval in place, then this acts additively.\u0000�Emits `ApprovedTransfer` on success.\u00008Weight: `O(1)`<cancel_approval\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00174I\u0001Cancel all of some asset approved for delegated transfer by a third-party account.\u0000=\u0001Origin must be Signed and there must be an approval in place between signer and,`delegate`.\u0000I\u0001Unreserves any deposit previously reserved by `approve_transfer` for the approval.\u0000�- `id`: The identifier of the asset.\u0005\u0001- `delegate`: The account delegated permission to transfer asset.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Tforce_cancel_approval\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00184I\u0001Cancel all of some asset approved for delegated transfer by a third-party account.\u0000I\u0001Origin must be either ForceOrigin or Signed origin with the signer being the Adminhaccount of the asset `id`.\u0000I\u0001Unreserves any deposit previously reserved by `approve_transfer` for the approval.\u0000�- `id`: The identifier of the asset.\u0005\u0001- `delegate`: The account delegated permission to transfer asset.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Dtransfer_approved\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,destination�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0019HM\u0001Transfer some asset balance from a previously delegated account to some third-party account.\u0000I\u0001Origin must be Signed and there must be an approval in place by the `owner` to the\u001csigner.\u0000Y\u0001If the entire amount approved for transfer is transferred, then any deposit previously�reserved by `approve_transfer` is unreserved.\u0000�- `id`: The identifier of the asset.a\u0001- `owner`: The account which previously approved for a transfer of at least `amount` and�from which the asset balance will be withdrawn.a\u0001- `destination`: The account to which the asset balance of `amount` will be transferred.�- `amount`: The amount of assets to transfer.\u0000�Emits `TransferredApproved` on success.\u00008Weight: `O(1)`\u0014touch\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u001a$�Create an asset account for non-provider assets.\u0000�A deposit will be taken from the signer account.\u0000]\u0001- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit8  to be taken.\t\u0001- `id`: The identifier of the asset for the account to be created.\u0000�Emits `Touched` event when successful.\u0018refund\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001(allow_burn \u0001\u0010bool\u0000\u001b(Y\u0001Return the deposit (if any) of an asset account or a consumer reference (if any) of an account.\u0000hThe origin must be Signed.\u0000=\u0001- `id`: The identifier of the asset for which the caller would like the deposit,  refunded.]\u0001- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.\u0000�Emits `Refunded` event when successful.<set_min_balance\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001,min_balance\u0018\u0001(T::Balance\u0000\u001c0�Sets the minimum balance of an asset.\u0000!\u0001Only works if there aren't any accounts that are holding the asset or if�the new value of `min_balance` is less than the old one.\u0000�Origin must be Signed and the sender has to be the Owner of the,asset `id`.\u0000�- `id`: The identifier of the asset.�- `min_balance`: The new value of `min_balance`.\u0000�Emits `AssetMinBalanceChanged` event when successful.,touch_other\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001d(�Create an asset account for `who`.\u0000�A deposit will be taken from the signer account.\u0000a\u0001- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account�  must have sufficient funds for a deposit to be taken.\t\u0001- `id`: The identifier of the asset for the account to be created.�- `who`: The account to be created.\u0000�Emits `Touched` event when successful.0refund_other\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001e(]\u0001Return the deposit (if any) of a target asset account. Useful if you are the depositor.\u0000]\u0001The origin must be Signed and either the account owner, depositor, or asset `Admin`. Ina\u0001order to burn a non-zero balance of the asset, the caller must be the account and should4use `refund`.\u0000\u0019\u0001- `id`: The identifier of the asset for the account holding a deposit.|- `who`: The account to refund.\u0000�Emits `Refunded` event when successful.\u0014block\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001f(Y\u0001Disallow further unprivileged transfers of an asset `id` to and from an account `who`.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the account's asset.�- `who`: The account to be unblocked.\u0000@Emits `Blocked`.\u00008Weight: `O(1)`0transfer_all\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(keep_alive \u0001\u0010bool\u0000 @\u001d\u0001Transfer the entire transferable balance from the caller asset account.\u0000Y\u0001NOTE: This function only attempts to transfer _transferable_ balances. This means that=\u0001any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be]\u0001transferred by this function. To ensure that this function results in a killed account,E\u0001you might need to prepare the account by removing any reference counters, storage@deposits, etc...\u0000�The dispatch origin of this call must be Signed.\u0000\u0019\u0001- `id`: The identifier of the asset for the account holding a deposit.�- `dest`: The recipient of the transfer.Y\u0001- `keep_alive`: A boolean to determine if the `transfer_all` operation should send allM\u0001  of the funds the asset account has, causing the sender asset account to be killedE\u0001  (false), or transfer everything except at least the minimum balance, which will�  guarantee to keep the sender asset account alive (true).\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\f8pallet_uniques\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001h\u0018create\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0000@\t\u0001Issue a new collection of non-fungible items from a public origin.\u0000\u001d\u0001This new collection has no items initially and its owner is the origin.\u0000a\u0001The origin must conform to the configured `CreateOrigin` and have sufficient funds free.\u0000�`ItemDeposit` funds of sender are reserved.\u0000,Parameters:a\u0001- `collection`: The identifier of the new collection. This must not be currently in use.E\u0001- `admin`: The admin of this collection. The admin is the initial address of each�member of the collection's admin team.\u0000�Emits `Created` event when successful.\u00008Weight: `O(1)`0force_create\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00010free_holding \u0001\u0010bool\u0000\u0001D\u0019\u0001Issue a new collection of non-fungible items from a privileged origin.\u0000�This new collection has no items initially.\u0000�The origin must conform to `ForceOrigin`.\u0000�Unlike `create`, no funds are reserved.\u0000I\u0001- `collection`: The identifier of the new item. This must not be currently in use.9\u0001- `owner`: The owner of this collection of items. The owner has full superuser4  permissions!\u0001over this item, but may later change and configure the permissions using�`transfer_ownership` and `set_team`.\u0000�Emits `ForceCreated` event when successful.\u00008Weight: `O(1)`\u001cdestroy\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u001cwitness�\u0005\u00018DestroyWitness\u0000\u0002<�Destroy a collection of fungible items.\u0000]\u0001The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be thehowner of the `collection`.\u0000\u0005\u0001- `collection`: The identifier of the collection to be destroyed.1\u0001- `witness`: Information on the items minted in the collection. This must be correct.\u0000�Emits `Destroyed` event when successful.\u0000dWeight: `O(n + m)` where:T- `n = witness.items`x- `m = witness.item_metadatas`h- `a = witness.attributes`\u0010mint\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0003,�Mint an item of a particular collection.\u0000A\u0001The origin must be Signed and the sender must be the Issuer of the `collection`.\u0000�- `collection`: The collection of the item to be minted.�- `item`: The item value of the item to be minted.�- `beneficiary`: The initial owner of the minted item.\u0000�Emits `Issued` event when successful.\u00008Weight: `O(1)`\u0010burn\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001,check_owner�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\u0004<XDestroy a single item.\u0000�Origin must be Signed and the signing account must be either:�- the Admin of the `collection`;h- the Owner of the `item`;\u0000�- `collection`: The collection of the item to be burned.�- `item`: The item of the item to be burned.Q\u0001- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless thex  item is owned by this value.\u0000�Emits `Burned` with the actual amount burned.\u00008Weight: `O(1)`|Modes: `check_owner.is_some()`. transfer\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0005D�Move an item from the sender account to another.\u0000�This resets the approved account of the item.\u0000�Origin must be Signed and the signing account must be either:�- the Admin of the `collection`;h- the Owner of the `item`;5\u0001- the approved delegate for the `item` (in this case, the approval is reset).\u0000(Arguments:�- `collection`: The collection of the item to be transferred.�- `item`: The item of the item to be transferred.�- `dest`: The account to receive ownership of the item.\u0000PEmits `Transferred`.\u00008Weight: `O(1)`$redeposit\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014items]\u0002\u00018Vec<T::ItemId>\u0000\u0006D�Reevaluate the deposits on some items.\u00005\u0001Origin must be Signed and the sender should be the Owner of the `collection`.\u0000�- `collection`: The collection to be frozen.)\u0001- `items`: The items of the collection whose deposits will be reevaluated.\u0000-\u0001NOTE: This exists as a best-effort function. Any items which are unknown or9\u0001in the case that the owner account does not have reservable funds to pay for aM\u0001deposit increase are ignored. Generally the owner isn't going to call this on itemsU\u0001whose existing deposit is less than the refreshed deposit as it would only cost them,xso it's of little consequence.\u0000Y\u0001It will still return an error in the case that the collection is unknown of the signerpis not permitted to call it.\u0000`Weight: `O(items.len())`\u0018freeze\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0007(�Disallow further unprivileged transfer of an item.\u0000=\u0001Origin must be Signed and the sender should be the Freezer of the `collection`.\u0000�- `collection`: The collection of the item to be frozen.�- `item`: The item of the item to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`\u0010thaw\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\b(�Re-allow unprivileged transfer of an item.\u0000=\u0001Origin must be Signed and the sender should be the Freezer of the `collection`.\u0000�- `collection`: The collection of the item to be thawed.�- `item`: The item of the item to be thawed.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`Dfreeze_collection\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\t$�Disallow further unprivileged transfers for a whole collection.\u0000=\u0001Origin must be Signed and the sender should be the Freezer of the `collection`.\u0000�- `collection`: The collection to be frozen.\u0000dEmits `CollectionFrozen`.\u00008Weight: `O(1)`<thaw_collection\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\n$�Re-allow unprivileged transfers for a whole collection.\u00005\u0001Origin must be Signed and the sender should be the Admin of the `collection`.\u0000�- `collection`: The collection to be thawed.\u0000dEmits `CollectionThawed`.\u00008Weight: `O(1)`Htransfer_ownership\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001$new_owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000b,�Change the Owner of a collection.\u00005\u0001Origin must be Signed and the sender should be the Owner of the `collection`.\u0000�- `collection`: The collection whose owner should be changed.\t\u0001- `owner`: The new Owner of this collection. They must have calledI\u0001  `set_accept_ownership` with `collection` in order for this operation to succeed.\u0000TEmits `OwnerChanged`.\u00008Weight: `O(1)` set_team\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\f0�Change the Issuer, Admin and Freezer of a collection.\u00005\u0001Origin must be Signed and the sender should be the Owner of the `collection`.\u0000�- `collection`: The collection whose team should be changed.�- `issuer`: The new Issuer of this collection.�- `admin`: The new Admin of this collection.�- `freezer`: The new Freezer of this collection.\u0000PEmits `TeamChanged`.\u00008Weight: `O(1)`@approve_transfer\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\r8\u0015\u0001Approve an item to be transferred by a delegated third-party account.\u0000M\u0001The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be�either the owner of the `item` or the admin of the collection.\u0000E\u0001- `collection`: The collection of the item to be approved for delegated transfer.\u0015\u0001- `item`: The item of the item to be approved for delegated transfer.\u0019\u0001- `delegate`: The account to delegate permission to transfer the item.\u0000\u0019\u0001Important NOTE: The `approved` account gets reset after each transfer.\u0000�Emits `ApprovedTransfer` on success.\u00008Weight: `O(1)`<cancel_approval\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001Pmaybe_check_delegate�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\u000e@\u0011\u0001Cancel the prior approval for the transfer of an item by a delegate.\u0000XOrigin must be either:T- the `Force` origin;�- `Signed` with the signer being the Admin of the `collection`;�- `Signed` with the signer being the Owner of the `item`;\u0000(Arguments:=\u0001- `collection`: The collection of the item of whose approval will be cancelled.\r\u0001- `item`: The item of the item of whose approval will be cancelled.Q\u0001- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to�  which permission of transfer is delegated.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Dforce_item_status\u001c\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00010free_holding \u0001\u0010bool\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u000f@�Alter the attributes of a given item.\u0000tOrigin must be `ForceOrigin`.\u0000�- `collection`: The identifier of the item.�- `owner`: The new Owner of this item.�- `issuer`: The new Issuer of this item.�- `admin`: The new Admin of this item.�- `freezer`: The new Freezer of this item.Q\u0001- `free_holding`: Whether a deposit is taken for holding an item of this collection.9\u0001- `is_frozen`: Whether this collection is frozen except for permissioned/admin4instructions.\u0000�Emits `ItemStatusChanged` with the identity of the item.\u00008Weight: `O(1)`4set_attribute\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\fkeye\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0001\u0014valuei\u0002\u0001tBoundedVec<u8, T::ValueLimit>\u0000\u0010D�Set an attribute for a collection or item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the4`collection`.\u0000Q\u0001If the origin is Signed, then funds of signer are reserved according to the formula:)\u0001`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into�account any already reserved funds.\u00009\u0001- `collection`: The identifier of the collection whose item's metadata to set.\u0005\u0001- `maybe_item`: The identifier of the item whose metadata to set.�- `key`: The key of the attribute.�- `value`: The value to which to set the attribute.\u0000TEmits `AttributeSet`.\u00008Weight: `O(1)`<clear_attribute\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001\fkeye\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u00118�Clear an attribute for a collection or item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the4`collection`.\u0000�Any deposit is freed for the collection's owner.\u0000A\u0001- `collection`: The identifier of the collection whose item's metadata to clear.\r\u0001- `maybe_item`: The identifier of the item whose metadata to clear.�- `key`: The key of the attribute.\u0000dEmits `AttributeCleared`.\u00008Weight: `O(1)`0set_metadata\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010dataY\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0012DtSet the metadata for an item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the4`collection`.\u0000Q\u0001If the origin is Signed, then funds of signer are reserved according to the formula:�`MetadataDepositBase + DepositPerByte * data.len` taking into�account any already reserved funds.\u00009\u0001- `collection`: The identifier of the collection whose item's metadata to set.�- `item`: The identifier of the item whose metadata to set.M\u0001- `data`: The general information of this item. Limited in length by `StringLimit`.5\u0001- `is_frozen`: Whether the metadata should be frozen against further changes.\u0000PEmits `MetadataSet`.\u00008Weight: `O(1)`8clear_metadata\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u00134|Clear the metadata for an item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the\u001c`item`.\u0000�Any deposit is freed for the collection's owner.\u0000A\u0001- `collection`: The identifier of the collection whose item's metadata to clear.�- `item`: The identifier of the item whose metadata to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`\\set_collection_metadata\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010dataY\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0014@�Set the metadata for a collection.\u0000U\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner ofDthe `collection`.\u0000Y\u0001If the origin is `Signed`, then funds of signer are reserved according to the formula:�`MetadataDepositBase + DepositPerByte * data.len` taking into�account any already reserved funds.\u0000\u0011\u0001- `collection`: The identifier of the item whose metadata to update.M\u0001- `data`: The general information of this item. Limited in length by `StringLimit`.5\u0001- `is_frozen`: Whether the metadata should be frozen against further changes.\u0000xEmits `CollectionMetadataSet`.\u00008Weight: `O(1)`dclear_collection_metadata\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u00150�Clear the metadata for a collection.\u0000U\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner ofDthe `collection`.\u0000�Any deposit is freed for the collection's owner.\u0000%\u0001- `collection`: The identifier of the collection whose metadata to clear.\u0000�Emits `CollectionMetadataCleared`.\u00008Weight: `O(1)`Pset_accept_ownership\u0004\u0001@maybe_collectiona\u0002\u0001\\Option<T::CollectionId>\u0000\u0016(\u0011\u0001Set (or reset) the acceptance of ownership for a particular account.\u0000a\u0001Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have aLprovider reference.\u0000Q\u0001- `maybe_collection`: The identifier of the collection whose ownership the signer isa\u0001  willing to accept, or if `None`, an indication that the signer is willing to accept no\\  ownership transferal.\u0000�Emits `OwnershipAcceptanceChanged`.dset_collection_max_supply\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(max_supply\u0010\u0001\fu32\u0000\u0017,�Set the maximum amount of items a collection could have.\u0000U\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner ofDthe `collection`.\u0000�Note: This function can only succeed once per collection.\u0000�- `collection`: The identifier of the collection to change.\u0011\u0001- `max_supply`: The maximum amount of items a collection could have.\u0000�Emits `CollectionMaxSupplySet` event when successful.$set_price\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014price�\u0005\u0001\\Option<ItemPrice<T, I>>\u0000\u0001Dwhitelisted_buyer�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\u0018,�Set (or reset) the price for an item.\u0000\u0001\u0001Origin must be Signed and must be the owner of the asset `item`.\u0000�- `collection`: The collection of the item.�- `item`: The item to set the price for.\r\u0001- `price`: The price for the item. Pass `None`, to reset the price.�- `buyer`: Restricts the buy operation to a specific account.\u0000�Emits `ItemPriceSet` on success if the price is not `None`.�Emits `ItemPriceRemoved` on success if the price is `None`. buy_item\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001$bid_price\u0018\u0001<ItemPrice<T, I>\u0000\u0019$�Allows to buy an item if it's up for sale.\u0000�Origin must be Signed and must not be the owner of the `item`.\u0000�- `collection`: The collection of the item.�- `item`: The item the sender wants to buy.�- `bid_price`: The price the sender is willing to pay.\u0000xEmits `ItemBought` on success.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0005\f8pallet_uniques\u0014types8DestroyWitness\u0000\u0000\f\u0001\u0014items�\u0001\fu32\u0000\u00018item_metadatas�\u0001\fu32\u0000\u0001(attributes�\u0001\fu32\u0000\u0000�\u0005\u0004\u0018Option\u0004\u0004T\u0001�\u0003\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0003\u0000\u0000\u0001\u0000\u0000�\u0005\u0004\u0018Option\u0004\u0004T\u0001\u0018\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000\u0018\u0000\u0000\u0001\u0000\u0000\u0001\u0006\f,pallet_nfts\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001�\u0018create\b\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018config\u0005\u0006\u0001dCollectionConfigFor<T, I>\u0000\u0000<\t\u0001Issue a new collection of non-fungible items from a public origin.\u0000\u001d\u0001This new collection has no items initially and its owner is the origin.\u0000%\u0001The origin must be Signed and the sender must have sufficient funds free.\u0000�`CollectionDeposit` funds of sender are reserved.\u0000,Parameters:E\u0001- `admin`: The admin of this collection. The admin is the initial address of each�member of the collection's admin team.\u0000�Emits `Created` event when successful.\u00008Weight: `O(1)`0force_create\b\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018config\u0005\u0006\u0001dCollectionConfigFor<T, I>\u0000\u0001<\u0019\u0001Issue a new collection of non-fungible items from a privileged origin.\u0000�This new collection has no items initially.\u0000�The origin must conform to `ForceOrigin`.\u0000�Unlike `create`, no funds are reserved.\u00009\u0001- `owner`: The owner of this collection of items. The owner has full superuserY\u0001  permissions over this item, but may later change and configure the permissions using�  `transfer_ownership` and `set_team`.\u0000�Emits `ForceCreated` event when successful.\u00008Weight: `O(1)`\u001cdestroy\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u001cwitness!\u0006\u00018DestroyWitness\u0000\u0002D�Destroy a collection of fungible items.\u0000]\u0001The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be thehowner of the `collection`.\u0000�NOTE: The collection must have 0 items to be destroyed.\u0000\u0005\u0001- `collection`: The identifier of the collection to be destroyed.1\u0001- `witness`: Information on the items minted in the collection. This must be correct.\u0000�Emits `Destroyed` event when successful.\u0000tWeight: `O(m + c + a)` where:x- `m = witness.item_metadatas`p- `c = witness.item_configs`h- `a = witness.attributes`\u0010mint\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u001cmint_to�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00010witness_data%\u0006\u0001�Option<MintWitness<T::ItemId, DepositBalanceOf<T, I>>>\u0000\u0003@�Mint an item of a particular collection.\u0000Q\u0001The origin must be Signed and the sender must comply with the `mint_settings` rules.\u0000�- `collection`: The collection of the item to be minted.�- `item`: An identifier of the new item.�- `mint_to`: Account into which the item will be minted.E\u0001- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the ownedY\u0001  item_id from that collection needs to be provided within the witness data object. Ifa\u0001  the mint price is set, then it should be additionally confirmed in the `witness_data`.\u0000Q\u0001Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.\u0000�Emits `Issued` event when successful.\u00008Weight: `O(1)`(force_mint\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u001cmint_to�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,item_config-\u0006\u0001(ItemConfig\u0000\u00044\u0005\u0001Mint an item of a particular collection from a privileged origin.\u0000]\u0001The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be thelIssuer of the `collection`.\u0000�- `collection`: The collection of the item to be minted.�- `item`: An identifier of the new item.�- `mint_to`: Account into which the item will be minted.�- `item_config`: A config of the new item.\u0000�Emits `Issued` event when successful.\u00008Weight: `O(1)`\u0010burn\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0005,XDestroy a single item.\u0000]\u0001The origin must conform to `ForceOrigin` or must be Signed and the signing account mustlbe the owner of the `item`.\u0000�- `collection`: The collection of the item to be burned.�- `item`: The item to be burned.\u0000<Emits `Burned`.\u00008Weight: `O(1)` transfer\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00068�Move an item from the sender account to another.\u0000�Origin must be Signed and the signing account must be either:h- the Owner of the `item`;5\u0001- the approved delegate for the `item` (in this case, the approval is reset).\u0000(Arguments:�- `collection`: The collection of the item to be transferred.�- `item`: The item to be transferred.�- `dest`: The account to receive ownership of the item.\u0000PEmits `Transferred`.\u00008Weight: `O(1)`$redeposit\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014items]\u0002\u00018Vec<T::ItemId>\u0000\u0007D�Re-evaluate the deposits on some items.\u00005\u0001Origin must be Signed and the sender should be the Owner of the `collection`.\u0000�- `collection`: The collection of the items to be reevaluated.)\u0001- `items`: The items of the collection whose deposits will be reevaluated.\u0000-\u0001NOTE: This exists as a best-effort function. Any items which are unknown or9\u0001in the case that the owner account does not have reservable funds to pay for aM\u0001deposit increase are ignored. Generally the owner isn't going to call this on itemsU\u0001whose existing deposit is less than the refreshed deposit as it would only cost them,xso it's of little consequence.\u0000Y\u0001It will still return an error in the case that the collection is unknown or the signerpis not permitted to call it.\u0000`Weight: `O(items.len())`Hlock_item_transfer\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\b(�Disallow further unprivileged transfer of an item.\u0000=\u0001Origin must be Signed and the sender should be the Freezer of the `collection`.\u0000�- `collection`: The collection of the item to be changed.�- `item`: The item to become non-transferable.\u0000lEmits `ItemTransferLocked`.\u00008Weight: `O(1)`Punlock_item_transfer\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\t(�Re-allow unprivileged transfer of an item.\u0000=\u0001Origin must be Signed and the sender should be the Freezer of the `collection`.\u0000�- `collection`: The collection of the item to be changed.�- `item`: The item to become transferable.\u0000tEmits `ItemTransferUnlocked`.\u00008Weight: `O(1)`<lock_collection\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u00014lock_settings\t\u0006\u0001HCollectionSettings\u0000\n0�Disallows specified settings for the whole collection.\u00005\u0001Origin must be Signed and the sender should be the Owner of the `collection`.\u0000�- `collection`: The collection to be locked.�- `lock_settings`: The settings to be locked.\u0000\u001d\u0001Note: it's possible to only lock(set) the setting, but not to unset it.\u0000dEmits `CollectionLocked`.\u00008Weight: `O(1)`Htransfer_ownership\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001$new_owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000b,�Change the Owner of a collection.\u00005\u0001Origin must be Signed and the sender should be the Owner of the `collection`.\u0000�- `collection`: The collection whose owner should be changed.\t\u0001- `owner`: The new Owner of this collection. They must have calledI\u0001  `set_accept_ownership` with `collection` in order for this operation to succeed.\u0000TEmits `OwnerChanged`.\u00008Weight: `O(1)` set_team\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0018issuer�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\u0001\u0014admin�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\u0001\u001cfreezer�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\f@�Change the Issuer, Admin and Freezer of a collection.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the4`collection`.\u0000Q\u0001Note: by setting the role to `None` only the `ForceOrigin` will be able to change itdafter to `Some(account)`.\u0000�- `collection`: The collection whose team should be changed.�- `issuer`: The new Issuer of this collection.�- `admin`: The new Admin of this collection.�- `freezer`: The new Freezer of this collection.\u0000PEmits `TeamChanged`.\u00008Weight: `O(1)`Xforce_collection_owner\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\r(�Change the Owner of a collection.\u0000tOrigin must be `ForceOrigin`.\u0000�- `collection`: The identifier of the collection.�- `owner`: The new Owner of this collection.\u0000TEmits `OwnerChanged`.\u00008Weight: `O(1)`\\force_collection_config\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0018config\u0005\u0006\u0001dCollectionConfigFor<T, I>\u0000\u000e(�Change the config of a collection.\u0000tOrigin must be `ForceOrigin`.\u0000�- `collection`: The identifier of the collection.�- `config`: The new config of this collection.\u0000�Emits `CollectionConfigChanged`.\u00008Weight: `O(1)`@approve_transfer\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00018maybe_deadlinea\u0002\u0001dOption<BlockNumberFor<T>>\u0000\u000f8\u0015\u0001Approve an item to be transferred by a delegated third-party account.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the\u001c`item`.\u0000E\u0001- `collection`: The collection of the item to be approved for delegated transfer.�- `item`: The item to be approved for delegated transfer.\u0019\u0001- `delegate`: The account to delegate permission to transfer the item.I\u0001- `maybe_deadline`: Optional deadline for the approval. Specified by providing the�\tnumber of blocks after which the approval will expire\u0000�Emits `TransferApproved` on success.\u00008Weight: `O(1)`<cancel_approval\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00108�Cancel one of the transfer approvals for a specific item.\u0000XOrigin must be either:T- the `Force` origin;�- `Signed` with the signer being the Owner of the `item`;\u0000(Arguments:=\u0001- `collection`: The collection of the item of whose approval will be cancelled.%\u0001- `item`: The item of the collection of whose approval will be cancelled.\u0001\u0001- `delegate`: The account that is going to loose their approval.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`pclear_all_transfer_approvals\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u00114�Cancel all the approvals of a specific item.\u0000XOrigin must be either:T- the `Force` origin;�- `Signed` with the signer being the Owner of the `item`;\u0000(Arguments:9\u0001- `collection`: The collection of the item of whose approvals will be cleared.!\u0001- `item`: The item of the collection of whose approvals will be cleared.\u0000�Emits `AllApprovalsCancelled` on success.\u00008Weight: `O(1)`Plock_item_properties\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u00014lock_metadata \u0001\u0010bool\u0000\u0001<lock_attributes \u0001\u0010bool\u0000\u0012D�Disallows changing the metadata or attributes of the item.\u0000A\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the AdminPof the `collection`.\u0000�- `collection`: The collection if the `item`.|- `item`: An item to be locked.\r\u0001- `lock_metadata`: Specifies whether the metadata should be locked.a\u0001- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespaceL  should be locked.\u0000]\u0001Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.E\u0001When the metadata or attributes are locked, it won't be possible the unlock them.\u0000tEmits `ItemPropertiesLocked`.\u00008Weight: `O(1)`4set_attribute\u0014\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001$namespacey\u0002\u0001�AttributeNamespace<T::AccountId>\u0000\u0001\fkeyi\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0001\u0014valueu\u0002\u0001tBoundedVec<u8, T::ValueLimit>\u0000\u0013X�Set an attribute for a collection or item.\u0000\u0001\u0001Origin must be Signed and must conform to the namespace ruleset:=\u0001- `CollectionOwner` namespace could be modified by the `collection` Admin only;Y\u0001- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`t  should be set in that case;U\u0001- `Account(AccountId)` namespace could be modified only when the `origin` was given aX  permission to do so;\u0000�The funds of `origin` are reserved according to the formula:-\u0001`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into�account any already reserved funds.\u00009\u0001- `collection`: The identifier of the collection whose item's metadata to set.\u0005\u0001- `maybe_item`: The identifier of the item whose metadata to set.�- `namespace`: Attribute's namespace.�- `key`: The key of the attribute.�- `value`: The value to which to set the attribute.\u0000TEmits `AttributeSet`.\u00008Weight: `O(1)`Lforce_set_attribute\u0018\u0001\u0018set_asm\u0002\u0001POption<T::AccountId>\u0000\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001$namespacey\u0002\u0001�AttributeNamespace<T::AccountId>\u0000\u0001\fkeyi\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0001\u0014valueu\u0002\u0001tBoundedVec<u8, T::ValueLimit>\u0000\u0014D�Force-set an attribute for a collection or item.\u0000tOrigin must be `ForceOrigin`.\u00009\u0001If the attribute already exists and it was set by another account, the deposit�will be returned to the previous owner.\u0000�- `set_as`: An optional owner of the attribute.9\u0001- `collection`: The identifier of the collection whose item's metadata to set.\u0005\u0001- `maybe_item`: The identifier of the item whose metadata to set.�- `namespace`: Attribute's namespace.�- `key`: The key of the attribute.�- `value`: The value to which to set the attribute.\u0000TEmits `AttributeSet`.\u00008Weight: `O(1)`<clear_attribute\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(maybe_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001$namespacey\u0002\u0001�AttributeNamespace<T::AccountId>\u0000\u0001\fkeyi\u0002\u0001lBoundedVec<u8, T::KeyLimit>\u0000\u0015<�Clear an attribute for a collection or item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the(attribute.\u0000�Any deposit is freed for the collection's owner.\u0000A\u0001- `collection`: The identifier of the collection whose item's metadata to clear.\r\u0001- `maybe_item`: The identifier of the item whose metadata to clear.�- `namespace`: Attribute's namespace.�- `key`: The key of the attribute.\u0000dEmits `AttributeCleared`.\u00008Weight: `O(1)`\\approve_item_attributes\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0016$-\u0001Approve item's attributes to be changed by a delegated third-party account.\u0000�Origin must be Signed and must be an owner of the `item`.\u0000�- `collection`: A collection of the item.�- `item`: The item that holds attributes.I\u0001- `delegate`: The account to delegate permission to change attributes of the item.\u0000�Emits `ItemAttributesApprovalAdded` on success.|cancel_item_attributes_approval\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cwitness1\u0006\u0001|CancelAttributesApprovalWitness\u0000\u0017(\u0011\u0001Cancel the previously provided approval to change item's attributes.\u0011\u0001All the previously set attributes by the `delegate` will be removed.\u0000�Origin must be Signed and must be an owner of the `item`.\u0000�- `collection`: Collection that the item is contained within.�- `item`: The item that holds attributes.�- `delegate`: The previously approved account to remove.\u0000�Emits `ItemAttributesApprovalRemoved` on success.0set_metadata\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0010datau\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u0018@tSet the metadata for an item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the4`collection`.\u0000Q\u0001If the origin is Signed, then funds of signer are reserved according to the formula:�`MetadataDepositBase + DepositPerByte * data.len` taking into�account any already reserved funds.\u00009\u0001- `collection`: The identifier of the collection whose item's metadata to set.�- `item`: The identifier of the item whose metadata to set.M\u0001- `data`: The general information of this item. Limited in length by `StringLimit`.\u0000`Emits `ItemMetadataSet`.\u00008Weight: `O(1)`8clear_metadata\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u00194|Clear the metadata for an item.\u0000]\u0001Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the4`collection`.\u0000�Any deposit is freed for the collection's owner.\u0000A\u0001- `collection`: The identifier of the collection whose item's metadata to clear.�- `item`: The identifier of the item whose metadata to clear.\u0000pEmits `ItemMetadataCleared`.\u00008Weight: `O(1)`\\set_collection_metadata\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010datau\u0002\u0001xBoundedVec<u8, T::StringLimit>\u0000\u001a<�Set the metadata for a collection.\u0000U\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin ofDthe `collection`.\u0000Y\u0001If the origin is `Signed`, then funds of signer are reserved according to the formula:�`MetadataDepositBase + DepositPerByte * data.len` taking into�account any already reserved funds.\u0000\u0011\u0001- `collection`: The identifier of the item whose metadata to update.M\u0001- `data`: The general information of this item. Limited in length by `StringLimit`.\u0000xEmits `CollectionMetadataSet`.\u00008Weight: `O(1)`dclear_collection_metadata\u0004\u0001(collection\u0010\u0001<T::CollectionId\u0000\u001b0�Clear the metadata for a collection.\u0000U\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin ofDthe `collection`.\u0000�Any deposit is freed for the collection's owner.\u0000%\u0001- `collection`: The identifier of the collection whose metadata to clear.\u0000�Emits `CollectionMetadataCleared`.\u00008Weight: `O(1)`Pset_accept_ownership\u0004\u0001@maybe_collectiona\u0002\u0001\\Option<T::CollectionId>\u0000\u001c(\u0011\u0001Set (or reset) the acceptance of ownership for a particular account.\u0000a\u0001Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have aLprovider reference.\u0000Q\u0001- `maybe_collection`: The identifier of the collection whose ownership the signer isa\u0001  willing to accept, or if `None`, an indication that the signer is willing to accept no\\  ownership transferal.\u0000�Emits `OwnershipAcceptanceChanged`.dset_collection_max_supply\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001(max_supply\u0010\u0001\fu32\u0000\u001d$�Set the maximum number of items a collection could have.\u0000U\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner ofDthe `collection`.\u0000�- `collection`: The identifier of the collection to change.\u0011\u0001- `max_supply`: The maximum number of items a collection could have.\u0000�Emits `CollectionMaxSupplySet` event when successful.Pupdate_mint_settings\b\u0001(collection\u0010\u0001<T::CollectionId\u0000\u00014mint_settings\u0011\u0006\u0001\u0005\u0001MintSettings<BalanceOf<T, I>, BlockNumberFor<T>, T::CollectionId>\u0000\u001e$TUpdate mint settings.\u0000M\u0001Origin must be either `ForceOrigin` or `Signed` and the sender should be the IssuerPof the `collection`.\u0000�- `collection`: The identifier of the collection to change.�- `mint_settings`: The new mint settings.\u0000�Emits `CollectionMintSettingsUpdated` event when successful.$set_price\u0010\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001\u0014price�\u0005\u0001\\Option<ItemPrice<T, I>>\u0000\u0001Dwhitelisted_buyer�\u0005\u0001pOption<AccountIdLookupOf<T>>\u0000\u001f,�Set (or reset) the price for an item.\u0000�Origin must be Signed and must be the owner of the `item`.\u0000�- `collection`: The collection of the item.�- `item`: The item to set the price for.\r\u0001- `price`: The price for the item. Pass `None`, to reset the price.�- `buyer`: Restricts the buy operation to a specific account.\u0000�Emits `ItemPriceSet` on success if the price is not `None`.�Emits `ItemPriceRemoved` on success if the price is `None`. buy_item\f\u0001(collection\u0010\u0001<T::CollectionId\u0000\u0001\u0010item\u0010\u0001$T::ItemId\u0000\u0001$bid_price\u0018\u0001<ItemPrice<T, I>\u0000 $�Allows to buy an item if it's up for sale.\u0000�Origin must be Signed and must not be the owner of the `item`.\u0000�- `collection`: The collection of the item.�- `item`: The item the sender wants to buy.�- `bid_price`: The price the sender is willing to pay.\u0000xEmits `ItemBought` on success. pay_tips\u0004\u0001\u0010tips5\u0006\u0001�BoundedVec<ItemTipOf<T, I>, T::MaxTips>\u0000!\u001c\\Allows to pay the tips.\u0000XOrigin must be Signed.\u0000T- `tips`: Tips array.\u0000�Emits `TipSent` on every tip transfer.,create_swap\u0018\u0001Hoffered_collection\u0010\u0001<T::CollectionId\u0000\u00010offered_item\u0010\u0001$T::ItemId\u0000\u0001Hdesired_collection\u0010\u0001<T::CollectionId\u0000\u0001Hmaybe_desired_itema\u0002\u0001DOption<T::ItemId>\u0000\u0001,maybe_price}\u0002\u0001�Option<PriceWithDirection<ItemPrice<T, I>>>\u0000\u0001 duration\u0010\u0001DBlockNumberFor<T>\u0000\"@Q\u0001Register a new atomic swap, declaring an intention to send an `item` in exchange for�`desired_item` from origin to target on the current blockchain.M\u0001The target can execute the swap during the specified `duration` of blocks (if set).�Additionally, the price could be set for the desired `item`.\u0000�Origin must be Signed and must be an owner of the `item`.\u0000�- `collection`: The collection of the item.�- `item`: The item an owner wants to give.�- `desired_collection`: The collection of the desired item.�- `desired_item`: The desired item an owner wants to receive.a\u0001- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.I\u0001- `duration`: A deadline for the swap. Specified by providing the number of blocks�\tafter which the swap will expire.\u0000|Emits `SwapCreated` on success.,cancel_swap\b\u0001Hoffered_collection\u0010\u0001<T::CollectionId\u0000\u00010offered_item\u0010\u0001$T::ItemId\u0000#$XCancel an atomic swap.\u0000XOrigin must be Signed.\u0015\u0001Origin must be an owner of the `item` if the deadline hasn't expired.\u0000�- `collection`: The collection of the item.�- `item`: The item an owner wants to give.\u0000�Emits `SwapCancelled` on success.(claim_swap\u0014\u0001<send_collection\u0010\u0001<T::CollectionId\u0000\u0001$send_item\u0010\u0001$T::ItemId\u0000\u0001Hreceive_collection\u0010\u0001<T::CollectionId\u0000\u00010receive_item\u0010\u0001$T::ItemId\u0000\u00014witness_price}\u0002\u0001�Option<PriceWithDirection<ItemPrice<T, I>>>\u0000$0TClaim an atomic swap.9\u0001This method executes a pending swap, that was created by a counterpart before.\u0000�Origin must be Signed and must be an owner of the `item`.\u0000�- `send_collection`: The collection of the item to be sent.�- `send_item`: The item to be sent.\t\u0001- `receive_collection`: The collection of the item to be received.�- `receive_item`: The item to be received.�- `witness_price`: A price that was previously agreed on.\u0000|Emits `SwapClaimed` on success.<mint_pre_signed\f\u0001$mint_dataA\u0006\u0001hBox<PreSignedMintOf<T, I>>\u0000\u0001$signatureE\u0006\u0001PT::OffchainSignature\u0000\u0001\u0018signer\u0000\u00010T::AccountId\u0000%4�Mint an item by providing the pre-signed approval.\u0000XOrigin must be Signed.\u0000]\u0001- `mint_data`: The pre-signed approval that consists of the information about the item,Q\u0001  its metadata, attributes, who can mint it (`None` for anyone) and until what block$  number.�- `signature`: The signature of the `data` object.9\u0001- `signer`: The `data` object's signer. Should be an Issuer of the collection.\u0000hEmits `Issued` on success.�Emits `AttributeSet` if the attributes were provided.�Emits `ItemMetadataSet` if the metadata was not empty.dset_attributes_pre_signed\f\u0001\u0010dataQ\u0006\u0001lPreSignedAttributesOf<T, I>\u0000\u0001$signatureE\u0006\u0001PT::OffchainSignature\u0000\u0001\u0018signer\u0000\u00010T::AccountId\u0000&4\u0001\u0001Set attributes for an item by providing the pre-signed approval.\u0000�Origin must be Signed and must be an owner of the `data.item`.\u0000I\u0001- `data`: The pre-signed approval that consists of the information about the item,�  attributes to update and until what block number.�- `signature`: The signature of the `data` object.Q\u0001- `signer`: The `data` object's signer. Should be an Admin of the collection for thex  `CollectionOwner` namespace.\u0000�Emits `AttributeSet` for each provided attribute.\u0019\u0001Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.�Emits `PreSignedAttributesSet` on success.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.\u0005\u0006\f,pallet_nfts\u0014types@CollectionConfig\f\u0014Price\u0001\u0018,BlockNumber\u0001\u00100CollectionId\u0001\u0010\u0000\f\u0001 settings\t\u0006\u0001HCollectionSettings\u0000\u0001(max_supplya\u0002\u0001,Option<u32>\u0000\u00014mint_settings\u0011\u0006\u0001�MintSettings<Price, BlockNumber, CollectionId>\u0000\u0000\t\u0006\f,pallet_nfts\u0014types BitFlags\u0004\u0004T\u0001\r\u0006\u0000\u0004\u00000\u0001DCollectionSetting\u0000\u0000\r\u0006\f,pallet_nfts\u0014typesDCollectionSetting\u0000\u0001\u0014DTransferableItems\u0000\u0001\u0000@UnlockedMetadata\u0000\u0002\u0000HUnlockedAttributes\u0000\u0004\u0000DUnlockedMaxSupply\u0000\b\u0000<DepositRequired\u0000\u0010\u0000\u0000\u0011\u0006\f,pallet_nfts\u0014types0MintSettings\f\u0014Price\u0001\u0018,BlockNumber\u0001\u00100CollectionId\u0001\u0010\u0000\u0014\u0001$mint_type\u0015\u0006\u0001XMintType<CollectionId>\u0000\u0001\u0014price�\u0005\u00014Option<Price>\u0000\u0001,start_blocka\u0002\u0001LOption<BlockNumber>\u0000\u0001$end_blocka\u0002\u0001LOption<BlockNumber>\u0000\u0001Tdefault_item_settings\u0019\u0006\u00010ItemSettings\u0000\u0000\u0015\u0006\f,pallet_nfts\u0014types MintType\u00040CollectionId\u0001\u0010\u0001\f\u0018Issuer\u0000\u0000\u0000\u0018Public\u0000\u0001\u0000 HolderOf\u0004\u0000\u0010\u00010CollectionId\u0000\u0002\u0000\u0000\u0019\u0006\f,pallet_nfts\u0014types BitFlags\u0004\u0004T\u0001\u001d\u0006\u0000\u0004\u00000\u0001,ItemSetting\u0000\u0000\u001d\u0006\f,pallet_nfts\u0014types,ItemSetting\u0000\u0001\f0Transferable\u0000\u0001\u0000@UnlockedMetadata\u0000\u0002\u0000HUnlockedAttributes\u0000\u0004\u0000\u0000!\u0006\f,pallet_nfts\u0014types8DestroyWitness\u0000\u0000\f\u00018item_metadatas�\u0001\fu32\u0000\u00010item_configs�\u0001\fu32\u0000\u0001(attributes�\u0001\fu32\u0000\u0000%\u0006\u0004\u0018Option\u0004\u0004T\u0001)\u0006\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000)\u0006\u0000\u0000\u0001\u0000\u0000)\u0006\f,pallet_nfts\u0014types,MintWitness\b\u0018ItemId\u0001\u0010\u001cBalance\u0001\u0018\u0000\b\u0001(owned_itema\u0002\u00018Option<ItemId>\u0000\u0001(mint_price�\u0005\u0001<Option<Balance>\u0000\u0000-\u0006\f,pallet_nfts\u0014types(ItemConfig\u0000\u0000\u0004\u0001 settings\u0019\u0006\u00010ItemSettings\u0000\u00001\u0006\f,pallet_nfts\u0014types|CancelAttributesApprovalWitness\u0000\u0000\u0004\u0001Haccount_attributes\u0010\u0001\fu32\u0000\u00005\u0006\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u00019\u0006\u0004S\u0000\u0000\u0004\u0000=\u0006\u0001\u0018Vec<T>\u0000\u00009\u0006\f,pallet_nfts\u0014types\u001cItemTip\u00100CollectionId\u0001\u0010\u0018ItemId\u0001\u0010$AccountId\u0001\u0000\u0018Amount\u0001\u0018\u0000\u0010\u0001(collection\u0010\u00010CollectionId\u0000\u0001\u0010item\u0010\u0001\u0018ItemId\u0000\u0001 receiver\u0000\u0001$AccountId\u0000\u0001\u0018amount\u0018\u0001\u0018Amount\u0000\u0000=\u0006\u0000\u0000\u00029\u0006\u0000A\u0006\f,pallet_nfts\u0014types4PreSignedMint\u00140CollectionId\u0001\u0010\u0018ItemId\u0001\u0010$AccountId\u0001\u0000 Deadline\u0001\u0010\u001cBalance\u0001\u0018\u0000\u001c\u0001(collection\u0010\u00010CollectionId\u0000\u0001\u0010item\u0010\u0001\u0018ItemId\u0000\u0001(attributes�\u0002\u0001\\Vec<(Vec<u8>, Vec<u8>)>\u0000\u0001 metadata8\u0001\u001cVec<u8>\u0000\u00010only_accountm\u0002\u0001DOption<AccountId>\u0000\u0001 deadline\u0010\u0001 Deadline\u0000\u0001(mint_price�\u0005\u0001<Option<Balance>\u0000\u0000E\u0006\b(sp_runtime8MultiSignature\u0000\u0001\f\u001cEd25519\u0004\u0000I\u0006\u0001Hed25519::Signature\u0000\u0000\u0000\u001cSr25519\u0004\u0000I\u0006\u0001Hsr25519::Signature\u0000\u0001\u0000\u0014Ecdsa\u0004\u0000M\u0006\u0001@ecdsa::Signature\u0000\u0002\u0000\u0000I\u0006\u0000\u0000\u0003@\u0000\u0000\u0000\b\u0000M\u0006\u0000\u0000\u0003A\u0000\u0000\u0000\b\u0000Q\u0006\f,pallet_nfts\u0014typesLPreSignedAttributes\u00100CollectionId\u0001\u0010\u0018ItemId\u0001\u0010$AccountId\u0001\u0000 Deadline\u0001\u0010\u0000\u0014\u0001(collection\u0010\u00010CollectionId\u0000\u0001\u0010item\u0010\u0001\u0018ItemId\u0000\u0001(attributes�\u0002\u0001\\Vec<(Vec<u8>, Vec<u8>)>\u0000\u0001$namespacey\u0002\u0001tAttributeNamespace<AccountId>\u0000\u0001 deadline\u0010\u0001 Deadline\u0000\u0000U\u0006\f4pallet_assets\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001�\u0018create\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,min_balance\u0018\u0001(T::Balance\u0000\u0000L�Issue a new class of fungible assets from a public origin.\u0000%\u0001This new asset class has no assets initially and its owner is the origin.\u0000a\u0001The origin must conform to the configured `CreateOrigin` and have sufficient funds free.\u0000�Funds of sender are reserved by `AssetDeposit`.\u0000,Parameters:Y\u0001- `id`: The identifier of the new asset. This must not be currently in use to identify1\u0001an existing asset. If [`NextAssetId`] is set, then this must be equal to it.Y\u0001- `admin`: The admin of this class of assets. The admin is the initial address of each�member of the asset class's admin team.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.\u0000�Emits `Created` event when successful.\u00008Weight: `O(1)`0force_create\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001,min_balance�\u0001(T::Balance\u0000\u0001L�Issue a new class of fungible assets from a privileged origin.\u0000�This new asset class has no assets initially.\u0000�The origin must conform to `ForceOrigin`.\u0000�Unlike `create`, no funds are reserved.\u0000Y\u0001- `id`: The identifier of the new asset. This must not be currently in use to identify1\u0001an existing asset. If [`NextAssetId`] is set, then this must be equal to it.Y\u0001- `owner`: The owner of this class of assets. The owner has full superuser permissions%\u0001over this asset, but may later change and configure the permissions using�`transfer_ownership` and `set_team`.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.\u0000�Emits `ForceCreated` event when successful.\u00008Weight: `O(1)`4start_destroy\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0002$�Start the process of destroying a fungible asset class.\u0000Y\u0001`start_destroy` is the first in a series of extrinsics that should be called, to allowxdestruction of an asset class.\u0000Q\u0001The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.@destroy_accounts\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u00030�Destroy all accounts associated with a given asset.\u0000]\u0001`destroy_accounts` should only be called after `start_destroy` has been called, and the�asset is in a `Destroying` state.\u0000]\u0001Due to weight restrictions, this function may need to be called multiple times to fully1\u0001destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each call emits the `Event::DestroyedAccounts` event.Ddestroy_approvals\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u00040a\u0001Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).\u0000a\u0001`destroy_approvals` should only be called after `start_destroy` has been called, and the�asset is in a `Destroying` state.\u0000]\u0001Due to weight restrictions, this function may need to be called multiple times to fully9\u0001destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each call emits the `Event::DestroyedApprovals` event.8finish_destroy\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0005(�Complete destroying asset and unreserve currency.\u0000U\u0001`finish_destroy` should only be called after `start_destroy` has been called, and theY\u0001asset is in a `Destroying` state. All accounts or approvals should be destroyed before\u0014hand.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each successful call emits the `Event::Destroyed` event.\u0010mint\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001,beneficiary�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u00060�Mint assets of a particular class.\u00009\u0001The origin must be Signed and the sender must be the Issuer of the asset `id`.\u0000�- `id`: The identifier of the asset to have some amount minted.\r\u0001- `beneficiary`: The account to be credited with the minted assets.�- `amount`: The amount of the asset to be minted.\u0000�Emits `Issued` event when successful.\u00008Weight: `O(1)`U\u0001Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.\u0010burn\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0007<E\u0001Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.\u00005\u0001Origin must be Signed and the sender should be the Manager of the asset `id`.\u0000�Bails with `NoAccount` if the `who` is already dead.\u0000�- `id`: The identifier of the asset to have some amount burned.�- `who`: The account to be debited from.)\u0001- `amount`: The maximum amount by which `who`'s balance should be reduced.\u0000Q\u0001Emits `Burned` with the actual amount burned. If this takes the balance to below the9\u0001minimum for the asset, then the amount burned is increased to take it to zero.\u00008Weight: `O(1)`\t\u0001Modes: Post-existence of `who`; Pre & post Zombie-status of `who`. transfer\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\bH�Move some assets from the sender account to another.\u0000XOrigin must be Signed.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `target`: The account to be credited.Q\u0001- `amount`: The amount by which the sender's balance of assets should be reduced anda\u0001`target`'s balance increased. The amount actually transferred may be slightly greater in]\u0001the case that the transfer would otherwise take the sender balance above zero but below�the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of$`target`.Ltransfer_keep_alive\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\tHY\u0001Move some assets from the sender account to another, keeping the sender account alive.\u0000XOrigin must be Signed.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `target`: The account to be credited.Q\u0001- `amount`: The amount by which the sender's balance of assets should be reduced anda\u0001`target`'s balance increased. The amount actually transferred may be slightly greater in]\u0001the case that the transfer would otherwise take the sender balance above zero but below�the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of$`target`.8force_transfer\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018source�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\nL�Move some assets from one account to another.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `source`: The account to be debited.�- `dest`: The account to be credited.Y\u0001- `amount`: The amount by which the `source`'s balance of assets should be reduced andY\u0001`dest`'s balance increased. The amount actually transferred may be slightly greater inM\u0001the case that the transfer would otherwise take the `source` balance above zero but�below the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of\u001c`dest`.\u0018freeze\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000b0U\u0001Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`M\u0001must already exist as an entry in `Account`s of the asset. If you want to freeze an�account that does not have an entry, use `touch_other` first.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `who`: The account to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`\u0010thaw\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\f(�Allow unprivileged transfers to and from an account again.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `who`: The account to be unfrozen.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`0freeze_asset\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\r$�Disallow further unprivileged transfers for the asset class.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`(thaw_asset\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u000e$�Allow unprivileged transfers for the asset again.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000�- `id`: The identifier of the asset to be thawed.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`Htransfer_ownership\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000f(tChange the Owner of an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�- `id`: The identifier of the asset.�- `owner`: The new Owner of this asset.\u0000TEmits `OwnerChanged`.\u00008Weight: `O(1)` set_team\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00100�Change the Issuer, Admin and Freezer of an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `issuer`: The new Issuer of this asset.�- `admin`: The new Admin of this asset.�- `freezer`: The new Freezer of this asset.\u0000PEmits `TeamChanged`.\u00008Weight: `O(1)`0set_metadata\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0011@xSet the metadata for an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�Funds of sender are reserved according to the formula:Q\u0001`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into�account any already reserved funds.\u0000�- `id`: The identifier of the asset to update.M\u0001- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.M\u0001- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.-\u0001- `decimals`: The number of decimals this asset uses to represent one unit.\u0000PEmits `MetadataSet`.\u00008Weight: `O(1)`8clear_metadata\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0012,�Clear the metadata for an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�Any deposit is freed for the asset owner.\u0000�- `id`: The identifier of the asset to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`Hforce_set_metadata\u0014\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u00138�Force the metadata for an asset to some value.\u0000lOrigin must be ForceOrigin.\u0000hAny deposit is left alone.\u0000�- `id`: The identifier of the asset to update.M\u0001- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.M\u0001- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.-\u0001- `decimals`: The number of decimals this asset uses to represent one unit.\u0000PEmits `MetadataSet`.\u0000Q\u0001Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.Pforce_clear_metadata\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0014,�Clear the metadata for an asset.\u0000lOrigin must be ForceOrigin.\u0000`Any deposit is returned.\u0000�- `id`: The identifier of the asset to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`Hforce_asset_status \u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,min_balance�\u0001(T::Balance\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0015X�Alter the attributes of a given asset.\u0000tOrigin must be `ForceOrigin`.\u0000�- `id`: The identifier of the asset.�- `owner`: The new Owner of this asset.�- `issuer`: The new Issuer of this asset.�- `admin`: The new Admin of this asset.�- `freezer`: The new Freezer of this asset.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.Q\u0001- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficientM\u0001value to account for the state bloat associated with its balance storage. If set toU\u0001`true`, then non-zero balances may be stored without a `consumer` reference (and thusM\u0001an ED in the Balances pallet or whatever else is used to control user-account state growth).=\u0001- `is_frozen`: Whether this asset class is frozen except for permissioned/admin4instructions.\u0000�Emits `AssetStatusChanged` with the identity of the asset.\u00008Weight: `O(1)`@approve_transfer\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0016P-\u0001Approve an amount of asset for transfer by a delegated third-party account.\u0000XOrigin must be Signed.\u0000M\u0001Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing accountU\u0001for the purpose of holding the approval. If some non-zero amount of assets is alreadyI\u0001approved from signing account to `delegate`, then it is topped up or unreserved toTmeet the right value.\u0000E\u0001NOTE: The signing account does not need to own `amount` of assets at the point ofDmaking this call.\u0000�- `id`: The identifier of the asset.\r\u0001- `delegate`: The account to delegate permission to transfer asset.I\u0001- `amount`: The amount of asset that may be transferred by `delegate`. If there is�already an approval in place, then this acts additively.\u0000�Emits `ApprovedTransfer` on success.\u00008Weight: `O(1)`<cancel_approval\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00174I\u0001Cancel all of some asset approved for delegated transfer by a third-party account.\u0000=\u0001Origin must be Signed and there must be an approval in place between signer and,`delegate`.\u0000I\u0001Unreserves any deposit previously reserved by `approve_transfer` for the approval.\u0000�- `id`: The identifier of the asset.\u0005\u0001- `delegate`: The account delegated permission to transfer asset.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Tforce_cancel_approval\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00184I\u0001Cancel all of some asset approved for delegated transfer by a third-party account.\u0000I\u0001Origin must be either ForceOrigin or Signed origin with the signer being the Adminhaccount of the asset `id`.\u0000I\u0001Unreserves any deposit previously reserved by `approve_transfer` for the approval.\u0000�- `id`: The identifier of the asset.\u0005\u0001- `delegate`: The account delegated permission to transfer asset.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Dtransfer_approved\u0010\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,destination�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0019HM\u0001Transfer some asset balance from a previously delegated account to some third-party account.\u0000I\u0001Origin must be Signed and there must be an approval in place by the `owner` to the\u001csigner.\u0000Y\u0001If the entire amount approved for transfer is transferred, then any deposit previously�reserved by `approve_transfer` is unreserved.\u0000�- `id`: The identifier of the asset.a\u0001- `owner`: The account which previously approved for a transfer of at least `amount` and�from which the asset balance will be withdrawn.a\u0001- `destination`: The account to which the asset balance of `amount` will be transferred.�- `amount`: The amount of assets to transfer.\u0000�Emits `TransferredApproved` on success.\u00008Weight: `O(1)`\u0014touch\u0004\u0001\bid�\u0001LT::AssetIdParameter\u0000\u001a$�Create an asset account for non-provider assets.\u0000�A deposit will be taken from the signer account.\u0000]\u0001- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit8  to be taken.\t\u0001- `id`: The identifier of the asset for the account to be created.\u0000�Emits `Touched` event when successful.\u0018refund\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001(allow_burn \u0001\u0010bool\u0000\u001b(Y\u0001Return the deposit (if any) of an asset account or a consumer reference (if any) of an account.\u0000hThe origin must be Signed.\u0000=\u0001- `id`: The identifier of the asset for which the caller would like the deposit,  refunded.]\u0001- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.\u0000�Emits `Refunded` event when successful.<set_min_balance\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001,min_balance\u0018\u0001(T::Balance\u0000\u001c0�Sets the minimum balance of an asset.\u0000!\u0001Only works if there aren't any accounts that are holding the asset or if�the new value of `min_balance` is less than the old one.\u0000�Origin must be Signed and the sender has to be the Owner of the,asset `id`.\u0000�- `id`: The identifier of the asset.�- `min_balance`: The new value of `min_balance`.\u0000�Emits `AssetMinBalanceChanged` event when successful.,touch_other\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001d(�Create an asset account for `who`.\u0000�A deposit will be taken from the signer account.\u0000a\u0001- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account�  must have sufficient funds for a deposit to be taken.\t\u0001- `id`: The identifier of the asset for the account to be created.�- `who`: The account to be created.\u0000�Emits `Touched` event when successful.0refund_other\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001e(]\u0001Return the deposit (if any) of a target asset account. Useful if you are the depositor.\u0000]\u0001The origin must be Signed and either the account owner, depositor, or asset `Admin`. Ina\u0001order to burn a non-zero balance of the asset, the caller must be the account and should4use `refund`.\u0000\u0019\u0001- `id`: The identifier of the asset for the account holding a deposit.|- `who`: The account to refund.\u0000�Emits `Refunded` event when successful.\u0014block\b\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001f(Y\u0001Disallow further unprivileged transfers of an asset `id` to and from an account `who`.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the account's asset.�- `who`: The account to be unblocked.\u0000@Emits `Blocked`.\u00008Weight: `O(1)`0transfer_all\f\u0001\bid�\u0001LT::AssetIdParameter\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(keep_alive \u0001\u0010bool\u0000 @\u001d\u0001Transfer the entire transferable balance from the caller asset account.\u0000Y\u0001NOTE: This function only attempts to transfer _transferable_ balances. This means that=\u0001any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be]\u0001transferred by this function. To ensure that this function results in a killed account,E\u0001you might need to prepare the account by removing any reference counters, storage@deposits, etc...\u0000�The dispatch origin of this call must be Signed.\u0000\u0019\u0001- `id`: The identifier of the asset for the account holding a deposit.�- `dest`: The recipient of the transfer.Y\u0001- `keep_alive`: A boolean to determine if the `transfer_all` operation should send allM\u0001  of the funds the asset account has, causing the sender asset account to be killedE\u0001  (false), or transfer everything except at least the minimum balance, which will�  guarantee to keep the sender asset account alive (true).\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.Y\u0006\f4pallet_assets\u0018pallet\u0010Call\b\u0004T\u0000\u0004I\u0000\u0001�\u0018create\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,min_balance\u0018\u0001(T::Balance\u0000\u0000L�Issue a new class of fungible assets from a public origin.\u0000%\u0001This new asset class has no assets initially and its owner is the origin.\u0000a\u0001The origin must conform to the configured `CreateOrigin` and have sufficient funds free.\u0000�Funds of sender are reserved by `AssetDeposit`.\u0000,Parameters:Y\u0001- `id`: The identifier of the new asset. This must not be currently in use to identify1\u0001an existing asset. If [`NextAssetId`] is set, then this must be equal to it.Y\u0001- `admin`: The admin of this class of assets. The admin is the initial address of each�member of the asset class's admin team.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.\u0000�Emits `Created` event when successful.\u00008Weight: `O(1)`0force_create\u0010\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001,min_balance�\u0001(T::Balance\u0000\u0001L�Issue a new class of fungible assets from a privileged origin.\u0000�This new asset class has no assets initially.\u0000�The origin must conform to `ForceOrigin`.\u0000�Unlike `create`, no funds are reserved.\u0000Y\u0001- `id`: The identifier of the new asset. This must not be currently in use to identify1\u0001an existing asset. If [`NextAssetId`] is set, then this must be equal to it.Y\u0001- `owner`: The owner of this class of assets. The owner has full superuser permissions%\u0001over this asset, but may later change and configure the permissions using�`transfer_ownership` and `set_team`.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.\u0000�Emits `ForceCreated` event when successful.\u00008Weight: `O(1)`4start_destroy\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0002$�Start the process of destroying a fungible asset class.\u0000Y\u0001`start_destroy` is the first in a series of extrinsics that should be called, to allowxdestruction of an asset class.\u0000Q\u0001The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.@destroy_accounts\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u00030�Destroy all accounts associated with a given asset.\u0000]\u0001`destroy_accounts` should only be called after `start_destroy` has been called, and the�asset is in a `Destroying` state.\u0000]\u0001Due to weight restrictions, this function may need to be called multiple times to fully1\u0001destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each call emits the `Event::DestroyedAccounts` event.Ddestroy_approvals\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u00040a\u0001Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).\u0000a\u0001`destroy_approvals` should only be called after `start_destroy` has been called, and the�asset is in a `Destroying` state.\u0000]\u0001Due to weight restrictions, this function may need to be called multiple times to fully9\u0001destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each call emits the `Event::DestroyedApprovals` event.8finish_destroy\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0005(�Complete destroying asset and unreserve currency.\u0000U\u0001`finish_destroy` should only be called after `start_destroy` has been called, and theY\u0001asset is in a `Destroying` state. All accounts or approvals should be destroyed before\u0014hand.\u0000M\u0001- `id`: The identifier of the asset to be destroyed. This must identify an existing   asset.\u0000�Each successful call emits the `Event::Destroyed` event.\u0010mint\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001,beneficiary�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u00060�Mint assets of a particular class.\u00009\u0001The origin must be Signed and the sender must be the Issuer of the asset `id`.\u0000�- `id`: The identifier of the asset to have some amount minted.\r\u0001- `beneficiary`: The account to be credited with the minted assets.�- `amount`: The amount of the asset to be minted.\u0000�Emits `Issued` event when successful.\u00008Weight: `O(1)`U\u0001Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.\u0010burn\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0007<E\u0001Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.\u00005\u0001Origin must be Signed and the sender should be the Manager of the asset `id`.\u0000�Bails with `NoAccount` if the `who` is already dead.\u0000�- `id`: The identifier of the asset to have some amount burned.�- `who`: The account to be debited from.)\u0001- `amount`: The maximum amount by which `who`'s balance should be reduced.\u0000Q\u0001Emits `Burned` with the actual amount burned. If this takes the balance to below the9\u0001minimum for the asset, then the amount burned is increased to take it to zero.\u00008Weight: `O(1)`\t\u0001Modes: Post-existence of `who`; Pre & post Zombie-status of `who`. transfer\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\bH�Move some assets from the sender account to another.\u0000XOrigin must be Signed.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `target`: The account to be credited.Q\u0001- `amount`: The amount by which the sender's balance of assets should be reduced anda\u0001`target`'s balance increased. The amount actually transferred may be slightly greater in]\u0001the case that the transfer would otherwise take the sender balance above zero but below�the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of$`target`.Ltransfer_keep_alive\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0018target�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\tHY\u0001Move some assets from the sender account to another, keeping the sender account alive.\u0000XOrigin must be Signed.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `target`: The account to be credited.Q\u0001- `amount`: The amount by which the sender's balance of assets should be reduced anda\u0001`target`'s balance increased. The amount actually transferred may be slightly greater in]\u0001the case that the transfer would otherwise take the sender balance above zero but below�the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of$`target`.8force_transfer\u0010\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0018source�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\nL�Move some assets from one account to another.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000\u0011\u0001- `id`: The identifier of the asset to have some amount transferred.�- `source`: The account to be debited.�- `dest`: The account to be credited.Y\u0001- `amount`: The amount by which the `source`'s balance of assets should be reduced andY\u0001`dest`'s balance increased. The amount actually transferred may be slightly greater inM\u0001the case that the transfer would otherwise take the `source` balance above zero but�below the minimum balance. Must be greater than zero.\u0000a\u0001Emits `Transferred` with the actual amount transferred. If this takes the source balance]\u0001to below the minimum for the asset, then the amount transferred is increased to take it to zero.\u00008Weight: `O(1)`Q\u0001Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of\u001c`dest`.\u0018freeze\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000b0U\u0001Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`M\u0001must already exist as an entry in `Account`s of the asset. If you want to freeze an�account that does not have an entry, use `touch_other` first.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `who`: The account to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`\u0010thaw\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\f(�Allow unprivileged transfers to and from an account again.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `who`: The account to be unfrozen.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`0freeze_asset\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\r$�Disallow further unprivileged transfers for the asset class.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.\u0000<Emits `Frozen`.\u00008Weight: `O(1)`(thaw_asset\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u000e$�Allow unprivileged transfers for the asset again.\u0000-\u0001Origin must be Signed and the sender should be the Admin of the asset `id`.\u0000�- `id`: The identifier of the asset to be thawed.\u0000<Emits `Thawed`.\u00008Weight: `O(1)`Htransfer_ownership\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u000f(tChange the Owner of an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�- `id`: The identifier of the asset.�- `owner`: The new Owner of this asset.\u0000TEmits `OwnerChanged`.\u00008Weight: `O(1)` set_team\u0010\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00100�Change the Issuer, Admin and Freezer of an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�- `id`: The identifier of the asset to be frozen.�- `issuer`: The new Issuer of this asset.�- `admin`: The new Admin of this asset.�- `freezer`: The new Freezer of this asset.\u0000PEmits `TeamChanged`.\u00008Weight: `O(1)`0set_metadata\u0010\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0011@xSet the metadata for an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�Funds of sender are reserved according to the formula:Q\u0001`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into�account any already reserved funds.\u0000�- `id`: The identifier of the asset to update.M\u0001- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.M\u0001- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.-\u0001- `decimals`: The number of decimals this asset uses to represent one unit.\u0000PEmits `MetadataSet`.\u00008Weight: `O(1)`8clear_metadata\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0012,�Clear the metadata for an asset.\u0000-\u0001Origin must be Signed and the sender should be the Owner of the asset `id`.\u0000�Any deposit is freed for the asset owner.\u0000�- `id`: The identifier of the asset to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`Hforce_set_metadata\u0014\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0010name8\u0001\u001cVec<u8>\u0000\u0001\u0018symbol8\u0001\u001cVec<u8>\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u00138�Force the metadata for an asset to some value.\u0000lOrigin must be ForceOrigin.\u0000hAny deposit is left alone.\u0000�- `id`: The identifier of the asset to update.M\u0001- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.M\u0001- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.-\u0001- `decimals`: The number of decimals this asset uses to represent one unit.\u0000PEmits `MetadataSet`.\u0000Q\u0001Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.Pforce_clear_metadata\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0014,�Clear the metadata for an asset.\u0000lOrigin must be ForceOrigin.\u0000`Any deposit is returned.\u0000�- `id`: The identifier of the asset to clear.\u0000`Emits `MetadataCleared`.\u00008Weight: `O(1)`Hforce_asset_status \u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018issuer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0014admin�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u001cfreezer�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,min_balance�\u0001(T::Balance\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0015X�Alter the attributes of a given asset.\u0000tOrigin must be `ForceOrigin`.\u0000�- `id`: The identifier of the asset.�- `owner`: The new Owner of this asset.�- `issuer`: The new Issuer of this asset.�- `admin`: The new Admin of this asset.�- `freezer`: The new Freezer of this asset.M\u0001- `min_balance`: The minimum balance of this new asset that any single account must=\u0001have. If an account's balance is reduced below this, then it collapses to zero.Q\u0001- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficientM\u0001value to account for the state bloat associated with its balance storage. If set toU\u0001`true`, then non-zero balances may be stored without a `consumer` reference (and thusM\u0001an ED in the Balances pallet or whatever else is used to control user-account state growth).=\u0001- `is_frozen`: Whether this asset class is frozen except for permissioned/admin4instructions.\u0000�Emits `AssetStatusChanged` with the identity of the asset.\u00008Weight: `O(1)`@approve_transfer\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0016P-\u0001Approve an amount of asset for transfer by a delegated third-party account.\u0000XOrigin must be Signed.\u0000M\u0001Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing accountU\u0001for the purpose of holding the approval. If some non-zero amount of assets is alreadyI\u0001approved from signing account to `delegate`, then it is topped up or unreserved toTmeet the right value.\u0000E\u0001NOTE: The signing account does not need to own `amount` of assets at the point ofDmaking this call.\u0000�- `id`: The identifier of the asset.\r\u0001- `delegate`: The account to delegate permission to transfer asset.I\u0001- `amount`: The amount of asset that may be transferred by `delegate`. If there is�already an approval in place, then this acts additively.\u0000�Emits `ApprovedTransfer` on success.\u00008Weight: `O(1)`<cancel_approval\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00174I\u0001Cancel all of some asset approved for delegated transfer by a third-party account.\u0000=\u0001Origin must be Signed and there must be an approval in place between signer and,`delegate`.\u0000I\u0001Unreserves any deposit previously reserved by `approve_transfer` for the approval.\u0000�- `id`: The identifier of the asset.\u0005\u0001- `delegate`: The account delegated permission to transfer asset.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Tforce_cancel_approval\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001 delegate�\u0003\u0001PAccountIdLookupOf<T>\u0000\u00184I\u0001Cancel all of some asset approved for delegated transfer by a third-party account.\u0000I\u0001Origin must be either ForceOrigin or Signed origin with the signer being the Adminhaccount of the asset `id`.\u0000I\u0001Unreserves any deposit previously reserved by `approve_transfer` for the approval.\u0000�- `id`: The identifier of the asset.\u0005\u0001- `delegate`: The account delegated permission to transfer asset.\u0000�Emits `ApprovalCancelled` on success.\u00008Weight: `O(1)`Dtransfer_approved\u0010\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0014owner�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001,destination�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0018amount�\u0001(T::Balance\u0000\u0019HM\u0001Transfer some asset balance from a previously delegated account to some third-party account.\u0000I\u0001Origin must be Signed and there must be an approval in place by the `owner` to the\u001csigner.\u0000Y\u0001If the entire amount approved for transfer is transferred, then any deposit previously�reserved by `approve_transfer` is unreserved.\u0000�- `id`: The identifier of the asset.a\u0001- `owner`: The account which previously approved for a transfer of at least `amount` and�from which the asset balance will be withdrawn.a\u0001- `destination`: The account to which the asset balance of `amount` will be transferred.�- `amount`: The amount of assets to transfer.\u0000�Emits `TransferredApproved` on success.\u00008Weight: `O(1)`\u0014touch\u0004\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u001a$�Create an asset account for non-provider assets.\u0000�A deposit will be taken from the signer account.\u0000]\u0001- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit8  to be taken.\t\u0001- `id`: The identifier of the asset for the account to be created.\u0000�Emits `Touched` event when successful.\u0018refund\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001(allow_burn \u0001\u0010bool\u0000\u001b(Y\u0001Return the deposit (if any) of an asset account or a consumer reference (if any) of an account.\u0000hThe origin must be Signed.\u0000=\u0001- `id`: The identifier of the asset for which the caller would like the deposit,  refunded.]\u0001- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.\u0000�Emits `Refunded` event when successful.<set_min_balance\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001,min_balance\u0018\u0001(T::Balance\u0000\u001c0�Sets the minimum balance of an asset.\u0000!\u0001Only works if there aren't any accounts that are holding the asset or if�the new value of `min_balance` is less than the old one.\u0000�Origin must be Signed and the sender has to be the Owner of the,asset `id`.\u0000�- `id`: The identifier of the asset.�- `min_balance`: The new value of `min_balance`.\u0000�Emits `AssetMinBalanceChanged` event when successful.,touch_other\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001d(�Create an asset account for `who`.\u0000�A deposit will be taken from the signer account.\u0000a\u0001- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account�  must have sufficient funds for a deposit to be taken.\t\u0001- `id`: The identifier of the asset for the account to be created.�- `who`: The account to be created.\u0000�Emits `Touched` event when successful.0refund_other\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001e(]\u0001Return the deposit (if any) of a target asset account. Useful if you are the depositor.\u0000]\u0001The origin must be Signed and either the account owner, depositor, or asset `Admin`. Ina\u0001order to burn a non-zero balance of the asset, the caller must be the account and should4use `refund`.\u0000\u0019\u0001- `id`: The identifier of the asset for the account holding a deposit.|- `who`: The account to refund.\u0000�Emits `Refunded` event when successful.\u0014block\b\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u001f(Y\u0001Disallow further unprivileged transfers of an asset `id` to and from an account `who`.\u00005\u0001Origin must be Signed and the sender should be the Freezer of the asset `id`.\u0000�- `id`: The identifier of the account's asset.�- `who`: The account to be unblocked.\u0000@Emits `Blocked`.\u00008Weight: `O(1)`0transfer_all\f\u0001\bid\u0010\u0001LT::AssetIdParameter\u0000\u0001\u0010dest�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001(keep_alive \u0001\u0010bool\u0000 @\u001d\u0001Transfer the entire transferable balance from the caller asset account.\u0000Y\u0001NOTE: This function only attempts to transfer _transferable_ balances. This means that=\u0001any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be]\u0001transferred by this function. To ensure that this function results in a killed account,E\u0001you might need to prepare the account by removing any reference counters, storage@deposits, etc...\u0000�The dispatch origin of this call must be Signed.\u0000\u0019\u0001- `id`: The identifier of the asset for the account holding a deposit.�- `dest`: The recipient of the transfer.Y\u0001- `keep_alive`: A boolean to determine if the `transfer_all` operation should send allM\u0001  of the funds the asset account has, causing the sender asset account to be killedE\u0001  (false), or transfer everything except at least the minimum balance, which will�  guarantee to keep the sender asset account alive (true).\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.]\u0006\f\\pallet_asset_conversion\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0018,create_pool\b\u0001\u0018asset1�\u0001DBox<T::AssetKind>\u0000\u0001\u0018asset2�\u0001DBox<T::AssetKind>\u0000\u0000\u0010\u0019\u0001Creates an empty liquidity pool and an associated new `lp_token` asset\u0001\u0001(the id of which is returned in the `Event::PoolCreated` event).\u0000\u0011\u0001Once a pool is created, someone may [`Pallet::add_liquidity`] to it.4add_liquidity\u001c\u0001\u0018asset1�\u0001DBox<T::AssetKind>\u0000\u0001\u0018asset2�\u0001DBox<T::AssetKind>\u0000\u0001<amount1_desired\u0018\u0001(T::Balance\u0000\u0001<amount2_desired\u0018\u0001(T::Balance\u0000\u0001,amount1_min\u0018\u0001(T::Balance\u0000\u0001,amount2_min\u0018\u0001(T::Balance\u0000\u0001\u001cmint_to\u0000\u00010T::AccountId\u0000\u00018�Provide liquidity into the pool of `asset1` and `asset2`.\r\u0001NOTE: an optimal amount of asset1 and asset2 will be calculated and!\u0001might be different than the provided `amount1_desired`/`amount2_desired`�thus you should provide the min amount you're happy to provide.�Params `amount1_min`/`amount2_min` represent that.I\u0001`mint_to` will be sent the liquidity tokens that represent this share of the pool.\u0000]\u0001NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,�batch an atomic call with [`Pallet::add_liquidity`] andQ\u0001[`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]%\u0001calls to render the liquidity withdrawable and rectify the exchange rate.\u0000�Once liquidity is added, someone may successfully call�[`Pallet::swap_exact_tokens_for_tokens`].@remove_liquidity\u0018\u0001\u0018asset1�\u0001DBox<T::AssetKind>\u0000\u0001\u0018asset2�\u0001DBox<T::AssetKind>\u0000\u00014lp_token_burn\u0018\u0001(T::Balance\u0000\u0001Lamount1_min_receive\u0018\u0001(T::Balance\u0000\u0001Lamount2_min_receive\u0018\u0001(T::Balance\u0000\u0001,withdraw_to\u0000\u00010T::AccountId\u0000\u0002\fM\u0001Allows you to remove liquidity by providing the `lp_token_burn` tokens that will beQ\u0001burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`5\u0001it's possible to control the min amount of returned tokens you're happy with.pswap_exact_tokens_for_tokens\u0014\u0001\u0010patha\u0006\u0001XVec<Box<T::AssetKind>>\u0000\u0001$amount_in\u0018\u0001(T::Balance\u0000\u00018amount_out_min\u0018\u0001(T::Balance\u0000\u0001\u001csend_to\u0000\u00010T::AccountId\u0000\u0001(keep_alive \u0001\u0010bool\u0000\u0003\u0018�Swap the exact amount of `asset1` into `asset2`.-\u0001`amount_out_min` param allows you to specify the min amount of the `asset2``you're happy to receive.\u0000Y\u0001[`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called0for a quote.pswap_tokens_for_exact_tokens\u0014\u0001\u0010patha\u0006\u0001XVec<Box<T::AssetKind>>\u0000\u0001(amount_out\u0018\u0001(T::Balance\u0000\u00014amount_in_max\u0018\u0001(T::Balance\u0000\u0001\u001csend_to\u0000\u00010T::AccountId\u0000\u0001(keep_alive \u0001\u0010bool\u0000\u0004\u0018\u0001\u0001Swap any amount of `asset1` to get the exact amount of `asset2`.\u0019\u0001`amount_in_max` param allows to specify the max amount of the `asset1``you're happy to provide.\u0000Y\u0001[`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called0for a quote.\u0014touch\b\u0001\u0018asset1�\u0001DBox<T::AssetKind>\u0000\u0001\u0018asset2�\u0001DBox<T::AssetKind>\u0000\u0005,M\u0001Touch an existing pool to fulfill prerequisites before providing liquidity, such asI\u0001ensuring that the pool's accounts are in place. It is typically useful when a poolU\u0001creator removes the pool's accounts and does not provide a liquidity. This action mayU\u0001involve holding assets from the caller as a deposit for creating the pool's accounts.\u0000hThe origin must be Signed.\u0000)\u0001- `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).)\u0001- `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).\u0000�Emits `Touched` event when successful.\u0004pPallet's callable functions.a\u0006\u0000\u0000\u0002�\u0000e\u0006\flpallet_state_trie_migration\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0018Xcontrol_auto_migration\u0004\u00010maybe_configi\u0006\u0001\\Option<MigrationLimits>\u0000\u0000\f�Control the automatic migration.\u0000\r\u0001The dispatch origin of this call must be [`Config::ControlOrigin`].@continue_migrate\f\u0001\u0018limitsm\u0006\u0001<MigrationLimits\u0000\u0001<real_size_upper\u0010\u0001\fu32\u0000\u00010witness_taskq\u0006\u0001@MigrationTask<T>\u0000\u0001T�Continue the migration for the given `limits`.\u0000�The dispatch origin of this call can be any signed account.\u0000]\u0001This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,�Upon successful execution, the transaction fee is returned.\u0000A\u0001The (potentially over-estimated) of the byte length of all the data read must beY\u0001provided for up-front fee-payment and weighing. In essence, the caller is guaranteeingI\u0001that executing the current `MigrationTask` with the given `limits` will not exceed�`real_size_upper` bytes of read data.\u0000E\u0001The `witness_task` is merely a helper to prevent the caller from being slashed or]\u0001generally trigger a migration that they do not intend. This parameter is just a message=\u0001from caller, saying that they believed `witness_task` was the last state of theY\u0001migration, and they only wish for their transaction to do anything, if this assumption\u0011\u0001holds. In case `witness_task` does not match, the transaction fails.\u00009\u0001Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], theM\u0001recommended way of doing this is to pass a `limit` that only bounds `count`, as the�`size` limit can always be overwritten.Hmigrate_custom_top\b\u0001\u0010keys�\u0002\u00010Vec<Vec<u8>>\u0000\u00010witness_size\u0010\u0001\fu32\u0000\u0002\u0010\t\u0001Migrate the list of top keys by iterating each of them one by one.\u0000U\u0001This does not affect the global migration process tracker ([`MigrationProcess`]), and�should only be used in case any keys are leftover due to a bug.Pmigrate_custom_child\f\u0001\u0010root8\u0001\u001cVec<u8>\u0000\u0001(child_keys�\u0002\u00010Vec<Vec<u8>>\u0000\u0001(total_size\u0010\u0001\fu32\u0000\u0003\u0018\u0011\u0001Migrate the list of child keys by iterating each of them one by one.\u0000\r\u0001All of the given child keys must be present under one `child_root`.\u0000U\u0001This does not affect the global migration process tracker ([`MigrationProcess`]), and�should only be used in case any keys are leftover due to a bug.Tset_signed_max_limits\u0004\u0001\u0018limitsm\u0006\u0001<MigrationLimits\u0000\u0004\u0004�Set the maximum limit of the signed migration.Hforce_set_progress\b\u00010progress_topu\u0006\u00014ProgressOf<T>\u0000\u00018progress_childu\u0006\u00014ProgressOf<T>\u0000\u0005$�Forcefully set the progress the running migration.\u0000]\u0001This is only useful in one case: the next key to migrate is too big to be migrated withU\u0001a signed account, in a parachain context, and we simply want to skip it. A reasonablea\u0001example of this would be `:code:`, which is both very expensive to migrate, and commonly�used, so probably it is already migrated.\u0000]\u0001In case you mess things up, you can also, in principle, use this to reset the migration process.\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.i\u0006\u0004\u0018Option\u0004\u0004T\u0001m\u0006\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000m\u0006\u0000\u0000\u0001\u0000\u0000m\u0006\flpallet_state_trie_migration\u0018pallet<MigrationLimits\u0000\u0000\b\u0001\u0010size\u0010\u0001\fu32\u0000\u0001\u0010item\u0010\u0001\fu32\u0000\u0000q\u0006\flpallet_state_trie_migration\u0018pallet4MigrationTask\u0004\u0004T\u0000\u0000\u0014\u00010progress_topu\u0006\u00014ProgressOf<T>\u0000\u00018progress_childu\u0006\u00014ProgressOf<T>\u0000\u0001\u0010size\u0010\u0001\fu32\u0000\u0001$top_items\u0010\u0001\fu32\u0000\u0001,child_items\u0010\u0001\fu32\u0000\u0000u\u0006\flpallet_state_trie_migration\u0018pallet Progress\u0004$MaxKeyLen\u0000\u0001\f\u001cToStart\u0000\u0000\u0000\u001cLastKey\u0004\u0000y\u0006\u0001dBoundedVec<u8, MaxKeyLen>\u0000\u0001\u0000 Complete\u0000\u0002\u0000\u0000y\u0006\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000}\u0006\f,pallet_sudo\u0018pallet\u0010Call\u0004\u0004T\u0000\u0001\u0014\u0010sudo\u0004\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0000\u00045\u0001Authenticates the sudo key and dispatches a function call with `Root` origin.Tsudo_unchecked_weight\b\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0001\u0018weight(\u0001\u0018Weight\u0000\u0001\u00145\u0001Authenticates the sudo key and dispatches a function call with `Root` origin.-\u0001This function does not check the weight of the call, and instead allows the�Sudo user to specify the weight of the call.\u0000�The dispatch origin for this call must be _Signed_.\u001cset_key\u0004\u0001\fnew�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0002\b]\u0001Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo\u0010key.\u001csudo_as\b\u0001\fwho�\u0003\u0001PAccountIdLookupOf<T>\u0000\u0001\u0010call�\u0005\u0001|Box<<T as Config>::RuntimeCall>\u0000\u0003\u0010M\u0001Authenticates the sudo key and dispatches a function call with `Signed` origin from@a given account.\u0000�The dispatch origin for this call must be _Signed_.(remove_key\u0000\u0004\f�Permanently removes the sudo key.\u0000l**This cannot be un-done.**\u0004\r\u0001Contains a variant per dispatchable extrinsic that this pallet has.�\u0006\b\\asset_hub_paseo_runtime0OriginCaller\u0000\u0001\f\u0018system\u0004\u0000�\u0006\u0001tframe_system::Origin<Runtime>\u0000\u0000\u0000,PolkadotXcm\u0004\u0000�\u0006\u0001Hpallet_xcm::Origin\u0000\u001f\u0000(CumulusXcm\u0004\u0000�\u0006\u0001hcumulus_pallet_xcm::Origin\u0000 \u0000\u0000�\u0006\f4frame_support dispatch$RawOrigin\u0004$AccountId\u0001\u0000\u0001\f\u0010Root\u0000\u0000\u0000\u0018Signed\u0004\u0000\u0000\u0001$AccountId\u0000\u0001\u0000\u0010None\u0000\u0002\u0000\u0000�\u0006\f(pallet_xcm\u0018pallet\u0018Origin\u0000\u0001\b\fXcm\u0004\u0000\u0001\u0001\u0001 Location\u0000\u0000\u0000 Response\u0004\u0000\u0001\u0001\u0001 Location\u0000\u0001\u0000\u0000�\u0006\fHcumulus_pallet_xcm\u0018pallet\u0018Origin\u0000\u0001\b\u0014Relay\u0000\u0000\u0000@SiblingParachain\u0004\u0000)\u0002\u0001\u0018ParaId\u0000\u0001\u0000\u0000�\u0006\f8pallet_utility\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\u00040TooManyCalls\u0000\u0000\u0004\\Too many calls batched.\u0004�The `Error` enum of this pallet.�\u0006\u0000\u0000\u0004\b\u0000\u0004\u0000�\u0006\b<pallet_multisig Multisig\u0010,BlockNumber\u0001\u0010\u001cBalance\u0001\u0018$AccountId\u0001\u00000MaxApprovals\u0000\u0000\u0010\u0001\u0010whenA\u0002\u0001XTimepoint<BlockNumber>\u0000\u0001\u001cdeposit\u0018\u0001\u001cBalance\u0000\u0001$depositor\u0000\u0001$AccountId\u0000\u0001$approvals�\u0006\u0001�BoundedVec<AccountId, MaxApprovals>\u0000\u0000�\u0006\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\u0000\u0004S\u0000\u0000\u0004\u0000�\u0001\u0018Vec<T>\u0000\u0000�\u0006\f<pallet_multisig\u0018pallet\u0014Error\u0004\u0004T\u0000\u00018@MinimumThreshold\u0000\u0000\u0004|Threshold must be 2 or greater.<AlreadyApproved\u0000\u0001\u0004�Call is already approved by this signatory.DNoApprovalsNeeded\u0000\u0002\u0004�Call doesn't need any (more) approvals.DTooFewSignatories\u0000\u0003\u0004�There are too few signatories in the list.HTooManySignatories\u0000\u0004\u0004�There are too many signatories in the list.TSignatoriesOutOfOrder\u0000\u0005\u0004\r\u0001The signatories were provided out of order; they should be ordered.LSenderInSignatories\u0000\u0006\u0004\r\u0001The sender was contained in the other signatories; it shouldn't be. NotFound\u0000\u0007\u0004�Multisig operation not found when attempting to cancel. NotOwner\u0000\b\u0004-\u0001Only the account that originally created the multisig is able to cancel it.,NoTimepoint\u0000\t\u0004\u001d\u0001No timepoint was given, yet the multisig operation is already underway.8WrongTimepoint\u0000\n\u0004-\u0001A different timepoint was given to the multisig operation that is underway.LUnexpectedTimepoint\u0000\u000b\u0004�A timepoint was given, yet no multisig operation is underway.<MaxWeightTooLow\u0000\f\u0004�The maximum weight information provided was too low.4AlreadyStored\u0000\r\u0004�The data to be stored is already stored.\u0004�The `Error` enum of this pallet.�\u0006\u0000\u0000\u0004\b�\u0006\u0018\u0000�\u0006\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0006\u0004S\u0000\u0000\u0004\u0000�\u0006\u0001\u0018Vec<T>\u0000\u0000�\u0006\b0pallet_proxy<ProxyDefinition\f$AccountId\u0001\u0000$ProxyType\u0001I\u0002,BlockNumber\u0001\u0010\u0000\f\u0001 delegate\u0000\u0001$AccountId\u0000\u0001(proxy_typeI\u0002\u0001$ProxyType\u0000\u0001\u0014delay\u0010\u0001,BlockNumber\u0000\u0000�\u0006\u0000\u0000\u0002�\u0006\u0000�\u0006\u0000\u0000\u0004\b�\u0006\u0018\u0000�\u0006\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001�\u0006\u0004S\u0000\u0000\u0004\u0000�\u0006\u0001\u0018Vec<T>\u0000\u0000�\u0006\b0pallet_proxy0Announcement\f$AccountId\u0001\u0000\u0010Hash\u00014,BlockNumber\u0001\u0010\u0000\f\u0001\u0010real\u0000\u0001$AccountId\u0000\u0001$call_hash4\u0001\u0010Hash\u0000\u0001\u0018height\u0010\u0001,BlockNumber\u0000\u0000�\u0006\u0000\u0000\u0002�\u0006\u0000�\u0006\f0pallet_proxy\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001 \u001cTooMany\u0000\u0000\u0004!\u0001There are too many proxies registered or too many announcements pending. NotFound\u0000\u0001\u0004tProxy registration not found. NotProxy\u0000\u0002\u0004�Sender is not a proxy of the account to be proxied.,Unproxyable\u0000\u0003\u0004!\u0001A call which is incompatible with the proxy type's filter was attempted.$Duplicate\u0000\u0004\u0004lAccount is already a proxy.0NoPermission\u0000\u0005\u0004\u0015\u0001Call may not be made by proxy because it may escalate its privileges.,Unannounced\u0000\u0006\u0004�Announcement, if made at all, was made too recently.,NoSelfProxy\u0000\u0007\u0004dCannot add self as proxy.\u0004�The `Error` enum of this pallet.�\u0006\f4pallet_assets\u0014types0AssetDetails\f\u001cBalance\u0001\u0018$AccountId\u0001\u00008DepositBalance\u0001\u0018\u00000\u0001\u0014owner\u0000\u0001$AccountId\u0000\u0001\u0018issuer\u0000\u0001$AccountId\u0000\u0001\u0014admin\u0000\u0001$AccountId\u0000\u0001\u001cfreezer\u0000\u0001$AccountId\u0000\u0001\u0018supply\u0018\u0001\u001cBalance\u0000\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0001,min_balance\u0018\u0001\u001cBalance\u0000\u00014is_sufficient \u0001\u0010bool\u0000\u0001 accounts\u0010\u0001\fu32\u0000\u0001,sufficients\u0010\u0001\fu32\u0000\u0001$approvals\u0010\u0001\fu32\u0000\u0001\u0018status�\u0006\u0001,AssetStatus\u0000\u0000�\u0006\f4pallet_assets\u0014types,AssetStatus\u0000\u0001\f\u0010Live\u0000\u0000\u0000\u0018Frozen\u0000\u0001\u0000(Destroying\u0000\u0002\u0000\u0000�\u0006\u0000\u0000\u0004\b\u0010\u0000\u0000�\u0006\f4pallet_assets\u0014types0AssetAccount\u0010\u001cBalance\u0001\u00188DepositBalance\u0001\u0018\u0014Extra\u00019\u0002$AccountId\u0001\u0000\u0000\u0010\u0001\u001cbalance\u0018\u0001\u001cBalance\u0000\u0001\u0018status�\u0006\u00014AccountStatus\u0000\u0001\u0018reason�\u0006\u0001�ExistenceReason<DepositBalance, AccountId>\u0000\u0001\u0014extra9\u0002\u0001\u0014Extra\u0000\u0000�\u0006\f4pallet_assets\u0014types4AccountStatus\u0000\u0001\f\u0018Liquid\u0000\u0000\u0000\u0018Frozen\u0000\u0001\u0000\u001cBlocked\u0000\u0002\u0000\u0000�\u0006\f4pallet_assets\u0014types<ExistenceReason\b\u001cBalance\u0001\u0018$AccountId\u0001\u0000\u0001\u0014 Consumer\u0000\u0000\u0000(Sufficient\u0000\u0001\u0000,DepositHeld\u0004\u0000\u0018\u0001\u001cBalance\u0000\u0002\u0000<DepositRefunded\u0000\u0003\u0000,DepositFrom\b\u0000\u0000\u0001$AccountId\u0000\u0000\u0018\u0001\u001cBalance\u0000\u0004\u0000\u0000�\u0006\u0000\u0000\u0004\f\u0010\u0000\u0000\u0000�\u0006\f4pallet_assets\u0014types Approval\b\u001cBalance\u0001\u00188DepositBalance\u0001\u0018\u0000\b\u0001\u0018amount\u0018\u0001\u001cBalance\u0000\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0000�\u0006\f4pallet_assets\u0014types4AssetMetadata\b8DepositBalance\u0001\u00184BoundedString\u0001�\u0006\u0000\u0014\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0001\u0010name�\u0006\u00014BoundedString\u0000\u0001\u0018symbol�\u0006\u00014BoundedString\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0000�\u0006\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0006\f4pallet_assets\u0018pallet\u0014Error\b\u0004T\u0000\u0004I\u0000\u0001T(BalanceLow\u0000\u0000\u0004\u0015\u0001Account balance must be greater than or equal to the transfer amount.$NoAccount\u0000\u0001\u0004�The account to alter does not exist.0NoPermission\u0000\u0002\u0004�The signing account has no permission to do the operation.\u001cUnknown\u0000\u0003\u0004xThe given asset ID is unknown.\u0018Frozen\u0000\u0004\u0004tThe origin account is frozen.\u0014InUse\u0000\u0005\u0004xThe asset ID is already taken.(BadWitness\u0000\u0006\u0004lInvalid witness data given.8MinBalanceZero\u0000\u0007\u0004�Minimum balance should be non-zero.LUnavailableConsumer\u0000\b\fY\u0001Unable to increment the consumer reference counters on the account. Either no providerM\u0001reference exists to allow a non-zero balance of a non-self-sufficient asset, or one�fewer then the maximum number of consumers has been reached.,BadMetadata\u0000\t\u0004\\Invalid metadata given.(Unapproved\u0000\n\u0004�No approval exists that would allow the transfer. WouldDie\u0000\u000b\u00045\u0001The source account would not survive the transfer and it needs to stay alive.4AlreadyExists\u0000\f\u0004�The asset-account already exists.$NoDeposit\u0000\r\u0004�The asset-account doesn't have an associated deposit.$WouldBurn\u0000\u000e\u0004�The operation would result in funds being burned.$LiveAsset\u0000\u000f\bY\u0001The asset is a live asset and is actively being used. Usually emit for operations such\u001d\u0001as `start_destroy` which require the asset to be in a destroying state.0AssetNotLive\u0000\u0010\u0004�The asset is not live, and likely being destroyed.<IncorrectStatus\u0000\u0011\u0004�The asset status is not the expected status.$NotFrozen\u0000\u0012\u0004�The asset should be frozen before the given operation.8CallbackFailed\u0000\u0013\u0004�Callback action resulted in error(BadAssetId\u0000\u0014\u0004�The asset ID must be equal to the [`NextAssetId`].\u0004�The `Error` enum of this pallet.�\u0006\f8pallet_uniques\u0014typesDCollectionDetails\b$AccountId\u0001\u00008DepositBalance\u0001\u0018\u0000(\u0001\u0014owner\u0000\u0001$AccountId\u0000\u0001\u0018issuer\u0000\u0001$AccountId\u0000\u0001\u0014admin\u0000\u0001$AccountId\u0000\u0001\u001cfreezer\u0000\u0001$AccountId\u0000\u00014total_deposit\u0018\u00018DepositBalance\u0000\u00010free_holding \u0001\u0010bool\u0000\u0001\u0014items\u0010\u0001\fu32\u0000\u00018item_metadatas\u0010\u0001\fu32\u0000\u0001(attributes\u0010\u0001\fu32\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0000�\u0006\u0000\u0000\u0004\f\u0000\u0010\u0010\u0000�\u0006\u0000\u0000\u0004\b\u0000\u0010\u0000\u0001\u0007\f8pallet_uniques\u0014types,ItemDetails\b$AccountId\u0001\u00008DepositBalance\u0001\u0018\u0000\u0010\u0001\u0014owner\u0000\u0001$AccountId\u0000\u0001 approvedm\u0002\u0001DOption<AccountId>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0000\u0005\u0007\f8pallet_uniques\u0014typesHCollectionMetadata\b8DepositBalance\u0001\u0018,StringLimit\u0000\u0000\f\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0001\u0010dataY\u0002\u0001lBoundedVec<u8, StringLimit>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0000\t\u0007\f8pallet_uniques\u0014types0ItemMetadata\b8DepositBalance\u0001\u0018,StringLimit\u0000\u0000\f\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0001\u0010dataY\u0002\u0001lBoundedVec<u8, StringLimit>\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0000\r\u0007\u0000\u0000\u0004\f\u0010a\u0002e\u0002\u0000\u0011\u0007\u0000\u0000\u0004\bi\u0002\u0018\u0000\u0015\u0007\u0000\u0000\u0004\b\u0018m\u0002\u0000\u0019\u0007\f8pallet_uniques\u0018pallet\u0014Error\b\u0004T\u0000\u0004I\u0000\u0001H0NoPermission\u0000\u0000\u0004�The signing account has no permission to do the operation.DUnknownCollection\u0000\u0001\u0004tThe given item ID is unknown.4AlreadyExists\u0000\u0002\u0004�The item ID has already been used for an item.(WrongOwner\u0000\u0003\u0004�The owner turned out to be different to what was expected.(BadWitness\u0000\u0004\u0004lInvalid witness data given.\u0014InUse\u0000\u0005\u0004tThe item ID is already taken.\u0018Frozen\u0000\u0006\u0004�The item or collection is frozen.4WrongDelegate\u0000\u0007\u0004�The delegate turned out to be different to what was expected.(NoDelegate\u0000\b\u0004xThere is no delegate approved.(Unapproved\u0000\t\u0004�No approval exists that would allow the transfer.(Unaccepted\u0000\n\u0004%\u0001The named owner has not signed ownership of the collection is acceptable.\u0018Locked\u0000\u000b\u0004LThe item is locked.@MaxSupplyReached\u0000\f\u0004lAll items have been minted.LMaxSupplyAlreadySet\u0000\r\u0004�The max supply has already been set.DMaxSupplyTooSmall\u0000\u000e\u0004A\u0001The provided max supply is less to the amount of items a collection already has.,UnknownItem\u0000\u000f\u0004tThe given item ID is unknown.(NotForSale\u0000\u0010\u0004TItem is not for sale.$BidTooLow\u0000\u0011\u0004pThe provided bid is too low.\u0004�The `Error` enum of this pallet.\u001d\u0007\f,pallet_nfts\u0014typesDCollectionDetails\b$AccountId\u0001\u00008DepositBalance\u0001\u0018\u0000\u0018\u0001\u0014owner\u0000\u0001$AccountId\u0000\u00014owner_deposit\u0018\u00018DepositBalance\u0000\u0001\u0014items\u0010\u0001\fu32\u0000\u00018item_metadatas\u0010\u0001\fu32\u0000\u00010item_configs\u0010\u0001\fu32\u0000\u0001(attributes\u0010\u0001\fu32\u0000\u0000!\u0007\f,pallet_nfts\u0014types BitFlags\u0004\u0004T\u0001%\u0007\u0000\u0004\u0000\b\u00018CollectionRole\u0000\u0000%\u0007\f,pallet_nfts\u0014types8CollectionRole\u0000\u0001\f\u0018Issuer\u0000\u0001\u0000\u001cFreezer\u0000\u0002\u0000\u0014Admin\u0000\u0004\u0000\u0000)\u0007\f,pallet_nfts\u0014types,ItemDetails\f$AccountId\u0001\u0000\u001cDeposit\u0001-\u0007$Approvals\u00011\u0007\u0000\f\u0001\u0014owner\u0000\u0001$AccountId\u0000\u0001$approvals1\u0007\u0001$Approvals\u0000\u0001\u001cdeposit-\u0007\u0001\u001cDeposit\u0000\u0000-\u0007\f,pallet_nfts\u0014types,ItemDeposit\b8DepositBalance\u0001\u0018$AccountId\u0001\u0000\u0000\b\u0001\u001caccount\u0000\u0001$AccountId\u0000\u0001\u0018amount\u0018\u00018DepositBalance\u0000\u00001\u0007\fLbounded_collectionsDbounded_btree_map<BoundedBTreeMap\f\u0004K\u0001\u0000\u0004V\u0001a\u0002\u0004S\u0000\u0000\u0004\u00005\u0007\u00018BTreeMap<K, V>\u0000\u00005\u0007\u0004 BTreeMap\b\u0004K\u0001\u0000\u0004V\u0001a\u0002\u0000\u0004\u00009\u0007\u0000\u0000\u00009\u0007\u0000\u0000\u0002=\u0007\u0000=\u0007\u0000\u0000\u0004\b\u0000a\u0002\u0000A\u0007\f,pallet_nfts\u0014typesHCollectionMetadata\b\u001cDeposit\u0001\u0018,StringLimit\u0000\u0000\b\u0001\u001cdeposit\u0018\u0001\u001cDeposit\u0000\u0001\u0010datau\u0002\u0001lBoundedVec<u8, StringLimit>\u0000\u0000E\u0007\f,pallet_nfts\u0014types0ItemMetadata\b\u001cDeposit\u0001I\u0007,StringLimit\u0000\u0000\b\u0001\u001cdepositI\u0007\u0001\u001cDeposit\u0000\u0001\u0010datau\u0002\u0001lBoundedVec<u8, StringLimit>\u0000\u0000I\u0007\f,pallet_nfts\u0014typesLItemMetadataDeposit\b8DepositBalance\u0001\u0018$AccountId\u0001\u0000\u0000\b\u0001\u001caccountm\u0002\u0001DOption<AccountId>\u0000\u0001\u0018amount\u0018\u00018DepositBalance\u0000\u0000M\u0007\u0000\u0000\u0004\u0010\u0010a\u0002y\u0002i\u0002\u0000Q\u0007\u0000\u0000\u0004\bu\u0002U\u0007\u0000U\u0007\f,pallet_nfts\u0014types@AttributeDeposit\b8DepositBalance\u0001\u0018$AccountId\u0001\u0000\u0000\b\u0001\u001caccountm\u0002\u0001DOption<AccountId>\u0000\u0001\u0018amount\u0018\u00018DepositBalance\u0000\u0000Y\u0007\fLbounded_collectionsDbounded_btree_set<BoundedBTreeSet\b\u0004T\u0001\u0000\u0004S\u0000\u0000\u0004\u0000]\u0007\u0001,BTreeSet<T>\u0000\u0000]\u0007\u0004 BTreeSet\u0004\u0004T\u0001\u0000\u0000\u0004\u0000�\u0000\u0000\u0000a\u0007\f,pallet_nfts\u0014types,PendingSwap\u00100CollectionId\u0001\u0010\u0018ItemId\u0001\u0010XItemPriceWithDirection\u0001�\u0002 Deadline\u0001\u0010\u0000\u0010\u0001Hdesired_collection\u0010\u00010CollectionId\u0000\u00010desired_itema\u0002\u00018Option<ItemId>\u0000\u0001\u0014price}\u0002\u0001xOption<ItemPriceWithDirection>\u0000\u0001 deadline\u0010\u0001 Deadline\u0000\u0000e\u0007\f,pallet_nfts\u0014types BitFlags\u0004\u0004T\u0001i\u0007\u0000\u0004\u00000\u00014PalletFeature\u0000\u0000i\u0007\f,pallet_nfts\u0014types4PalletFeature\u0000\u0001\u0010\u001cTrading\u0000\u0001\u0000(Attributes\u0000\u0002\u0000$Approvals\u0000\u0004\u0000\u0014Swaps\u0000\b\u0000\u0000m\u0007\f,pallet_nfts\u0018pallet\u0014Error\b\u0004T\u0000\u0004I\u0000\u0001�0NoPermission\u0000\u0000\u0004�The signing account has no permission to do the operation.DUnknownCollection\u0000\u0001\u0004tThe given item ID is unknown.4AlreadyExists\u0000\u0002\u0004�The item ID has already been used for an item.<ApprovalExpired\u0000\u0003\u00049\u0001The approval had a deadline that expired, so the approval isn't valid anymore.(WrongOwner\u0000\u0004\u0004�The owner turned out to be different to what was expected.(BadWitness\u0000\u0005\u0004\u0015\u0001The witness data given does not match the current state of the chain.DCollectionIdInUse\u0000\u0006\u0004|Collection ID is already taken.PItemsNonTransferable\u0000\u0007\u0004�Items within that collection are non-transferable.,NotDelegate\u0000\b\u0004�The provided account is not a delegate.4WrongDelegate\u0000\t\u0004�The delegate turned out to be different to what was expected.(Unapproved\u0000\n\u0004�No approval exists that would allow the transfer.(Unaccepted\u0000\u000b\u0004\u0019\u0001The named owner has not signed ownership acceptance of the collection.(ItemLocked\u0000\f\u0004�The item is locked (non-transferable).PLockedItemAttributes\u0000\r\u0004tItem's attributes are locked.hLockedCollectionAttributes\u0000\u000e\u0004�Collection's attributes are locked.HLockedItemMetadata\u0000\u000f\u0004hItem's metadata is locked.`LockedCollectionMetadata\u0000\u0010\u0004�Collection's metadata is locked.@MaxSupplyReached\u0000\u0011\u0004lAll items have been minted.<MaxSupplyLocked\u0000\u0012\u0004�The max supply is locked and can't be changed.DMaxSupplyTooSmall\u0000\u0013\u0004I\u0001The provided max supply is less than the number of items a collection already has.,UnknownItem\u0000\u0014\u0004tThe given item ID is unknown.,UnknownSwap\u0000\u0015\u0004LSwap doesn't exist.@MetadataNotFound\u0000\u0016\u0004�The given item has no metadata set.DAttributeNotFound\u0000\u0017\u0004�The provided attribute can't be found.(NotForSale\u0000\u0018\u0004TItem is not for sale.$BidTooLow\u0000\u0019\u0004pThe provided bid is too low.PReachedApprovalLimit\u0000\u001a\u0004�The item has reached its approval limit.<DeadlineExpired\u0000\u001b\u0004�The deadline has already expired.4WrongDuration\u0000\u001c\u00041\u0001The duration provided should be less than or equal to `MaxDeadlineDuration`.8MethodDisabled\u0000\u001d\u0004�The method is disabled by system settings.0WrongSetting\u0000\u001e\u0004�The provided setting can't be set.XInconsistentItemConfig\u0000\u001f\u0004\u0015\u0001Item's config already exists and should be equal to the provided one. NoConfig\u0000 \u0004�Config for a collection or an item can't be found.<RolesNotCleared\u0000!\u0004pSome roles were not cleared.8MintNotStarted\u0000\"\u0004dMint has not started yet.$MintEnded\u0000#\u0004\\Mint has already ended.8AlreadyClaimed\u0000$\u0004�The provided Item was already used for claiming.4IncorrectData\u0000%\u0004|The provided data is incorrect.,WrongOrigin\u0000&\u0004�The extrinsic was sent by the wrong origin.8WrongSignature\u0000'\u0004�The provided signature is incorrect.DIncorrectMetadata\u0000(\u0004�The provided metadata might be too long.dMaxAttributesLimitReached\u0000)\u0004�Can't set more attributes per one call.8WrongNamespace\u0000*\u0004�The provided namespace isn't supported in this call.HCollectionNotEmpty\u0000+\u0004�Can't delete non-empty collections.<WitnessRequired\u0000,\u0004�The witness data should be provided.\u0004�The `Error` enum of this pallet.q\u0007\u0000\u0000\u0004\b�\u0000\u0000u\u0007\u0000\u0000\u0004\f�\u0000\u0000\u0000y\u0007\f4pallet_assets\u0014types4AssetMetadata\b8DepositBalance\u0001\u00184BoundedString\u0001}\u0007\u0000\u0014\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0001\u0010name}\u0007\u00014BoundedString\u0000\u0001\u0018symbol}\u0007\u00014BoundedString\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0000}\u0007\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0007\f4pallet_assets\u0018pallet\u0014Error\b\u0004T\u0000\u0004I\u0000\u0001T(BalanceLow\u0000\u0000\u0004\u0015\u0001Account balance must be greater than or equal to the transfer amount.$NoAccount\u0000\u0001\u0004�The account to alter does not exist.0NoPermission\u0000\u0002\u0004�The signing account has no permission to do the operation.\u001cUnknown\u0000\u0003\u0004xThe given asset ID is unknown.\u0018Frozen\u0000\u0004\u0004tThe origin account is frozen.\u0014InUse\u0000\u0005\u0004xThe asset ID is already taken.(BadWitness\u0000\u0006\u0004lInvalid witness data given.8MinBalanceZero\u0000\u0007\u0004�Minimum balance should be non-zero.LUnavailableConsumer\u0000\b\fY\u0001Unable to increment the consumer reference counters on the account. Either no providerM\u0001reference exists to allow a non-zero balance of a non-self-sufficient asset, or one�fewer then the maximum number of consumers has been reached.,BadMetadata\u0000\t\u0004\\Invalid metadata given.(Unapproved\u0000\n\u0004�No approval exists that would allow the transfer. WouldDie\u0000\u000b\u00045\u0001The source account would not survive the transfer and it needs to stay alive.4AlreadyExists\u0000\f\u0004�The asset-account already exists.$NoDeposit\u0000\r\u0004�The asset-account doesn't have an associated deposit.$WouldBurn\u0000\u000e\u0004�The operation would result in funds being burned.$LiveAsset\u0000\u000f\bY\u0001The asset is a live asset and is actively being used. Usually emit for operations such\u001d\u0001as `start_destroy` which require the asset to be in a destroying state.0AssetNotLive\u0000\u0010\u0004�The asset is not live, and likely being destroyed.<IncorrectStatus\u0000\u0011\u0004�The asset status is not the expected status.$NotFrozen\u0000\u0012\u0004�The asset should be frozen before the given operation.8CallbackFailed\u0000\u0013\u0004�Callback action resulted in error(BadAssetId\u0000\u0014\u0004�The asset ID must be equal to the [`NextAssetId`].\u0004�The `Error` enum of this pallet.�\u0007\f4pallet_assets\u0014types4AssetMetadata\b8DepositBalance\u0001\u00184BoundedString\u0001�\u0007\u0000\u0014\u0001\u001cdeposit\u0018\u00018DepositBalance\u0000\u0001\u0010name�\u0007\u00014BoundedString\u0000\u0001\u0018symbol�\u0007\u00014BoundedString\u0000\u0001 decimals\b\u0001\bu8\u0000\u0001$is_frozen \u0001\u0010bool\u0000\u0000�\u0007\fLbounded_collections,bounded_vec(BoundedVec\b\u0004T\u0001\b\u0004S\u0000\u0000\u0004\u00008\u0001\u0018Vec<T>\u0000\u0000�\u0007\f4pallet_assets\u0018pallet\u0014Error\b\u0004T\u0000\u0004I\u0000\u0001T(BalanceLow\u0000\u0000\u0004\u0015\u0001Account balance must be greater than or equal to the transfer amount.$NoAccount\u0000\u0001\u0004�The account to alter does not exist.0NoPermission\u0000\u0002\u0004�The signing account has no permission to do the operation.\u001cUnknown\u0000\u0003\u0004xThe given asset ID is unknown.\u0018Frozen\u0000\u0004\u0004tThe origin account is frozen.\u0014InUse\u0000\u0005\u0004xThe asset ID is already taken.(BadWitness\u0000\u0006\u0004lInvalid witness data given.8MinBalanceZero\u0000\u0007\u0004�Minimum balance should be non-zero.LUnavailableConsumer\u0000\b\fY\u0001Unable to increment the consumer reference counters on the account. Either no providerM\u0001reference exists to allow a non-zero balance of a non-self-sufficient asset, or one�fewer then the maximum number of consumers has been reached.,BadMetadata\u0000\t\u0004\\Invalid metadata given.(Unapproved\u0000\n\u0004�No approval exists that would allow the transfer. WouldDie\u0000\u000b\u00045\u0001The source account would not survive the transfer and it needs to stay alive.4AlreadyExists\u0000\f\u0004�The asset-account already exists.$NoDeposit\u0000\r\u0004�The asset-account doesn't have an associated deposit.$WouldBurn\u0000\u000e\u0004�The operation would result in funds being burned.$LiveAsset\u0000\u000f\bY\u0001The asset is a live asset and is actively being used. Usually emit for operations such\u001d\u0001as `start_destroy` which require the asset to be in a destroying state.0AssetNotLive\u0000\u0010\u0004�The asset is not live, and likely being destroyed.<IncorrectStatus\u0000\u0011\u0004�The asset status is not the expected status.$NotFrozen\u0000\u0012\u0004�The asset should be frozen before the given operation.8CallbackFailed\u0000\u0013\u0004�Callback action resulted in error(BadAssetId\u0000\u0014\u0004�The asset ID must be equal to the [`NextAssetId`].\u0004�The `Error` enum of this pallet.�\u0007\f\\pallet_asset_conversion\u0014types PoolInfo\u0004,PoolAssetId\u0001\u0010\u0000\u0004\u0001 lp_token\u0010\u0001,PoolAssetId\u0000\u0000�\u0007\b4frame_support PalletId\u0000\u0000\u0004\u0000Y\u0001\u0001\u001c[u8; 8]\u0000\u0000�\u0007\f\\pallet_asset_conversion\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\\@InvalidAssetPair\u0000\u0000\u0004�Provided asset pair is not supported for pool.(PoolExists\u0000\u0001\u0004PPool already exists.HWrongDesiredAmount\u0000\u0002\u0004tDesired amount can't be zero.`AmountOneLessThanMinimal\u0000\u0003\bI\u0001Provided amount should be greater than or equal to the existential deposit/asset's<minimal amount.`AmountTwoLessThanMinimal\u0000\u0004\bI\u0001Provided amount should be greater than or equal to the existential deposit/asset's<minimal amount.hReserveLeftLessThanMinimal\u0000\u0005\bM\u0001Reserve needs to always be greater than or equal to the existential deposit/asset's<minimal amount.@AmountOutTooHigh\u0000\u0006\u0004�Desired amount can't be equal to the pool reserve.0PoolNotFound\u0000\u0007\u0004\\The pool doesn't exist. Overflow\u0000\b\u0004TAn overflow happened.�AssetOneDepositDidNotMeetMinimum\u0000\t\u0004)\u0001The minimal amount requirement for the first token in the pair wasn't met.�AssetTwoDepositDidNotMeetMinimum\u0000\n\u0004-\u0001The minimal amount requirement for the second token in the pair wasn't met.�AssetOneWithdrawalDidNotMeetMinimum\u0000\u000b\u0004)\u0001The minimal amount requirement for the first token in the pair wasn't met.�AssetTwoWithdrawalDidNotMeetMinimum\u0000\f\u0004-\u0001The minimal amount requirement for the second token in the pair wasn't met.pOptimalAmountLessThanDesired\u0000\r\u0004�Optimal calculated amount is less than desired.lInsufficientLiquidityMinted\u0000\u000e\u0004xInsufficient liquidity minted.4ZeroLiquidity\u0000\u000f\u0004�Requested liquidity can't be zero.(ZeroAmount\u0000\u0010\u0004TAmount can't be zero.�ProvidedMinimumNotSufficientForSwap\u0000\u0011\u0004�Calculated amount out is less than provided minimum amount.�ProvidedMaximumNotSufficientForSwap\u0000\u0012\u0004�Provided maximum amount is not sufficient for swap.,InvalidPath\u0000\u0013\u0004�The provided path must consists of 2 assets at least.4NonUniquePath\u0000\u0014\u0004�The provided path must consists of unique assets.PIncorrectPoolAssetId\u0000\u0015\u0004�It was not possible to get or increment the Id of the pool.0BelowMinimum\u0000\u0016\u0004�The destination account cannot exist with the swapped funds.\u0004�The `Error` enum of this pallet.�\u0007\f,pallet_sudo\u0018pallet\u0014Error\u0004\u0004T\u0000\u0001\u0004,RequireSudo\u0000\u0000\u0004�Sender must be the Sudo account.\u0004hError for the Sudo pallet.�\u0007\u0000\u0000\u0004$�\u0007�\u0007�\u0007�\u0007�\u0007�\u0007�\u0007�\u0007�\u0007\u0000�\u0007\u00100frame_system(extensionsTcheck_non_zero_senderHCheckNonZeroSender\u0004\u0004T\u0000\u0000\u0000\u0000�\u0007\u00100frame_system(extensionsHcheck_spec_version@CheckSpecVersion\u0004\u0004T\u0000\u0000\u0000\u0000�\u0007\u00100frame_system(extensions@check_tx_version8CheckTxVersion\u0004\u0004T\u0000\u0000\u0000\u0000�\u0007\u00100frame_system(extensions4check_genesis0CheckGenesis\u0004\u0004T\u0000\u0000\u0000\u0000�\u0007\u00100frame_system(extensions<check_mortality8CheckMortality\u0004\u0004T\u0000\u0000\u0004\u0000�\u0007\u0001\fEra\u0000\u0000�\u0007\u0010(sp_runtime\u001cgeneric\fera\fEra\u0000\u0001\u0001\u0004 Immortal\u0000\u0000\u0000\u001cMortal1\u0004\u0000\b\u0000\u0000\u0001\u0000\u001cMortal2\u0004\u0000\b\u0000\u0000\u0002\u0000\u001cMortal3\u0004\u0000\b\u0000\u0000\u0003\u0000\u001cMortal4\u0004\u0000\b\u0000\u0000\u0004\u0000\u001cMortal5\u0004\u0000\b\u0000\u0000\u0005\u0000\u001cMortal6\u0004\u0000\b\u0000\u0000\u0006\u0000\u001cMortal7\u0004\u0000\b\u0000\u0000\u0007\u0000\u001cMortal8\u0004\u0000\b\u0000\u0000\b\u0000\u001cMortal9\u0004\u0000\b\u0000\u0000\t\u0000 Mortal10\u0004\u0000\b\u0000\u0000\n\u0000 Mortal11\u0004\u0000\b\u0000\u0000\u000b\u0000 Mortal12\u0004\u0000\b\u0000\u0000\f\u0000 Mortal13\u0004\u0000\b\u0000\u0000\r\u0000 Mortal14\u0004\u0000\b\u0000\u0000\u000e\u0000 Mortal15\u0004\u0000\b\u0000\u0000\u000f\u0000 Mortal16\u0004\u0000\b\u0000\u0000\u0010\u0000 Mortal17\u0004\u0000\b\u0000\u0000\u0011\u0000 Mortal18\u0004\u0000\b\u0000\u0000\u0012\u0000 Mortal19\u0004\u0000\b\u0000\u0000\u0013\u0000 Mortal20\u0004\u0000\b\u0000\u0000\u0014\u0000 Mortal21\u0004\u0000\b\u0000\u0000\u0015\u0000 Mortal22\u0004\u0000\b\u0000\u0000\u0016\u0000 Mortal23\u0004\u0000\b\u0000\u0000\u0017\u0000 Mortal24\u0004\u0000\b\u0000\u0000\u0018\u0000 Mortal25\u0004\u0000\b\u0000\u0000\u0019\u0000 Mortal26\u0004\u0000\b\u0000\u0000\u001a\u0000 Mortal27\u0004\u0000\b\u0000\u0000\u001b\u0000 Mortal28\u0004\u0000\b\u0000\u0000\u001c\u0000 Mortal29\u0004\u0000\b\u0000\u0000\u001d\u0000 Mortal30\u0004\u0000\b\u0000\u0000\u001e\u0000 Mortal31\u0004\u0000\b\u0000\u0000\u001f\u0000 Mortal32\u0004\u0000\b\u0000\u0000 \u0000 Mortal33\u0004\u0000\b\u0000\u0000!\u0000 Mortal34\u0004\u0000\b\u0000\u0000\"\u0000 Mortal35\u0004\u0000\b\u0000\u0000#\u0000 Mortal36\u0004\u0000\b\u0000\u0000$\u0000 Mortal37\u0004\u0000\b\u0000\u0000%\u0000 Mortal38\u0004\u0000\b\u0000\u0000&\u0000 Mortal39\u0004\u0000\b\u0000\u0000'\u0000 Mortal40\u0004\u0000\b\u0000\u0000(\u0000 Mortal41\u0004\u0000\b\u0000\u0000)\u0000 Mortal42\u0004\u0000\b\u0000\u0000*\u0000 Mortal43\u0004\u0000\b\u0000\u0000+\u0000 Mortal44\u0004\u0000\b\u0000\u0000,\u0000 Mortal45\u0004\u0000\b\u0000\u0000-\u0000 Mortal46\u0004\u0000\b\u0000\u0000.\u0000 Mortal47\u0004\u0000\b\u0000\u0000/\u0000 Mortal48\u0004\u0000\b\u0000\u00000\u0000 Mortal49\u0004\u0000\b\u0000\u00001\u0000 Mortal50\u0004\u0000\b\u0000\u00002\u0000 Mortal51\u0004\u0000\b\u0000\u00003\u0000 Mortal52\u0004\u0000\b\u0000\u00004\u0000 Mortal53\u0004\u0000\b\u0000\u00005\u0000 Mortal54\u0004\u0000\b\u0000\u00006\u0000 Mortal55\u0004\u0000\b\u0000\u00007\u0000 Mortal56\u0004\u0000\b\u0000\u00008\u0000 Mortal57\u0004\u0000\b\u0000\u00009\u0000 Mortal58\u0004\u0000\b\u0000\u0000:\u0000 Mortal59\u0004\u0000\b\u0000\u0000;\u0000 Mortal60\u0004\u0000\b\u0000\u0000<\u0000 Mortal61\u0004\u0000\b\u0000\u0000=\u0000 Mortal62\u0004\u0000\b\u0000\u0000>\u0000 Mortal63\u0004\u0000\b\u0000\u0000?\u0000 Mortal64\u0004\u0000\b\u0000\u0000@\u0000 Mortal65\u0004\u0000\b\u0000\u0000A\u0000 Mortal66\u0004\u0000\b\u0000\u0000B\u0000 Mortal67\u0004\u0000\b\u0000\u0000C\u0000 Mortal68\u0004\u0000\b\u0000\u0000D\u0000 Mortal69\u0004\u0000\b\u0000\u0000E\u0000 Mortal70\u0004\u0000\b\u0000\u0000F\u0000 Mortal71\u0004\u0000\b\u0000\u0000G\u0000 Mortal72\u0004\u0000\b\u0000\u0000H\u0000 Mortal73\u0004\u0000\b\u0000\u0000I\u0000 Mortal74\u0004\u0000\b\u0000\u0000J\u0000 Mortal75\u0004\u0000\b\u0000\u0000K\u0000 Mortal76\u0004\u0000\b\u0000\u0000L\u0000 Mortal77\u0004\u0000\b\u0000\u0000M\u0000 Mortal78\u0004\u0000\b\u0000\u0000N\u0000 Mortal79\u0004\u0000\b\u0000\u0000O\u0000 Mortal80\u0004\u0000\b\u0000\u0000P\u0000 Mortal81\u0004\u0000\b\u0000\u0000Q\u0000 Mortal82\u0004\u0000\b\u0000\u0000R\u0000 Mortal83\u0004\u0000\b\u0000\u0000S\u0000 Mortal84\u0004\u0000\b\u0000\u0000T\u0000 Mortal85\u0004\u0000\b\u0000\u0000U\u0000 Mortal86\u0004\u0000\b\u0000\u0000V\u0000 Mortal87\u0004\u0000\b\u0000\u0000W\u0000 Mortal88\u0004\u0000\b\u0000\u0000X\u0000 Mortal89\u0004\u0000\b\u0000\u0000Y\u0000 Mortal90\u0004\u0000\b\u0000\u0000Z\u0000 Mortal91\u0004\u0000\b\u0000\u0000[\u0000 Mortal92\u0004\u0000\b\u0000\u0000\\\u0000 Mortal93\u0004\u0000\b\u0000\u0000]\u0000 Mortal94\u0004\u0000\b\u0000\u0000^\u0000 Mortal95\u0004\u0000\b\u0000\u0000_\u0000 Mortal96\u0004\u0000\b\u0000\u0000`\u0000 Mortal97\u0004\u0000\b\u0000\u0000a\u0000 Mortal98\u0004\u0000\b\u0000\u0000b\u0000 Mortal99\u0004\u0000\b\u0000\u0000c\u0000$Mortal100\u0004\u0000\b\u0000\u0000d\u0000$Mortal101\u0004\u0000\b\u0000\u0000e\u0000$Mortal102\u0004\u0000\b\u0000\u0000f\u0000$Mortal103\u0004\u0000\b\u0000\u0000g\u0000$Mortal104\u0004\u0000\b\u0000\u0000h\u0000$Mortal105\u0004\u0000\b\u0000\u0000i\u0000$Mortal106\u0004\u0000\b\u0000\u0000j\u0000$Mortal107\u0004\u0000\b\u0000\u0000k\u0000$Mortal108\u0004\u0000\b\u0000\u0000l\u0000$Mortal109\u0004\u0000\b\u0000\u0000m\u0000$Mortal110\u0004\u0000\b\u0000\u0000n\u0000$Mortal111\u0004\u0000\b\u0000\u0000o\u0000$Mortal112\u0004\u0000\b\u0000\u0000p\u0000$Mortal113\u0004\u0000\b\u0000\u0000q\u0000$Mortal114\u0004\u0000\b\u0000\u0000r\u0000$Mortal115\u0004\u0000\b\u0000\u0000s\u0000$Mortal116\u0004\u0000\b\u0000\u0000t\u0000$Mortal117\u0004\u0000\b\u0000\u0000u\u0000$Mortal118\u0004\u0000\b\u0000\u0000v\u0000$Mortal119\u0004\u0000\b\u0000\u0000w\u0000$Mortal120\u0004\u0000\b\u0000\u0000x\u0000$Mortal121\u0004\u0000\b\u0000\u0000y\u0000$Mortal122\u0004\u0000\b\u0000\u0000z\u0000$Mortal123\u0004\u0000\b\u0000\u0000{\u0000$Mortal124\u0004\u0000\b\u0000\u0000|\u0000$Mortal125\u0004\u0000\b\u0000\u0000}\u0000$Mortal126\u0004\u0000\b\u0000\u0000~\u0000$Mortal127\u0004\u0000\b\u0000\u0000\u0000$Mortal128\u0004\u0000\b\u0000\u0000�\u0000$Mortal129\u0004\u0000\b\u0000\u0000�\u0000$Mortal130\u0004\u0000\b\u0000\u0000�\u0000$Mortal131\u0004\u0000\b\u0000\u0000�\u0000$Mortal132\u0004\u0000\b\u0000\u0000�\u0000$Mortal133\u0004\u0000\b\u0000\u0000�\u0000$Mortal134\u0004\u0000\b\u0000\u0000�\u0000$Mortal135\u0004\u0000\b\u0000\u0000�\u0000$Mortal136\u0004\u0000\b\u0000\u0000�\u0000$Mortal137\u0004\u0000\b\u0000\u0000�\u0000$Mortal138\u0004\u0000\b\u0000\u0000�\u0000$Mortal139\u0004\u0000\b\u0000\u0000�\u0000$Mortal140\u0004\u0000\b\u0000\u0000�\u0000$Mortal141\u0004\u0000\b\u0000\u0000�\u0000$Mortal142\u0004\u0000\b\u0000\u0000�\u0000$Mortal143\u0004\u0000\b\u0000\u0000�\u0000$Mortal144\u0004\u0000\b\u0000\u0000�\u0000$Mortal145\u0004\u0000\b\u0000\u0000�\u0000$Mortal146\u0004\u0000\b\u0000\u0000�\u0000$Mortal147\u0004\u0000\b\u0000\u0000�\u0000$Mortal148\u0004\u0000\b\u0000\u0000�\u0000$Mortal149\u0004\u0000\b\u0000\u0000�\u0000$Mortal150\u0004\u0000\b\u0000\u0000�\u0000$Mortal151\u0004\u0000\b\u0000\u0000�\u0000$Mortal152\u0004\u0000\b\u0000\u0000�\u0000$Mortal153\u0004\u0000\b\u0000\u0000�\u0000$Mortal154\u0004\u0000\b\u0000\u0000�\u0000$Mortal155\u0004\u0000\b\u0000\u0000�\u0000$Mortal156\u0004\u0000\b\u0000\u0000�\u0000$Mortal157\u0004\u0000\b\u0000\u0000�\u0000$Mortal158\u0004\u0000\b\u0000\u0000�\u0000$Mortal159\u0004\u0000\b\u0000\u0000�\u0000$Mortal160\u0004\u0000\b\u0000\u0000�\u0000$Mortal161\u0004\u0000\b\u0000\u0000�\u0000$Mortal162\u0004\u0000\b\u0000\u0000�\u0000$Mortal163\u0004\u0000\b\u0000\u0000�\u0000$Mortal164\u0004\u0000\b\u0000\u0000�\u0000$Mortal165\u0004\u0000\b\u0000\u0000�\u0000$Mortal166\u0004\u0000\b\u0000\u0000�\u0000$Mortal167\u0004\u0000\b\u0000\u0000�\u0000$Mortal168\u0004\u0000\b\u0000\u0000�\u0000$Mortal169\u0004\u0000\b\u0000\u0000�\u0000$Mortal170\u0004\u0000\b\u0000\u0000�\u0000$Mortal171\u0004\u0000\b\u0000\u0000�\u0000$Mortal172\u0004\u0000\b\u0000\u0000�\u0000$Mortal173\u0004\u0000\b\u0000\u0000�\u0000$Mortal174\u0004\u0000\b\u0000\u0000�\u0000$Mortal175\u0004\u0000\b\u0000\u0000�\u0000$Mortal176\u0004\u0000\b\u0000\u0000�\u0000$Mortal177\u0004\u0000\b\u0000\u0000�\u0000$Mortal178\u0004\u0000\b\u0000\u0000�\u0000$Mortal179\u0004\u0000\b\u0000\u0000�\u0000$Mortal180\u0004\u0000\b\u0000\u0000�\u0000$Mortal181\u0004\u0000\b\u0000\u0000�\u0000$Mortal182\u0004\u0000\b\u0000\u0000�\u0000$Mortal183\u0004\u0000\b\u0000\u0000�\u0000$Mortal184\u0004\u0000\b\u0000\u0000�\u0000$Mortal185\u0004\u0000\b\u0000\u0000�\u0000$Mortal186\u0004\u0000\b\u0000\u0000�\u0000$Mortal187\u0004\u0000\b\u0000\u0000�\u0000$Mortal188\u0004\u0000\b\u0000\u0000�\u0000$Mortal189\u0004\u0000\b\u0000\u0000�\u0000$Mortal190\u0004\u0000\b\u0000\u0000�\u0000$Mortal191\u0004\u0000\b\u0000\u0000�\u0000$Mortal192\u0004\u0000\b\u0000\u0000�\u0000$Mortal193\u0004\u0000\b\u0000\u0000�\u0000$Mortal194\u0004\u0000\b\u0000\u0000�\u0000$Mortal195\u0004\u0000\b\u0000\u0000�\u0000$Mortal196\u0004\u0000\b\u0000\u0000�\u0000$Mortal197\u0004\u0000\b\u0000\u0000�\u0000$Mortal198\u0004\u0000\b\u0000\u0000�\u0000$Mortal199\u0004\u0000\b\u0000\u0000�\u0000$Mortal200\u0004\u0000\b\u0000\u0000�\u0000$Mortal201\u0004\u0000\b\u0000\u0000�\u0000$Mortal202\u0004\u0000\b\u0000\u0000�\u0000$Mortal203\u0004\u0000\b\u0000\u0000�\u0000$Mortal204\u0004\u0000\b\u0000\u0000�\u0000$Mortal205\u0004\u0000\b\u0000\u0000�\u0000$Mortal206\u0004\u0000\b\u0000\u0000�\u0000$Mortal207\u0004\u0000\b\u0000\u0000�\u0000$Mortal208\u0004\u0000\b\u0000\u0000�\u0000$Mortal209\u0004\u0000\b\u0000\u0000�\u0000$Mortal210\u0004\u0000\b\u0000\u0000�\u0000$Mortal211\u0004\u0000\b\u0000\u0000�\u0000$Mortal212\u0004\u0000\b\u0000\u0000�\u0000$Mortal213\u0004\u0000\b\u0000\u0000�\u0000$Mortal214\u0004\u0000\b\u0000\u0000�\u0000$Mortal215\u0004\u0000\b\u0000\u0000�\u0000$Mortal216\u0004\u0000\b\u0000\u0000�\u0000$Mortal217\u0004\u0000\b\u0000\u0000�\u0000$Mortal218\u0004\u0000\b\u0000\u0000�\u0000$Mortal219\u0004\u0000\b\u0000\u0000�\u0000$Mortal220\u0004\u0000\b\u0000\u0000�\u0000$Mortal221\u0004\u0000\b\u0000\u0000�\u0000$Mortal222\u0004\u0000\b\u0000\u0000�\u0000$Mortal223\u0004\u0000\b\u0000\u0000�\u0000$Mortal224\u0004\u0000\b\u0000\u0000�\u0000$Mortal225\u0004\u0000\b\u0000\u0000�\u0000$Mortal226\u0004\u0000\b\u0000\u0000�\u0000$Mortal227\u0004\u0000\b\u0000\u0000�\u0000$Mortal228\u0004\u0000\b\u0000\u0000�\u0000$Mortal229\u0004\u0000\b\u0000\u0000�\u0000$Mortal230\u0004\u0000\b\u0000\u0000�\u0000$Mortal231\u0004\u0000\b\u0000\u0000�\u0000$Mortal232\u0004\u0000\b\u0000\u0000�\u0000$Mortal233\u0004\u0000\b\u0000\u0000�\u0000$Mortal234\u0004\u0000\b\u0000\u0000�\u0000$Mortal235\u0004\u0000\b\u0000\u0000�\u0000$Mortal236\u0004\u0000\b\u0000\u0000�\u0000$Mortal237\u0004\u0000\b\u0000\u0000�\u0000$Mortal238\u0004\u0000\b\u0000\u0000�\u0000$Mortal239\u0004\u0000\b\u0000\u0000�\u0000$Mortal240\u0004\u0000\b\u0000\u0000�\u0000$Mortal241\u0004\u0000\b\u0000\u0000�\u0000$Mortal242\u0004\u0000\b\u0000\u0000�\u0000$Mortal243\u0004\u0000\b\u0000\u0000�\u0000$Mortal244\u0004\u0000\b\u0000\u0000�\u0000$Mortal245\u0004\u0000\b\u0000\u0000�\u0000$Mortal246\u0004\u0000\b\u0000\u0000�\u0000$Mortal247\u0004\u0000\b\u0000\u0000�\u0000$Mortal248\u0004\u0000\b\u0000\u0000�\u0000$Mortal249\u0004\u0000\b\u0000\u0000�\u0000$Mortal250\u0004\u0000\b\u0000\u0000�\u0000$Mortal251\u0004\u0000\b\u0000\u0000�\u0000$Mortal252\u0004\u0000\b\u0000\u0000�\u0000$Mortal253\u0004\u0000\b\u0000\u0000�\u0000$Mortal254\u0004\u0000\b\u0000\u0000�\u0000$Mortal255\u0004\u0000\b\u0000\u0000�\u0000\u0000�\u0007\u00100frame_system(extensions,check_nonce(CheckNonce\u0004\u0004T\u0000\u0000\u0004\u0000�\u0001 T::Nonce\u0000\u0000�\u0007\u00100frame_system(extensions0check_weight,CheckWeight\u0004\u0004T\u0000\u0000\u0000\u0000�\u0007\b�pallet_asset_conversion_tx_paymentPChargeAssetTxPayment\u0004\u0004T\u0000\u0000\b\u0001\ftip�\u00010BalanceOf<T>\u0000\u0001 asset_id]\u0005\u0001HOption<T::AssetId>\u0000\u0000�\u0007\btframe_metadata_hash_extensionDCheckMetadataHash\u0004\u0004T\u0000\u0000\u0004\u0001\u0010mode�\u0007\u0001\u0010Mode\u0000\u0000�\u0007\btframe_metadata_hash_extension\u0010Mode\u0000\u0001\b Disabled\u0000\u0000\u0000\u001cEnabled\u0000\u0001\u0000\u0000�\u0007\b\\asset_hub_paseo_runtime\u001cRuntime\u0000\u0000\u0000\u0000�\u0007\bHsp_consensus_slots0SlotDuration\u0000\u0000\u0004\u00000\u0001\fu64\u0000\u0000�\u0007\u0010(sp_runtime\u001cgeneric\u0014block\u0014Block\b\u0018Header\u0001�\u0007$Extrinsic\u0001�\u0007\u0000\b\u0001\u0018header�\u0007\u0001\u0018Header\u0000\u0001(extrinsics�\u0007\u00018Vec<Extrinsic>\u0000\u0000�\u0007\u0010(sp_runtime\u001cgeneric\u0018header\u0018Header\b\u0018Number\u0001\u0010\u0010Hash\u0000\u0000\u0014\u0001,parent_hash4\u00010Hash::Output\u0000\u0001\u0018number�\u0001\u0018Number\u0000\u0001(state_root4\u00010Hash::Output\u0000\u0001<extrinsics_root4\u00010Hash::Output\u0000\u0001\u0018digest<\u0001\u0018Digest\u0000\u0000�\u0007\u0010(sp_runtime\u001cgenericLunchecked_extrinsicHUncheckedExtrinsic\u0010\u001cAddress\u0001�\u0003\u0010Call\u0001�\u0005$Signature\u0001E\u0006\u0014Extra\u0001�\u0007\u0000\u0004\u00008\u0000\u0000\u0000�\u0007\u0000\u0000\u0002�\u0007\u0000�\u0007\b(sp_runtimeXExtrinsicInclusionMode\u0000\u0001\b4AllExtrinsics\u0000\u0000\u00004OnlyInherents\u0000\u0001\u0000\u0000�\u0007\b\u001csp_core8OpaqueMetadata\u0000\u0000\u0004\u00008\u0001\u001cVec<u8>\u0000\u0000�\u0007\u0004\u0018Option\u0004\u0004T\u0001�\u0007\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0007\u0000\u0000\u0001\u0000\u0000�\u0007\u0004\u0018Result\b\u0004T\u00015\u0002\u0004E\u0001�\u0007\u0001\b\bOk\u0004\u00005\u0002\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\u0007\u0000\u0000\u0001\u0000\u0000�\u0007\f(sp_runtimePtransaction_validity`TransactionValidityError\u0000\u0001\b\u001cInvalid\u0004\u0000�\u0007\u0001HInvalidTransaction\u0000\u0000\u0000\u001cUnknown\u0004\u0000\u0001\b\u0001HUnknownTransaction\u0000\u0001\u0000\u0000�\u0007\f(sp_runtimePtransaction_validityHInvalidTransaction\u0000\u00014\u0010Call\u0000\u0000\u0000\u001cPayment\u0000\u0001\u0000\u0018Future\u0000\u0002\u0000\u0014Stale\u0000\u0003\u0000 BadProof\u0000\u0004\u0000DAncientBirthBlock\u0000\u0005\u0000DExhaustsResources\u0000\u0006\u0000\u0018Custom\u0004\u0000\b\u0001\bu8\u0000\u0007\u00000BadMandatory\u0000\b\u0000LMandatoryValidation\u0000\t\u0000$BadSigner\u0000\n\u0000TIndeterminateImplicit\u0000\u000b\u00004UnknownOrigin\u0000\f\u0000\u0000\u0001\b\f(sp_runtimePtransaction_validityHUnknownTransaction\u0000\u0001\f0CannotLookup\u0000\u0000\u0000LNoUnsignedValidator\u0000\u0001\u0000\u0018Custom\u0004\u0000\b\u0001\bu8\u0000\u0002\u0000\u0000\u0005\b\b0sp_inherents0InherentData\u0000\u0000\u0004\u0001\u0010data\t\b\u0001�BTreeMap<InherentIdentifier, Vec<u8>>\u0000\u0000\t\b\u0004 BTreeMap\b\u0004K\u0001Y\u0001\u0004V\u00018\u0000\u0004\u0000\r\b\u0000\u0000\u0000\r\b\u0000\u0000\u0002\u0011\b\u0000\u0011\b\u0000\u0000\u0004\bY\u00018\u0000\u0015\b\b0sp_inherentsPCheckInherentsResult\u0000\u0000\f\u0001\u0010okay \u0001\u0010bool\u0000\u0001,fatal_error \u0001\u0010bool\u0000\u0001\u0018errors\u0005\b\u00010InherentData\u0000\u0000\u0019\b\f(sp_runtimePtransaction_validityDTransactionSource\u0000\u0001\f\u001cInBlock\u0000\u0000\u0000\u0014Local\u0000\u0001\u0000 External\u0000\u0002\u0000\u0000\u001d\b\u0004\u0018Result\b\u0004T\u0001!\b\u0004E\u0001�\u0007\u0001\b\bOk\u0004\u0000!\b\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\u0007\u0000\u0000\u0001\u0000\u0000!\b\f(sp_runtimePtransaction_validity@ValidTransaction\u0000\u0000\u0014\u0001 priority0\u0001LTransactionPriority\u0000\u0001 requires�\u0002\u0001LVec<TransactionTag>\u0000\u0001 provides�\u0002\u0001LVec<TransactionTag>\u0000\u0001$longevity0\u0001PTransactionLongevity\u0000\u0001$propagate \u0001\u0010bool\u0000\u0000%\b\u0004\u0018Option\u0004\u0004T\u0001)\b\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000)\b\u0000\u0000\u0001\u0000\u0000)\b\u0000\u0000\u0002-\b\u0000-\b\u0000\u0000\u0004\b8U\u0004\u00001\b\fhpallet_transaction_payment\u0014typesLRuntimeDispatchInfo\b\u001cBalance\u0001\u0018\u0018Weight\u0001(\u0000\f\u0001\u0018weight(\u0001\u0018Weight\u0000\u0001\u0014class`\u00014DispatchClass\u0000\u0001,partial_fee\u0018\u0001\u001cBalance\u0000\u00005\b\fhpallet_transaction_payment\u0014types(FeeDetails\u0004\u001cBalance\u0001\u0018\u0000\b\u00014inclusion_fee9\b\u0001tOption<InclusionFee<Balance>>\u0000\u0001\ftip\u0018\u0001\u001cBalance\u0000\u00009\b\u0004\u0018Option\u0004\u0004T\u0001=\b\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000=\b\u0000\u0000\u0001\u0000\u0000=\b\fhpallet_transaction_payment\u0014types0InclusionFee\u0004\u001cBalance\u0001\u0018\u0000\f\u0001 base_fee\u0018\u0001\u001cBalance\u0000\u0001\u001clen_fee\u0018\u0001\u001cBalance\u0000\u0001Ladjusted_weight_fee\u0018\u0001\u001cBalance\u0000\u0000A\b\u0004\u0018Result\b\u0004T\u0001E\b\u0004E\u0001I\b\u0001\b\bOk\u0004\u0000E\b\u0000\u0000\u0000\u0000\fErr\u0004\u0000I\b\u0000\u0000\u0001\u0000\u0000E\b\u0000\u0000\u0002\t\u0005\u0000I\b\f@xcm_runtime_apis\u0010fees\u0014Error\u0000\u0001\u00184Unimplemented\u0000\u0000\u0000dVersionedConversionFailed\u0000\u0001\u0000LWeightNotComputable\u0000\u0002\u0000LUnhandledXcmVersion\u0000\u0003\u00004AssetNotFound\u0000\u0004\u0000(Unroutable\u0000\u0005\u0000\u0000M\b\u0004\u0018Result\b\u0004T\u0001(\u0004E\u0001I\b\u0001\b\bOk\u0004\u0000(\u0000\u0000\u0000\u0000\fErr\u0004\u0000I\b\u0000\u0000\u0001\u0000\u0000Q\b\u0004\u0018Result\b\u0004T\u0001\u0018\u0004E\u0001I\b\u0001\b\bOk\u0004\u0000\u0018\u0000\u0000\u0000\u0000\fErr\u0004\u0000I\b\u0000\u0000\u0001\u0000\u0000U\b\u0004\u0018Result\b\u0004T\u0001�\u0001\u0004E\u0001I\b\u0001\b\bOk\u0004\u0000�\u0001\u0000\u0000\u0000\u0000\fErr\u0004\u0000I\b\u0000\u0000\u0001\u0000\u0000Y\b\u0004\u0018Result\b\u0004T\u0001]\b\u0004E\u0001�\b\u0001\b\bOk\u0004\u0000]\b\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\b\u0000\u0000\u0001\u0000\u0000]\b\f@xcm_runtime_apis\u001cdry_runDCallDryRunEffects\u0004\u0014Event\u0001T\u0000\u0010\u0001@execution_resulta\b\u0001hDispatchResultWithPostInfo\u0000\u00018emitted_eventsm\b\u0001(Vec<Event>\u0000\u0001$local_xcmq\b\u0001`Option<VersionedXcm<()>>\u0000\u00018forwarded_xcmsu\b\u0001�Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>\u0000\u0000a\b\u0004\u0018Result\b\u0004T\u0001e\b\u0004E\u0001i\b\u0001\b\bOk\u0004\u0000e\b\u0000\u0000\u0000\u0000\fErr\u0004\u0000i\b\u0000\u0000\u0001\u0000\u0000e\b\f4frame_support dispatch@PostDispatchInfo\u0000\u0000\b\u00014actual_weight�\u0001\u00018Option<Weight>\u0000\u0001 pays_feed\u0001\u0010Pays\u0000\u0000i\b\b(sp_runtimedDispatchErrorWithPostInfo\u0004\u0010Info\u0001e\b\u0000\b\u0001$post_infoe\b\u0001\u0010Info\u0000\u0001\u0014errorh\u00014DispatchError\u0000\u0000m\b\u0000\u0000\u0002T\u0000q\b\u0004\u0018Option\u0004\u0004T\u0001-\u0005\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000-\u0005\u0000\u0000\u0001\u0000\u0000u\b\u0000\u0000\u0002y\b\u0000y\b\u0000\u0000\u0004\b\u0011\u0002}\b\u0000}\b\u0000\u0000\u0002-\u0005\u0000�\b\f@xcm_runtime_apis\u001cdry_run\u0014Error\u0000\u0001\b4Unimplemented\u0000\u0000\u0000dVersionedConversionFailed\u0000\u0001\u0000\u0000�\b\u0004\u0018Result\b\u0004T\u0001�\b\u0004E\u0001�\b\u0001\b\bOk\u0004\u0000�\b\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\b\u0000\u0000\u0001\u0000\u0000�\b\f@xcm_runtime_apis\u001cdry_run@XcmDryRunEffects\u0004\u0014Event\u0001T\u0000\f\u0001@execution_result�\u0001\u001cOutcome\u0000\u00018emitted_eventsm\b\u0001(Vec<Event>\u0000\u00018forwarded_xcmsu\b\u0001�Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>\u0000\u0000�\b\u0004\u0018Result\b\u0004T\u0001\u0000\u0004E\u0001�\b\u0001\b\bOk\u0004\u0000\u0000\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\b\u0000\u0000\u0001\u0000\u0000�\b\f@xcm_runtime_apis,conversions\u0014Error\u0000\u0001\b,Unsupported\u0000\u0000\u0000dVersionedConversionFailed\u0000\u0001\u0000\u0000�\b\u0004\u0018Result\b\u0004T\u0001�\u0001\u0004E\u0001�\b\u0001\b\bOk\u0004\u0000�\u0001\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\b\u0000\u0000\u0001\u0000\u0000�\b\f4assets_common,runtime_apiPFungiblesAccessError\u0000\u0001\b\\AssetIdConversionFailed\u0000\u0000\u0000|AmountToBalanceConversionFailed\u0000\u0001\u0000\u0000�\b\b\\cumulus_primitives_core4CollationInfo\u0000\u0000\u0018\u0001<upward_messages�\u0002\u0001HVec<UpwardMessage>\u0000\u0001Lhorizontal_messages�\u0003\u0001`Vec<OutboundHrmpMessage>\u0000\u0001Lnew_validation_code�\b\u0001�Option<relay_chain::ValidationCode>\u0000\u0001lprocessed_downward_messages\u0010\u0001\fu32\u0000\u00018hrmp_watermark\u0010\u0001`relay_chain::BlockNumber\u0000\u0001$head_dataE\u0003\u0001 HeadData\u0000\u0000�\b\u0004\u0018Option\u0004\u0004T\u0001�\b\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\b\u0000\u0000\u0001\u0000\u0000�\b\ftpolkadot_parachain_primitives(primitives8ValidationCode\u0000\u0000\u0004\u00008\u0001\u001cVec<u8>\u0000\u0000�\b\u0004\u0018Result\b\u0004T\u00019\u0002\u0004E\u0001�\u0002\u0001\b\bOk\u0004\u00009\u0002\u0000\u0000\u0000\u0000\fErr\u0004\u0000�\u0002\u0000\u0000\u0001\u0000\u0000�\b\u0004\u0018Option\u0004\u0004T\u0001�\u0002\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\u0002\u0000\u0000\u0001\u0000\u0000�\b\u0000\u0000\u0002�\u0002\u0000�\b\u0004\u0018Option\u0004\u0004T\u0001�\b\u0001\b\u0010None\u0000\u0000\u0000\u0010Some\u0004\u0000�\b\u0000\u0000\u0001\u0000\u0000�\b\u0000\u0000\u0004\b\u0018\u0018\u0000�\b\b\\asset_hub_paseo_runtime0RuntimeError\u0000\u0001P\u0018System\u0004\u0000\u0011\u0003\u0001pframe_system::Error<Runtime>\u0000\u0000\u0000<ParachainSystem\u0004\u0000�\u0003\u0001�cumulus_pallet_parachain_system::Error<Runtime>\u0000\u0001\u0000 Balances\u0004\u0000\t\u0004\u0001|pallet_balances::Error<Runtime>\u0000\n\u0000\u001cVesting\u0004\u0000%\u0004\u0001xpallet_vesting::Error<Runtime>\u0000\u000e\u0000DCollatorSelection\u0004\u0000=\u0004\u0001�pallet_collator_selection::Error<Runtime>\u0000\u0015\u0000\u001cSession\u0004\u0000]\u0004\u0001xpallet_session::Error<Runtime>\u0000\u0016\u0000$XcmpQueue\u0004\u0000�\u0004\u0001�cumulus_pallet_xcmp_queue::Error<Runtime>\u0000\u001e\u0000,PolkadotXcm\u0004\u0000�\u0005\u0001hpallet_xcm::Error<Runtime>\u0000\u001f\u00000MessageQueue\u0004\u0000�\u0005\u0001�pallet_message_queue::Error<Runtime>\u0000#\u0000\u001cUtility\u0004\u0000�\u0006\u0001xpallet_utility::Error<Runtime>\u0000(\u0000 Multisig\u0004\u0000�\u0006\u0001|pallet_multisig::Error<Runtime>\u0000)\u0000\u0014Proxy\u0004\u0000�\u0006\u0001ppallet_proxy::Error<Runtime>\u0000*\u0000\u0018Assets\u0004\u0000�\u0006\u0001�pallet_assets::Error<Runtime, pallet_assets::Instance1>\u00002\u0000\u001cUniques\u0004\u0000\u0019\u0007\u0001xpallet_uniques::Error<Runtime>\u00003\u0000\u0010Nfts\u0004\u0000m\u0007\u0001lpallet_nfts::Error<Runtime>\u00004\u00004ForeignAssets\u0004\u0000�\u0007\u0001�pallet_assets::Error<Runtime, pallet_assets::Instance2>\u00005\u0000(PoolAssets\u0004\u0000�\u0007\u0001�pallet_assets::Error<Runtime, pallet_assets::Instance3>\u00006\u0000<AssetConversion\u0004\u0000�\u0007\u0001�pallet_asset_conversion::Error<Runtime>\u00007\u0000HStateTrieMigration\u0004\u0000�\u0002\u0001�pallet_state_trie_migration::Error<Runtime>\u0000F\u0000\u0010Sudo\u0004\u0000�\u0007\u0001lpallet_sudo::Error<Runtime>\u0000�\u0000\u0000t\u0018System\u0001\u0018SystemH\u001cAccount\u0001\u0001\u0004\u0002\u0000\fA\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004� The full account information for a particular account ID.8ExtrinsicCount\u0000\u0000\u0010\u0004\u0000\u0004� Total extrinsics count for the current block.@InherentsApplied\u0001\u0000 \u0004\u0000\u0004� Whether all inherents have been applied.,BlockWeight\u0001\u0000$\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The current weight for the block.@AllExtrinsicsLen\u0000\u0000\u0010\u0004\u0000\u0004A\u0001 Total length (in bytes) for all extrinsics put together, for the current block.$BlockHash\u0001\u0001\u0004\u0005\u00104�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� Map of block numbers to block hashes.4ExtrinsicData\u0001\u0001\u0004\u0005\u00108\u0004\u0000\u0004=\u0001 Extrinsics data for the current block (maps an extrinsic's index to its data).\u0018Number\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\u0004\t\u0001 The current block number being processed. Set by `execute_block`.(ParentHash\u0001\u00004�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004p Hash of the previous block.\u0018Digest\u0001\u0000<\u0004\u0000\u0004� Digest of the current block, also part of the block header.\u0018Events\u0001\u0000L\u0004\u0000\u001c� Events deposited for the current block.\u0000\u001d\u0001 NOTE: The item is unbound and should therefore never be read on chain.� It could otherwise inflate the PoV size of a block.\u0000-\u0001 Events have a large in-memory size. Box the events to not go out-of-memory� just in case someone still reads them from within the runtime.(EventCount\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\u0004� The number of events in the `Events<T>` list.,EventTopics\u0001\u0001\u0004\u00024�\u0002\u0004\u0000(%\u0001 Mapping between a topic (represented by T::Hash) and a vector of indexes� of events in the `<Events<T>>` list.\u0000Q\u0001 All topic vectors have deterministic storage locations depending on the topic. ThisE\u0001 allows light-clients to leverage the changes trie storage tracking mechanism and� in case of changes fetch the list of events of interest.\u0000Y\u0001 The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only justM\u0001 the `EventIndex` then in case if the topic has the same contents on the next block\u0001\u0001 no notification will be triggered thus the event might be lost.HLastRuntimeUpgrade\u0000\u0000�\u0002\u0004\u0000\u0004U\u0001 Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.TUpgradedToU32RefCount\u0001\u0000 \u0004\u0000\u0004M\u0001 True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.`UpgradedToTripleRefCount\u0001\u0000 \u0004\u0000\b]\u0001 True if we have upgraded so that AccountInfo contains three types of `RefCount`. FalseH (default) if not.8ExecutionPhase\u0000\u0000�\u0002\u0004\u0000\u0004� The execution phase of the block.DAuthorizedUpgrade\u0000\u0000�\u0002\u0004\u0000\u0004� `Some` if a code upgrade has been authorized.\u0001�\u0002\u0001X\u00180BlockWeights�\u0002u\u0001\u0007\u0000�\u0005*\u0001\u0000\u0007\u0000�Rjt\u0002\u0000@\u0001\u0002e�\u001d\u0000\u0001\u0007��,vQ\u0002\u0000�\u0000\u0001\u0007\u0000�OW\u0002\u0000�\u0000\u0001\u0000\u0000\u0002e�\u001d\u0000\u0001\u0007�t��n\u0002\u00000\u0001\u0001\u0007\u0000�Rjt\u0002\u0000@\u0001\u0001\u0007\u0000��\u001a\u001d\u0002\u0000P\u0000\u0002e�\u001d\u0000\u0000\u0000\u0000\u0004� Block & extrinsics weights: base values and limits.,BlockLength�\u00020\u0000\u0000<\u0000\u0000\u0000P\u0000\u0000\u0000P\u0000\u0004� The maximum length of a block (in bytes).8BlockHashCount\u0010\u0010\u0000\u0010\u0000\u0000\u0004U\u0001 Maximum number of block number to block hash mappings to keep (oldest pruned first). DbWeight�\u0002@@x}\u0001\u0000\u0000\u0000\u0000\u0000��\u0005\u0000\u0000\u0000\u0000\u0004\t\u0001 The weight of runtime database operations the runtime can invoke.\u001cVersion\u0001\u0003)\u0004<asset-hub-paseo<asset-hub-paseo\u0001\u0000\u0000\u0000�U\u000f\u0000\u0000\u0000\u0000\u0000H�q�\\�2b�\u0001\u0000\u0000\u0000׽آr�\re\u0001\u0000\u0000\u0000�j�h�\u0007`�\u0005\u0000\u0000\u00007��|���\u0002\u0000\u0000\u0000@�:�\u0001���\u0006\u0000\u0000\u0000Ҽ���Џ\u0015\u0003\u0000\u0000\u0000��'��?EL\u0002\u0000\u0000\u0000�<\u0005r)\u001f�\u0001\u0000\u0000\u0000����O[�?\u0001\u0000\u0000\u00007Ȼ\u0013P���\u0004\u0000\u0000\u0000��\u0014իRpY\u0003\u0000\u0000\u0000o�.�X�Ž\u0001\u0000\u0000\u0000��ȱc(�\u0002\u0000\u0000\u0000��PZ�8֜\u0001\u0000\u0000\u0000ޒ��Bk��\u0002\u0000\u0000\u0000���o=ib\u0002\u0000\u0000\u0000��w��G��\u0001\u0000\u0000\u0000��G�:�w�\u0001\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0001\u0004� Get the chain's in-code version.(SS58PrefixM\u0002\b\u0000\u0000\u0014� The designated SS58 prefix of this chain.\u00009\u0001 This replaces the \"ss58Format\" property declared in the chain spec. Reason is1\u0001 that the runtime should know about the prefix in order to make use of it asp an identifier of the chain.\u0001\u0011\u0003\u0000\u0000<ParachainSystem\u0001<ParachainSystem`DUnincludedSegment\u0001\u0000\u0015\u0003\u0004\u0000\u0018I\u0001 Latest included block descendants the runtime accepted. In other words, these area\u0001 ancestors of the currently executing block which have not been included in the observedL relay-chain state.\u0000u\u0001 The segment length is limited by the capacity returned from the [`ConsensusHook`] configured< in the pallet.lAggregatedUnincludedSegment\u0000\u0000=\u0003\u0004\u0000\fi\u0001 Storage field that keeps track of bandwidth used by the unincluded segment along with the-\u0001 latest HRMP watermark. Used for limiting the acceptance of new blocks with� respect to relay chain constraints.TPendingValidationCode\u0001\u00008\u0004\u0000\u0018Y\u0001 In case of a scheduled upgrade, this storage field contains the validation code to be$ applied.\u0000=\u0001 As soon as the relay chain gives us the go-ahead signal, we will overwrite theq\u0001 [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process\t\u0001 with the new validation code. This concludes the upgrade process.DNewValidationCode\u0000\u00008\u0004\u0000\u0014]\u0001 Validation code that is set by the parachain and is to be communicated to collator andx consequently the relay-chain.\u0000e\u0001 This will be cleared in `on_initialize` of each new block if no other pallet already set, the value.8ValidationData\u0000\u0000A\u0003\u0004\u0000\f� The [`PersistedValidationData`] set for this block.-\u0001 This value is expected to be set only once per block and it's never stored4 in the trie.PDidSetValidationCode\u0001\u0000 \u0004\u0000\u0004� Were the validation data set to notify the relay chain?dLastRelayChainBlockNumber\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\f\u001d\u0001 The relay chain block number associated with the last parachain block.\u0000� This is updated in `on_finalize`.`UpgradeRestrictionSignal\u0001\u0000I\u0003\u0004\u0000\u001cu\u0001 An option which indicates if the relay-chain restricts signalling a validation code upgrade.a\u0001 In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the producedl candidate will be invalid.\u0000q\u0001 This storage item is a mirror of the corresponding value for the current parachain from them\u0001 relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is` set after the inherent.8UpgradeGoAhead\u0001\u00005\u0003\u0004\u0000\u0014� Optional upgrade go-ahead signal from the relay-chain.\u0000q\u0001 This storage item is a mirror of the corresponding value for the current parachain from them\u0001 relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is` set after the inherent.<RelayStateProof\u0000\u0000Q\u0003\u0004\u0000\u0018� The state proof for the last relay parent block.\u0000m\u0001 This field is meant to be updated each block with the validation data inherent. Therefore,M\u0001 before processing of the inherent, e.g. in `on_initialize` this data may be stale.\u0000� This data is also absent from the genesis.XRelevantMessagingState\u0000\u0000Y\u0003\u0004\u0000\u001ce\u0001 The snapshot of some state related to messaging relevant to the current parachain as perH the relay parent.\u0000m\u0001 This field is meant to be updated each block with the validation data inherent. Therefore,M\u0001 before processing of the inherent, e.g. in `on_initialize` this data may be stale.\u0000� This data is also absent from the genesis.DHostConfiguration\u0000\u0000m\u0003\u0004\u0000\u0018)\u0001 The parachain host configuration that was obtained from the relay parent.\u0000m\u0001 This field is meant to be updated each block with the validation data inherent. Therefore,M\u0001 before processing of the inherent, e.g. in `on_initialize` this data may be stale.\u0000� This data is also absent from the genesis.8LastDmqMqcHead\u0001\u0000u\u0003�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010� The last downward message queue chain head we have observed.\u0000e\u0001 This value is loaded before and saved after processing inbound downward messages carried` by the system inherent.@LastHrmpMqcHeads\u0001\u0000y\u0003\u0004\u0000\u0010I\u0001 The message queue chain heads we have observed per each channel incoming channel.\u0000e\u0001 This value is loaded before and saved after processing inbound downward messages carried` by the system inherent.dProcessedDownwardMessages\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\f� Number of downward messages processed in a block.\u0000� This will be cleared in `on_initialize` of each new block.4HrmpWatermark\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\f� HRMP watermark that was set in a block.\u0000� This will be cleared in `on_initialize` of each new block.PHrmpOutboundMessages\u0001\u0000�\u0003\u0004\u0000\f� HRMP messages that were sent in a block.\u0000� This will be cleared in `on_initialize` of each new block.8UpwardMessages\u0001\u0000�\u0002\u0004\u0000\f� Upward messages that were sent in a block.\u0000� This will be cleared in `on_initialize` of each new block.TPendingUpwardMessages\u0001\u0000�\u0002\u0004\u0000\u00041\u0001 Upward messages that are still pending and not yet send to the relay chain.\\UpwardDeliveryFeeFactor\u0001\u0000\u001d\u0002@\u0000\u0000d����\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The factor to multiply the base delivery fee by for UMP.�AnnouncedHrmpMessagesPerCandidate\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\be\u0001 The number of HRMP messages we observed in `on_initialize` and thus used that number for� announcing the weight of `on_initialize` and `on_finalize`.hReservedXcmpWeightOverride\u0000\u0000(\u0004\u0000\b]\u0001 The weight we reserve at the beginning of the block for processing XCMP messages. This� overrides the amount set in the Config trait.dReservedDmpWeightOverride\u0000\u0000(\u0004\u0000\bY\u0001 The weight we reserve at the beginning of the block for processing DMP messages. This� overrides the amount set in the Config trait.`CustomValidationHeadData\u0000\u00008\u0004\u0000\f)\u0001 A custom head data that should be returned as result of `validate_block`.\u0000\u0011\u0001 See `Pallet::set_custom_validation_head_data` for more information.\u0001�\u0003\u0001�\u0004(SelfParaId)\u0002\u0010�\u0003\u0000\u0000\u0004� Returns the parachain ID we are running with.\u0001�\u0003\u0001\u0000$Timestamp\u0001$Timestamp\b\fNow\u0001\u00000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The current time for the current block.$DidUpdate\u0001\u0000 \u0004\u0000\u0010� Whether the timestamp has been updated in this block.\u0000U\u0001 This value is updated to `true` upon successful submission of a timestamp by a node.E\u0001 It is then checked at the end of each block execution in the `on_finalize` hook.\u0001�\u0003\u0000\u00044MinimumPeriod0 p\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0018� The minimum period between blocks.\u0000M\u0001 Be aware that this is different to the *expected* period that the block productionI\u0001 apparatus provides. Your chosen consensus system will generally work with this toa\u0001 determine a sensible block time. For example, in the Aura pallet it will be double thisp period on default settings.\u0000\u0003\u00004ParachainInfo\u00014ParachainInfo\u0004,ParachainId\u0001\u0000)\u0002\u0010d\u0000\u0000\u0000\u0000\u0001�\u0003\u0000\u0000\u0000\u0004\u0000 Balances\u0001 Balances\u001c4TotalIssuance\u0001\u0000\u0018@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The total units issued in the system.@InactiveIssuance\u0001\u0000\u0018@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\t\u0001 The total units of outstanding deactivated balance in the system.\u001cAccount\u0001\u0001\u0004\u0002\u0000\u0014\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�`\t\u0001 The Balances pallet example of storing the balance of an account.\u0000( # Example\u00004 ```nocompile�  impl pallet_balances::Config for Runtime {\u0019\u0002    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>\f  }\u0010 ```\u0000\u0015\u0001 You can also store the balance of an account in the `System` pallet.\u0000( # Example\u00004 ```nocompile�  impl pallet_balances::Config for Runtime {t   type AccountStore = System\f  }\u0010 ```\u0000Q\u0001 But this comes with tradeoffs, storing account balances in the system pallet storesm\u0001 `frame_system` data alongside the account data contrary to storing account balances in the)\u0001 `Balances` pallet, which uses a `StorageMap` to store balances data only.A\u0001 NOTE: This is only used in the case that this pallet is used to store balances.\u0014Locks\u0001\u0001\u0004\u0002\u0000�\u0003\u0004\u0000\u0010� Any liquidity locks on some account balances.%\u0001 NOTE: Should only be accessed when setting, changing and freeing a lock.\u0000�\u0001 Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/` Reserves\u0001\u0001\u0004\u0002\u0000�\u0003\u0004\u0000\f� Named reserves on some account balances.\u0000�\u0001 Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`\u0014Holds\u0001\u0001\u0004\u0002\u0000�\u0003\u0004\u0000\u0004l Holds on account balances.\u001cFreezes\u0001\u0001\u0004\u0002\u0000�\u0003\u0004\u0000\u0004� Freeze locks on account balances.\u0001�\u0003\u0001�\u0010HExistentialDeposit\u0018@\u0000��\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 A\u0001 The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!\u0000Y\u0001 If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` fora\u0001 this pallet. However, you do so at your own risk: this will open up a major DoS vector.Y\u0001 In case you have multiple sources of provider references, you may also get unexpected� behaviour if you set this to zero.\u0000� Bottom line: Do yourself a favour and make it at least one! MaxLocks\u0010\u00102\u0000\u0000\u0000\u0010� The maximum number of locks that should exist on an account.� Not strictly enforced, but used for weight estimation.\u0000�\u0001 Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`,MaxReserves\u0010\u00102\u0000\u0000\u0000\f\r\u0001 The maximum number of named reserves that can exist on an account.\u0000�\u0001 Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`(MaxFreezes\u0010\u0010\u0000\u0000\u0000\u0000\u0004a\u0001 The maximum number of individual freeze locks that can exist on an account at any time.\u0001\t\u0004\n\u0000HTransactionPayment\u0001HTransactionPayment\bDNextFeeMultiplier\u0001\u0000\u001d\u0002@\u0000\u0000d����\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008StorageVersion\u0001\u0000\r\u0004\u0004\u0000\u0000\u0000\u0001�\u0004`OperationalFeeMultiplier\b\u0004\u0005TY\u0001 A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their, `priority`\u0000Q\u0001 This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later� added to a tip component in regular `priority` calculations.M\u0001 It means that a `Normal` transaction can front-run a similarly-sized `Operational`A\u0001 extrinsic (with no tip), by including a tip value greater than the virtual tip.\u0000< ```rust,ignore@ // For `Normal`� let priority = priority_calc(tip);\u0000T // For `Operational`\u0011\u0001 let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;� let priority = priority_calc(tip + virtual_tip);\u0010 ```\u0000Q\u0001 Note that since we use `final_fee` the multiplier applies also to the regular `tip`]\u0001 sent with the transaction. So, not only does the transaction get a priority bump baseda\u0001 on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`8 transactions.\u0000\u000b\u00008AssetTxPayment\u0000\u0000\u0001�\u0000\u0000\r\u0000\u001cVesting\u0001\u001cVesting\b\u001cVesting\u0000\u0001\u0004\u0002\u0000\u0011\u0004\u0004\u0000\u0004� Information regarding the vesting of a given account.8StorageVersion\u0001\u0000\u001d\u0004\u0004\u0000\f| Storage version of the pallet.\u00001\u0001 New networks start with latest version, as determined by the genesis build.\u0001!\u0004\u0001�\bDMinVestedTransfer\u0018@\u0000��\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The minimum amount transferred to call `vested_transfer`.LMaxVestingSchedules\u0010\u0010\u001c\u0000\u0000\u0000\u0000\u0001%\u0004\u000e\u0000(Authorship\u0001(Authorship\u0004\u0018Author\u0000\u0000\u0000\u0004\u0000\u0004d Author of current block.\u0000\u0000\u0000\u0000\u0014\u0000DCollatorSelection\u0001DCollatorSelection\u00144Invulnerables\u0001\u0000)\u0004\u0004\u0000\u0004\u0011\u0001 The invulnerable, permissioned collators. This list must be sorted.4CandidateList\u0001\u0000-\u0004\u0004\u0000\u0014i\u0001 The (community, limited) collation candidates. `Candidates` and `Invulnerables` should beP mutually exclusive.\u0000u\u0001 This list is sorted in ascending order by deposit and when the deposits are equal, the least� recently updated is considered greater.DLastAuthoredBlock\u0001\u0001\u0004\u0005\u0000\u0010\u0010\u0000\u0000\u0000\u0000\u0004� Last block authored by collator.DDesiredCandidates\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\fx Desired number of candidates.\u0000u\u0001 This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct.4CandidacyBond\u0001\u0000\u0018@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f� Fixed amount to deposit to become a collator.\u0000A\u0001 When a collator calls `leave_intent` they immediately receive the deposit back.\u00019\u0004\u0001�\u0000\u0001=\u0004\u0015\u0000\u001cSession\u0001\u001cSession\u001c(Validators\u0001\u0000�\u0004\u0000\u0004| The current set of validators.0CurrentIndex\u0001\u0000\u0010\u0010\u0000\u0000\u0000\u0000\u0004x Current index of the session.4QueuedChanged\u0001\u0000 \u0004\u0000\b9\u0001 True if the underlying economic identities or weighting behind the validators� has changed in the queued validator set.(QueuedKeys\u0001\u0000A\u0004\u0004\u0000\b=\u0001 The queued keys for the next session. When the next session begins, these keys� will be used to determine the validator's session keys.HDisabledValidators\u0001\u0000]\u0002\u0004\u0000\u0014� Indices of disabled validators.\u0000=\u0001 The vec is always kept sorted so that we can find whether a given validator is=\u0001 disabled using binary search. It gets cleared when `on_session_ending` returnsd a new set of identities. NextKeys\u0000\u0001\u0004\u0005\u0000I\u0004\u0004\u0000\u0004� The next session keys for a validator. KeyOwner\u0000\u0001\u0004\u0005Q\u0004\u0000\u0004\u0000\u0004\t\u0001 The owner of a key. The key is the `KeyTypeId` + the encoded key.\u0001Y\u0004\u0001�\u0000\u0001]\u0004\u0016\u0000\u0010Aura\u0001\u0010Aura\b,Authorities\u0001\u0000a\u0004\u0004\u0000\u0004l The current authority set.,CurrentSlot\u0001\u0000i\u0004 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f� The current slot of this block.\u0000� This will be set in `on_initialize`.\u0000\u0000\u00040SlotDuration0 �.\u0000\u0000\u0000\u0000\u0000\u0000\u0010\r\u0001 The slot duration Aura should run with, expressed in milliseconds.=\u0001 The effective value of this type should not change while the chain is running.\u00005\u0001 For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const.\u0000\u0017\u0000\u001cAuraExt\u0001\u001cAuraExt\b,Authorities\u0001\u0000a\u0004\u0004\u0000\u0014� Serves as cache for the authorities.\u0000q\u0001 The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,]\u0001 but we require the old authorities to verify the seal when validating a PoV. This will\r\u0001 always be updated to the latest AuRa authorities in `on_finalize`. SlotInfo\u0000\u0000m\u0004\u0004\u0000\f� Current slot paired with a number of authored blocks.\u0000� Updated on each block initialization.\u0000\u0000\u0000\u0000\u0018\u0000$XcmpQueue\u0001$XcmpQueue\u001cPInboundXcmpSuspended\u0001\u0000q\u0004\u0004\u0000 \r\u0001 The suspended inbound XCMP channels. All others are not suspended.\u0000q\u0001 This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per blocki\u0001 to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached\u0015\u0001 within the block and therefore only included once in the proof size.\u0000e\u0001 NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proofD will be smaller.HOutboundXcmpStatus\u0001\u0000}\u0004\u0004\u0000\u0018]\u0001 The non-empty XCMP channels in order of becoming non-empty, and the index of the firstQ\u0001 and last outbound message. If the two indices are equal, then it indicates an emptyY\u0001 queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greaterY\u0001 than 65535 items. Queue indices for normal messages begin at one; zero is reserved in\u0011\u0001 case of the need to send a high-priority signal message this block.\t\u0001 The bool is true if there is a signal message waiting to be sent.POutboundXcmpMessages\u0001\u0001\b\u0002\u0005�\u0004�\u0004\u0004\u0000\u0004� The messages outbound in a given XCMP channel.8SignalMessages\u0001\u0001\u0004\u0002)\u0002�\u0004\u0004\u0000\u0004� Any signal messages waiting to be sent.,QueueConfig\u0001\u0000�\u00040 \u0000\u0000\u00000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0004\u0015\u0001 The configuration which controls the dynamics of the outbound queue.8QueueSuspended\u0001\u0000 \u0004\u0000\u0004A\u0001 Whether or not the XCMP queue is suspended from executing incoming XCMs or not.DDeliveryFeeFactor\u0001\u0001\u0004\u0005)\u0002\u001d\u0002@\u0000\u0000d����\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The factor to multiply the base delivery fee by.\u0001�\u0004\u0001�\fLMaxInboundSuspended\u0010\u0010�\u0003\u0000\u0000\u0014I\u0001 The maximum number of inbound XCMP channels that can be suspended simultaneously.\u0000]\u0001 Any further channel suspensions will fail and messages may get dropped without furtherE\u0001 notice. Choosing a high value (1000) is okay; the trade-off that is described in� [`InboundXcmpSuspended`] still applies at that scale.dMaxActiveOutboundChannels\u0010\u0010�\u0000\u0000\u0000 e\u0001 Maximal number of outbound XCMP channels that can have messages queued at the same time.\u0000U\u0001 If this is reached, then no further messages can be sent to channels that do not yet]\u0001 have a message queued. This should be set to the expected maximum of outbound channelsa\u0001 which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,]\u0001 since otherwise the congestion control protocol will not work as intended and messagesQ\u0001 may be dropped. This value increases the PoV and should therefore not be picked tooM\u0001 high. Governance needs to pay attention to not open more channels than this value.,MaxPageSize\u0010\u0010\u0000�\u0001\u0000\u0014� The maximal page size for HRMP message pages.\u0000a\u0001 A lower limit can be set dynamically, but this is the hard-limit for the PoV worst caseU\u0001 benchmarking. The limit for the size of a message is slightly below this, since some� overhead is incurred for encoding the format.\u0001�\u0004\u001e\u0000,PolkadotXcm\u0001,PolkadotXcm80QueryCounter\u0001\u00000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The latest available query index.\u001cQueries\u0000\u0001\u0004\u00020�\u0004\u0004\u0000\u0004T The ongoing queries.(AssetTraps\u0001\u0001\u0004\u00064\u0010\u0010\u0000\u0000\u0000\u0000\u0010h The existing asset traps.\u0000a\u0001 Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of\u001d\u0001 times this pair has been trapped (usually just 1 if it exists at all).8SafeXcmVersion\u0000\u0000\u0010\u0004\u0000\ba\u0001 Default version to encode XCM when latest version of destination is unknown. If `None`,=\u0001 then the destinations whose XCM version is unknown are considered unreachable.@SupportedVersion\u0000\u0001\b\u0005\u0002�\u0004\u0010\u0004\u0000\u0004� The Latest versions that we know various locations support.@VersionNotifiers\u0000\u0001\b\u0005\u0002�\u00040\u0004\u0000\u0004\u0005\u0001 All locations that we have requested version notifications from.PVersionNotifyTargets\u0000\u0001\b\u0005\u0002�\u0004�\u0004\u0004\u0000\bq\u0001 The target locations that are subscribed to our version changes, as well as the most recent� of our versions we informed them of.TVersionDiscoveryQueue\u0001\u0000�\u0004\u0004\u0000\fe\u0001 Destinations whose latest XCM version we would like to know. Duplicates not allowed, andq\u0001 the `u32` counter is the number of times that a send to the destination has been attempted,� which is used as a prioritization.@CurrentMigration\u0000\u0000�\u0004\u0004\u0000\u0004� The current migration's stage, if any.TRemoteLockedFungibles\u0000\u0001\f\u0005\u0002\u0002\u0005\u0005\r\u0005\u0004\u0000\u0004� Fungible assets which we know are locked on a remote chain.<LockedFungibles\u0000\u0001\u0004\u0002\u0000\u001d\u0005\u0004\u0000\u0004� Fungible assets which we know are locked on this chain.TXcmExecutionSuspended\u0001\u0000 \u0004\u0000\u0004� Global suspension state of the XCM executor.<ShouldRecordXcm\u0001\u0000 \u0004\u0000\u001cY\u0001 Whether or not incoming XCMs (both executed locally and received) should be recorded.� Only one XCM program will be recorded at a time.)\u0001 This is meant to be used in runtime APIs, and it's advised it stays false\r\u0001 for all other use cases, so as to not degrade regular performance.\u0000Y\u0001 Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]� implementation in the XCM executor configuration.,RecordedXcm\u0000\u00005\u0001\u0004\u0000\u0018I\u0001 If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locallyT will be stored here.)\u0001 Runtime APIs can fetch the XCM that was executed by accessing this value.\u0000Y\u0001 Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]� implementation in the XCM executor configuration.\u0001)\u0005\u0001�\u0000\u0001�\u0005\u001f\u0000(CumulusXcm\u0000\u0001�\u0005\u0001\u0015\u0002\u0000\u0000 \u0000DToKusamaXcmRouter\u0001DToKusamaXcmRouter\u0004\u0018Bridge\u0001\u0000�\u0005D\u0000\u0000d����\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001ch Bridge that we are using.\u0000q\u0001 **bridges-v1** assumptions: all outbound messages through this router are using single lanem\u0001 and to single remote consensus. If there is some other remote consensus that uses the samea\u0001 bridge hub, the separate pallet instance shall be used, In `v2` we'll have all requiredq\u0001 primitives (lane-id aka bridge-id, derived from XCM locations) to support multiple  bridgest by the same pallet instance.\u0001�\u0005\u0001\u0019\u0002\u0000\u0000\"\u00000MessageQueue\u00010MessageQueue\f0BookStateFor\u0001\u0001\u0004\u0005%\u0002�\u0005t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The index of the first and last (non-empty) pages.,ServiceHead\u0000\u0000%\u0002\u0004\u0000\u0004� The origin at which we should begin servicing.\u0014Pages\u0000\u0001\b\u0005\u0005�\u0005�\u0005\u0004\u0000\u0004� The map of page indices to pages.\u0001�\u0005\u0001!\u0002\u0010 HeapSize\u0010\u0010\u0000\u0000\u0001\u0000\u0014=\u0001 The size of the page; this implies the maximum message size which can be sent.\u0000Y\u0001 A good value depends on the expected message sizes, their weights, the weight that is]\u0001 available for processing them and the maximal needed message size. The maximal message\u0011\u0001 size is slightly lower than this as defined by [`MaxMessageLenOf`]. MaxStale\u0010\u0010\b\u0000\u0000\u0000\f]\u0001 The maximum number of stale pages (i.e. of overweight messages) allowed before cullingQ\u0001 can happen. Once there are more stale pages than this, then historical pages may be� dropped, even if they contain unprocessed overweight messages.4ServiceWeight�\u0001,\u0001\u0007\u0000\u0016о(\u0002\u0000p\u0000\u0018A\u0001 The amount of weight (if any) which should be provided to the message queue for� servicing enqueued items `on_initialize`.\u0000� This may be legitimately `None` in the case that you will call]\u0001 `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to haveT it run in `on_idle`.PIdleMaxServiceWeight�\u0001,\u0001\u0007\u0000�vH\u0017\u0002\u0000@\u0000\u0014]\u0001 The maximum amount of weight (if any) to be used from remaining weight `on_idle` whichA\u0001 should be provided to the message queue for servicing enqueued items `on_idle`.=\u0001 Useful for parachains to process messages at the same block they are received.\u0000)\u0001 If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`.\u0001�\u0005#\u0000\u001cUtility\u0000\u0001�\u0005\u00011\u0002\u0004Lbatched_calls_limit\u0010\u0010�*\u0000\u0000\u0004� The limit on the number of batched calls.\u0001�\u0006(\u0000 Multisig\u0001 Multisig\u0004$Multisigs\u0000\u0001\b\u0005\u0002�\u0006�\u0006\u0004\u0000\u0004� The set of open multisig operations.\u0001�\u0005\u0001=\u0002\f,DepositBase\u0018@\u0000ۻw\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018Y\u0001 The base amount of currency needed to reserve for creating a multisig execution or to� store a dispatch call for later.\u0000\u0001\u0001 This is held for an additional storage item whose value size is1\u0001 `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is� `32 + sizeof(AccountId)` bytes.4DepositFactor\u0018@\u0000�0\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\fU\u0001 The amount of currency needed per unit threshold when creating a multisig execution.\u0000%\u0001 This is held for adding 32 bytes more into a pre-existing storage value.8MaxSignatories\u0010\u0010d\u0000\u0000\u0000\u0004� The maximum amount of signatories allowed in the multisig.\u0001�\u0006)\u0000\u0014Proxy\u0001\u0014Proxy\b\u001cProxies\u0001\u0001\u0004\u0005\u0000�\u0006D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bE\u0001 The set of account proxies. Maps the account which has delegated to the accounts!\u0001 which are being delegated to, together with the amount held on deposit.4Announcements\u0001\u0001\u0004\u0005\u0000�\u0006D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The announcements made by the proxy (key).\u0001�\u0005\u0001E\u0002\u0018@ProxyDepositBase\u0018@\u0000�rw\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0011\u0001 The base amount of currency needed to reserve for creating a proxy.\u0000\u0001\u0001 This is held for an additional storage item whose value size is%\u0001 `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.HProxyDepositFactor\u0018@�Z2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014� The amount of currency needed per proxy added.\u00005\u0001 This is held for adding 32 bytes plus an instance of `ProxyType` more into aa\u0001 pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take� into account `32 + proxy_type.encode().len()` bytes of data.(MaxProxies\u0010\u0010 \u0000\u0000\u0000\u0004� The maximum amount of proxies allowed for a single account.(MaxPending\u0010\u0010 \u0000\u0000\u0000\u0004E\u0001 The maximum amount of time-delayed announcements that are allowed to be pending.\\AnnouncementDepositBase\u0018@\u0000�~w\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00101\u0001 The base amount of currency needed to reserve for creating an announcement.\u0000I\u0001 This is held when a new storage item holding a `Balance` is created (typically 16  bytes).dAnnouncementDepositFactor\u0018@@�d\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010� The amount of currency needed per announcement made.\u0000Y\u0001 This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)� into a pre-existing storage value.\u0001�\u0006*\u0000\u0018Assets\u0001\u0018Assets\u0014\u0014Asset\u0000\u0001\u0004\u0002\u0010�\u0006\u0004\u0000\u0004T Details of an asset.\u001cAccount\u0000\u0001\b\u0002\u0002�\u0006�\u0006\u0004\u0000\u0004� The holdings of a specific account for a specific asset.$Approvals\u0000\u0001\f\u0002\u0002\u0002�\u0006�\u0006\u0004\u0000\fY\u0001 Approved balance transfers. First balance is the amount approved for transfer. Second� is the amount of `T::Currency` reserved for storing this.I\u0001 First key is the asset ID, second key is the owner and third key is the delegate. Metadata\u0001\u0001\u0004\u0002\u0010�\u0006P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004X Metadata of an asset.,NextAssetId\u0000\u0000\u0010\u0004\u0000$m\u0001 The asset ID enforced for the next asset creation, if any present. Otherwise, this storageP item has no effect.\u0000e\u0001 This can be useful for setting up constraints for IDs of the new assets. For example, byi\u0001 providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an� auto-increment model can be applied to all new asset IDs.\u0000!\u0001 The initial next asset ID can be set using the [`GenesisConfig`] or the!\u0001 [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration.\u0001�\u0005\u0001Q\u0002\u001c@RemoveItemsLimit\u0010\u0010�\u0003\u0000\u0000\fQ\u0001 Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.\u00009\u0001 Must be configured to result in a weight that makes each call fit in a block.0AssetDeposit\u0018@�~Wx\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The basic amount of funds that must be reserved for an asset.LAssetAccountDeposit\u0018@\u0000�Mw\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bE\u0001 The amount of funds that must be reserved for a non-provider asset account to be0 maintained.LMetadataDepositBase\u0018@�V�w\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Q\u0001 The basic amount of funds that must be reserved when adding metadata to your asset.XMetadataDepositPerByte\u0018@��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bU\u0001 The additional funds that must be reserved for the number of bytes you store in your( metadata.<ApprovalDeposit\u0018@\u0000��\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004!\u0001 The amount of funds that must be reserved when creating a new approval.,StringLimit\u0010\u00102\u0000\u0000\u0000\u0004� The maximum length of a name or symbol stored on-chain.\u0001�\u00062\u0000\u001cUniques\u0001\u001cUniques(\u0014Class\u0000\u0001\u0004\u0002\u0010�\u0006\u0004\u0000\u0004d Details of a collection.LOwnershipAcceptance\u0000\u0001\u0004\u0002\u0000\u0010\u0004\u0000\u0004)\u0001 The collection, if any, of which an account is willing to take ownership.\u001cAccount\u0000\u0001\f\u0002\u0002\u0002�\u00069\u0002\u0004\u0000\bY\u0001 The items held by any given account; set out this way so that items owned by a singlel account can be enumerated.0ClassAccount\u0000\u0001\b\u0002\u0002�\u00069\u0002\u0004\u0000\bi\u0001 The collections owned by any given account; set out this way so that collections owned by� a single account can be enumerated.\u0014Asset\u0000\u0001\b\u0002\u0002�\u0002\u0001\u0007\u0004\u0000\u0004� The items in existence and their ownership details.<ClassMetadataOf\u0000\u0001\u0004\u0002\u0010\u0005\u0007\u0004\u0000\u0004h Metadata of a collection.HInstanceMetadataOf\u0000\u0001\b\u0002\u0002�\u0002\t\u0007\u0004\u0000\u0004T Metadata of an item.$Attribute\u0000\u0001\f\u0002\u0002\u0002\r\u0007\u0011\u0007\u0004\u0000\u0004p Attributes of a collection.,ItemPriceOf\u0000\u0001\b\u0002\u0002�\u0002\u0015\u0007\u0004\u0000\u0004p Price of an asset instance.LCollectionMaxSupply\u0000\u0001\u0004\u0002\u0010\u0010\u0004\u0000\u0004� Keeps track of the number of items a collection might have.\u0001�\u0005\u0001U\u0002 DCollectionDeposit\u0018@\u0000�vH\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0001 The basic amount of funds that must be reserved for collection.,ItemDeposit\u0018@\u0000��\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The basic amount of funds that must be reserved for an item.LMetadataDepositBase\u0018@�j�w\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004M\u0001 The basic amount of funds that must be reserved when adding metadata to your item.PAttributeDepositBase\u0018@\u0000�5w\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004U\u0001 The basic amount of funds that must be reserved when adding an attribute to an item.8DepositPerByte\u0018@��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bY\u0001 The additional funds that must be reserved for the number of bytes store in metadata,� either \"normal\" metadata or attribute metadata.,StringLimit\u0010\u0010�\u0000\u0000\u0000\u0004� The maximum length of data stored on-chain. KeyLimit\u0010\u0010 \u0000\u0000\u0000\u0004� The maximum length of an attribute key.(ValueLimit\u0010\u0010@\u0000\u0000\u0000\u0004� The maximum length of an attribute value.\u0001\u0019\u00073\u0000\u0010Nfts\u0001\u0010Nfts<(Collection\u0000\u0001\u0004\u0002\u0010\u001d\u0007\u0004\u0000\u0004d Details of a collection.LOwnershipAcceptance\u0000\u0001\u0004\u0002\u0000\u0010\u0004\u0000\u0004)\u0001 The collection, if any, of which an account is willing to take ownership.\u001cAccount\u0000\u0001\f\u0002\u0002\u0002�\u00069\u0002\u0004\u0000\bY\u0001 The items held by any given account; set out this way so that items owned by a singlel account can be enumerated.DCollectionAccount\u0000\u0001\b\u0002\u0002�\u00069\u0002\u0004\u0000\bi\u0001 The collections owned by any given account; set out this way so that collections owned by� a single account can be enumerated.@CollectionRoleOf\u0000\u0001\b\u0002\u0002�\u0006!\u0007\u0004\u0000\b� The items in existence and their ownership details.� Stores collection roles as per account.\u0010Item\u0000\u0001\b\u0002\u0002�\u0002)\u0007\u0004\u0000\u0004� The items in existence and their ownership details.PCollectionMetadataOf\u0000\u0001\u0004\u0002\u0010A\u0007\u0004\u0000\u0004h Metadata of a collection.8ItemMetadataOf\u0000\u0001\b\u0002\u0002�\u0002E\u0007\u0004\u0000\u0004T Metadata of an item.$Attribute\u0000\u0001\u0010\u0002\u0002\u0002\u0002M\u0007Q\u0007\u0004\u0000\u0004p Attributes of a collection.,ItemPriceOf\u0000\u0001\b\u0002\u0002�\u0002\u0015\u0007\u0004\u0000\u0004P A price of an item.dItemAttributesApprovalsOf\u0001\u0001\b\u0002\u0002�\u0002Y\u0007\u0004\u0000\u0004h Item attribute approvals.@NextCollectionId\u0000\u0000\u0010\u0004\u0000\b1\u0001 Stores the `CollectionId` that is going to be used for the next collection.� This gets incremented whenever a new collection is created.4PendingSwapOf\u0000\u0001\b\u0002\u0002�\u0002a\u0007\u0004\u0000\u0004| Handles all the pending swaps.HCollectionConfigOf\u0000\u0001\u0004\u0002\u0010\u0005\u0006\u0004\u0000\u0004` Config of a collection.0ItemConfigOf\u0000\u0001\b\u0002\u0002�\u0002-\u0006\u0004\u0000\u0004L Config of an item.\u0001\u0001\u0006\u0001q\u00028DCollectionDeposit\u0018@@��w\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0001 The basic amount of funds that must be reserved for collection.,ItemDeposit\u0018@\u00102\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The basic amount of funds that must be reserved for an item.LMetadataDepositBase\u0018@\u0010q�\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004M\u0001 The basic amount of funds that must be reserved when adding metadata to your item.PAttributeDepositBase\u0018@\u0000��\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004U\u0001 The basic amount of funds that must be reserved when adding an attribute to an item.8DepositPerByte\u0018@��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bY\u0001 The additional funds that must be reserved for the number of bytes store in metadata,� either \"normal\" metadata or attribute metadata.,StringLimit\u0010\u0010\u0000\u0001\u0000\u0000\u0004� The maximum length of data stored on-chain. KeyLimit\u0010\u0010@\u0000\u0000\u0000\u0004� The maximum length of an attribute key.(ValueLimit\u0010\u0010\u0000\u0001\u0000\u0000\u0004� The maximum length of an attribute value.8ApprovalsLimit\u0010\u0010\u0014\u0000\u0000\u0000\u0004� The maximum approvals an item could have.pItemAttributesApprovalsLimit\u0010\u0010\u001e\u0000\u0000\u0000\u0004� The maximum attributes approvals an item could have.\u001cMaxTips\u0010\u0010\n\u0000\u0000\u0000\u0004� The max number of tips a user could send.LMaxDeadlineDuration\u0010\u0010\u0000�'\u0000\u0004� The max duration in blocks for deadlines.PMaxAttributesPerCall\u0010\u0010\n\u0000\u0000\u0000\u0004� The max number of attributes a user could set per call. Featurese\u0007 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� Disables some of pallet's features.\u0001m\u00074\u00004ForeignAssets\u00014ForeignAssets\u0014\u0014Asset\u0000\u0001\u0004\u0002��\u0006\u0004\u0000\u0004T Details of an asset.\u001cAccount\u0000\u0001\b\u0002\u0002q\u0007�\u0006\u0004\u0000\u0004� The holdings of a specific account for a specific asset.$Approvals\u0000\u0001\f\u0002\u0002\u0002u\u0007�\u0006\u0004\u0000\fY\u0001 Approved balance transfers. First balance is the amount approved for transfer. Second� is the amount of `T::Currency` reserved for storing this.I\u0001 First key is the asset ID, second key is the owner and third key is the delegate. Metadata\u0001\u0001\u0004\u0002�y\u0007P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004X Metadata of an asset.,NextAssetId\u0000\u0000�\u0004\u0000$m\u0001 The asset ID enforced for the next asset creation, if any present. Otherwise, this storageP item has no effect.\u0000e\u0001 This can be useful for setting up constraints for IDs of the new assets. For example, byi\u0001 providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an� auto-increment model can be applied to all new asset IDs.\u0000!\u0001 The initial next asset ID can be set using the [`GenesisConfig`] or the!\u0001 [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration.\u0001U\u0006\u0001�\u0002\u001c@RemoveItemsLimit\u0010\u0010�\u0003\u0000\u0000\fQ\u0001 Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.\u00009\u0001 Must be configured to result in a weight that makes each call fit in a block.0AssetDeposit\u0018@�~Wx\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The basic amount of funds that must be reserved for an asset.LAssetAccountDeposit\u0018@\u0000�Mw\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bE\u0001 The amount of funds that must be reserved for a non-provider asset account to be0 maintained.LMetadataDepositBase\u0018@�V�w\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Q\u0001 The basic amount of funds that must be reserved when adding metadata to your asset.XMetadataDepositPerByte\u0018@��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bU\u0001 The additional funds that must be reserved for the number of bytes you store in your( metadata.<ApprovalDeposit\u0018@\u0000��\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004!\u0001 The amount of funds that must be reserved when creating a new approval.,StringLimit\u0010\u00102\u0000\u0000\u0000\u0004� The maximum length of a name or symbol stored on-chain.\u0001�\u00075\u0000(PoolAssets\u0001(PoolAssets\u0014\u0014Asset\u0000\u0001\u0004\u0002\u0010�\u0006\u0004\u0000\u0004T Details of an asset.\u001cAccount\u0000\u0001\b\u0002\u0002�\u0006�\u0006\u0004\u0000\u0004� The holdings of a specific account for a specific asset.$Approvals\u0000\u0001\f\u0002\u0002\u0002�\u0006�\u0006\u0004\u0000\fY\u0001 Approved balance transfers. First balance is the amount approved for transfer. Second� is the amount of `T::Currency` reserved for storing this.I\u0001 First key is the asset ID, second key is the owner and third key is the delegate. Metadata\u0001\u0001\u0004\u0002\u0010�\u0007P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004X Metadata of an asset.,NextAssetId\u0000\u0000\u0010\u0004\u0000$m\u0001 The asset ID enforced for the next asset creation, if any present. Otherwise, this storageP item has no effect.\u0000e\u0001 This can be useful for setting up constraints for IDs of the new assets. For example, byi\u0001 providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an� auto-increment model can be applied to all new asset IDs.\u0000!\u0001 The initial next asset ID can be set using the [`GenesisConfig`] or the!\u0001 [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration.\u0001Y\u0006\u0001�\u0002\u001c@RemoveItemsLimit\u0010\u0010�\u0003\u0000\u0000\fQ\u0001 Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.\u00009\u0001 Must be configured to result in a weight that makes each call fit in a block.0AssetDeposit\u0018@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� The basic amount of funds that must be reserved for an asset.LAssetAccountDeposit\u0018@\u0000�Mw\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bE\u0001 The amount of funds that must be reserved for a non-provider asset account to be0 maintained.LMetadataDepositBase\u0018@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004Q\u0001 The basic amount of funds that must be reserved when adding metadata to your asset.XMetadataDepositPerByte\u0018@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bU\u0001 The additional funds that must be reserved for the number of bytes you store in your( metadata.<ApprovalDeposit\u0018@\u0000��\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004!\u0001 The amount of funds that must be reserved when creating a new approval.,StringLimit\u0010\u00102\u0000\u0000\u0000\u0004� The maximum length of a name or symbol stored on-chain.\u0001�\u00076\u0000<AssetConversion\u0001<AssetConversion\b\u0014Pools\u0000\u0001\u0004\u0002�\u0002�\u0007\u0004\u0000\bi\u0001 Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially=\u0001 created rather than people sending tokens directly to a pool's public account.<NextPoolAssetId\u0000\u0000\u0010\u0004\u0000\b%\u0001 Stores the `PoolAssetId` that is going to be used for the next lp token.� This gets incremented whenever a new lp pool is created.\u0001]\u0006\u0001�\u0002\u001c\u0014LPFee\u0010\u0010\u0003\u0000\u0000\u0000\u0004Q\u0001 A % the liquidity providers will take of every swap. Represents 10ths of a percent.0PoolSetupFee\u0018@@-��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004� A one-time fee to setup the pool.DPoolSetupFeeAsset�\b\u0001\u0000\u00049\u0001 Asset class from [`Config::Assets`] used to pay the [`Config::PoolSetupFee`].XLiquidityWithdrawalFee�\u0002\u0010\u0000\u0000\u0000\u0000\u0004� A fee to withdraw the liquidity.@MintMinLiquidity\u0018@d\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004=\u0001 The minimum LP token amount that could be minted. Ameliorates rounding errors.DMaxSwapPathLength\u0010\u0010\u0003\u0000\u0000\u0000\u0004� The max number of hops in a swap. PalletId�\u0007 py/ascon\u0004� The pallet's id, used for deriving its sovereign account ID.\u0001�\u00077\u0000HStateTrieMigration\u0001HStateTrieMigration\f@MigrationProcess\u0001\u0000q\u00068\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010P Migration progress.\u0000]\u0001 This stores the snapshot of the last migrated keys. It can be set into motion and move� forward by any of the means provided by this pallet.(AutoLimits\u0001\u0000i\u0006\u0004\u0000\f� The limits that are imposed on automatic migrations.\u0000� If set to None, then no automatic migration happens.`SignedMigrationMaxLimits\u0000\u0000m\u0006\u0004\u0000\f� The maximum limits that the signed migration could use.\u0000� If not set, no signed submission is allowed.\u0001e\u0006\u0001�\u0002\u0004$MaxKeyLen\u0010\u0010\u0000\u0002\u0000\u0000T� Maximal number of bytes that a key can have.\u0000� FRAME itself does not limit the key length.\u0001\u0001 The concrete value must therefore depend on your storage usage.Y\u0001 A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number ofE\u0001 keys which are then hashed and concatenated, resulting in arbitrarily long keys.\u0000A\u0001 Use the *state migration RPC* to retrieve the length of the longest key in your\u0001\u0001 storage: <https://github.com/paritytech/substrate/issues/11642>\u0000)\u0001 The migration will halt with a `Halted` event if this value is too small.I\u0001 Since there is no real penalty from over-estimating, it is advised to use a large� value. The default is 512 byte.\u0000� Some key lengths for reference:� - [`frame_support::storage::StorageValue`]: 32 byte� - [`frame_support::storage::StorageMap`]: 64 byte� - [`frame_support::storage::StorageDoubleMap`]: 96 byte\u0000H For more info seeI\u0001 <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>\u0001�\u0002F\u0000\u0010Sudo\u0001\u0010Sudo\u0004\fKey\u0000\u0000\u0000\u0004\u0000\u0004� The `AccountId` of the sudo key.\u0001}\u0006\u0001�\u0002\u0000\u0001�\u0007�\u0000\u0004�\u0003�\u0005E\u0006�\u0007$HCheckNonZeroSender�\u00079\u0002@CheckSpecVersion�\u0007\u00108CheckTxVersion�\u0007\u00100CheckGenesis�\u000748CheckMortality�\u00074(CheckNonce�\u00079\u0002,CheckWeight�\u00079\u0002PChargeAssetTxPayment�\u00079\u0002DCheckMetadataHash�\u0007��\u0007H\u001cAuraApi\b4slot_duration\u0000�\u0007\f� Returns the slot duration for Aura.\u0000%\u0001 Currently, only the value provided by this type at genesis will be used.,authorities\u0000e\u0004\u0004� Return the current set of authorities.\u0004� API necessary for block authorship with aura.`AuraUnincludedSegmentApi\u00048can_build_upon\b4included_hash4\u0010sloti\u0004 (9\u0001 Whether it is legal to extend the chain, assuming the given block is the most5\u0001 recently included one as-of the relay parent that will be built against, and@ the given slot.\u0000Q\u0001 This should be consistent with the logic the runtime uses when validating blocks to8 avoid issues.\u0000a\u0001 When the unincluded segment is empty, i.e. `included_hash == at`, where at is the blocka\u0001 whose state we are querying against, this must always return `true` as long as the slot� is more recent than the included block itself.(5\u0001 This runtime API is used to inform potential block authors whether they will%\u0001 have the right to author at a slot, assuming they have claimed the slot.\u0000u\u0001 In particular, this API allows Aura-based parachains to regulate their \"unincluded segment\",m\u0001 which is the section of the head of the chain which has not yet been made available in the4 relay chain.\u0000a\u0001 When the unincluded segment is short, Aura chains will allow authors to create multiple]\u0001 blocks per slot in order to build a backlog. When it is saturated, this API will limit� the amount of blocks that can be created.\u0010Core\f\u001cversion\u0000\u0001\u0003\u0004� Returns the version of the runtime.4execute_block\u0004\u0014block�\u00079\u0002\u0004d Execute the given block.@initialize_block\u0004\u0018header�\u0007�\u0007\u0004A\u0001 Initialize a block with the given header and return the runtime executive mode.\u0004!\u0001 The `Core` runtime api that every Substrate runtime needs to implement. Metadata\f metadata\u0000�\u0007\u0004� Returns the metadata of a runtime.Lmetadata_at_version\u0004\u001cversion\u0010�\u0007\u0010� Returns the metadata at a given version.\u0000\u0005\u0001 If the given `version` isn't supported, this will return `None`.u\u0001 Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime.Dmetadata_versions\u0000]\u0002\f� Returns the supported metadata versions.\u0000� This can be used to call `metadata_at_version`.\u0004\u0001\u0001 The `Metadata` api trait that returns metadata for the runtime.0BlockBuilder\u0010<apply_extrinsic\u0004$extrinsic�\u0007�\u0007\u0010l Apply the given extrinsic.\u00009\u0001 Returns an inclusion outcome which specifies if this extrinsic is included inL this block or not.8finalize_block\u0000�\u0007\u0004h Finish the current block.Linherent_extrinsics\u0004 inherent\u0005\b�\u0007\u0004=\u0001 Generate inherent extrinsics. The inherent data will vary from chain to chain.<check_inherents\b\u0014block�\u0007\u0010data\u0005\b\u0015\b\u0004U\u0001 Check that the inherents are valid. The inherent data will vary from chain to chain.\u0004q\u0001 The `BlockBuilder` api trait that provides the required functionality for building a block.XTaggedTransactionQueue\u0004Pvalidate_transaction\f\u0018source\u0019\b\btx�\u0007(block_hash4\u001d\b$h Validate the transaction.\u0000e\u0001 This method is invoked by the transaction pool to learn details about given transaction.E\u0001 The implementation should make sure to verify the correctness of the transactionM\u0001 against current state. The given `block_hash` corresponds to the hash of the block| that is used as current state.\u0000E\u0001 Note that this call may be performed by the pool multiple times and transactions� might be verified in any possible order.\u0004M\u0001 The `TaggedTransactionQueue` api trait for interfering with the transaction queue.DOffchainWorkerApi\u0004<offchain_worker\u0004\u0018header�\u00079\u0002\u0004� Starts the off-chain task for given block header.\u0004d The offchain worker api.,SessionKeys\bTgenerate_session_keys\u0004\u0010seed\u0001\u00058\u001c\u0015\u0001 Generate a set of session keys with optionally using the given seed.\t\u0001 The keys should be stored within the keystore exposed via runtime< externalities.\u0000� The seed needs to be a valid `utf8` string.\u0000� Returns the concatenated SCALE encoded public keys.Ldecode_session_keys\u0004\u001cencoded8%\b\f� Decode the given public session keys.\u0000� Returns the list of public raw public keys + key type.\u0004h Session keys runtime api.<AccountNonceApi\u00044account_nonce\u0004\u001caccount\u0000\u0010\u0004� Get current account nonce of given `AccountId`.\u0004� The API to query account nonce.TTransactionPaymentApi\u0010(query_info\b\fuxt�\u0007\flen\u00101\b\u0000Dquery_fee_details\b\fuxt�\u0007\flen\u00105\b\u0000Lquery_weight_to_fee\u0004\u0018weight(\u0018\u0000Lquery_length_to_fee\u0004\u0018length\u0010\u0018\u0000\u0000dTransactionPaymentCallApi\u0010<query_call_info\b\u0010call�\u0005\flen\u00101\b\u0004I\u0001 Query information of a dispatch class, weight, and fee of a given encoded `Call`.Xquery_call_fee_details\b\u0010call�\u0005\flen\u00105\b\u0004� Query fee details of a given encoded `Call`.Lquery_weight_to_fee\u0004\u0018weight(\u0018\u0004\u0001\u0001 Query the output of the current `WeightToFee` given some input.Lquery_length_to_fee\u0004\u0018length\u0010\u0018\u0004\u0001\u0001 Query the output of the current `LengthToFee` given some input.\u00004XcmPaymentApi\u0010|query_acceptable_payment_assets\u0004,xcm_version\u0010A\b\u0014� Returns a list of acceptable payment assets.\u00000 # Arguments\u0000h * `xcm_version`: Version.@query_xcm_weight\u0004\u001cmessage-\u0005M\b\u0014� Returns a weight needed to execute a XCM.\u00000 # Arguments\u0000t * `message`: `VersionedXcm`.dquery_weight_to_asset_fee\b\u0018weight(\u0014asset\t\u0005Q\b\u0018� Converts a weight into a fee for the specified `AssetId`.\u00000 # Arguments\u0000� * `weight`: convertible `Weight`.| * `asset`: `VersionedAssetId`.Lquery_delivery_fees\b,destination\u0011\u0002\u001cmessage-\u0005U\b \u001d\u0001 Get delivery fees for sending a specific `message` to a `destination`.� These always come in a specific asset, defined by the chain.\u00000 # Arguments�\u0001 * `message`: The message that'll be sent, necessary because most delivery fees are based on the\\   size of the message.a\u0001 * `destination`: The destination to send the message to. Different destinations may use�   different senders that charge different fees.,p A trait of XCM payment API.\u0000� API provides functionality for obtaining:\u0000� * the weight required to execute an XCM message,\u0005\u0001 * a list of acceptable `AssetId`s for message execution payment,\u0001\u0001 * the cost of the weight in the specified acceptable `AssetId`.� * the fees for an XCM message delivery.\u0000� To determine the execution weight of the calls required foru\u0001 [`xcm::latest::Instruction::Transact`] instruction, `TransactionPaymentCallApi` can be used.$DryRunApi\b0dry_run_call\f\u0018origin�\u0006\u0010call�\u0005Lresult_xcms_version\u0010Y\b\u0004D Dry run call V2.,dry_run_xcm\b<origin_location\u0011\u0002\fxcmq\u0005�\b\u0004P Dry run XCM program$�\u0001 API for dry-running extrinsics and XCM programs to get the programs that need to be passed to the fees API.\u0000�\u0001 All calls return a vector of tuples (location, xcm) where each \"xcm\" is executed in \"location\".� If there's local execution, the location will be \"Here\".\u001d\u0001 This vector can be used to calculate both execution and delivery fees.\u0000�\u0001 Calls or XCMs might fail when executed, this doesn't mean the result of these calls will be an `Err`.e\u0001 In those cases, there might still be a valid result, with the execution error inside it.e\u0001 The only reasons why these calls might return an error are listed in the [`Error`] enum.PLocationToAccountApi\u0004@convert_location\u0004 location\u0011\u0002�\b\u0004� Converts `Location` to `AccountId`.\u0004\r\u0001 API for useful conversions between XCM `Location` and `AccountId`.0FungiblesApi\u0004Xquery_account_balances\u0004\u001caccount\u0000�\b\u0004� Returns the list of all [`Asset`] that an `AccountId` has.\u0004� The API for querying account's balances from runtime.PCollectCollationInfo\u0004Xcollect_collation_info\u0004\u0018header�\u0007�\b\u0010� Collect information about a collation.\u0000� The given `header` is the header of the built block for that� we are collecting the collation info for.\u0004� Runtime api to collect information about a collation.8GenesisBuilder\f,build_state\u0004\u0010json8�\b(e\u0001 Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the$ storage.\u0000)\u0001 In the case of a FRAME-based runtime, this function deserializes the fullU\u0001 `RuntimeGenesisConfig` from the given JSON blob and puts it into the storage. If theU\u0001 provided JSON blob is incorrect or incomplete or the deserialization fails, an error4 is returned.\u0000]\u0001 Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no\\ defaults will be used.(get_preset\u0004\bid�\b\u0001\u00058a\u0001 Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by\u0018 `id`.\u0000U\u0001 If `id` is `None` the function should return JSON blob representation of the defaultI\u0001 `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default` `RuntimeGenesisConfig`.\u0000!\u0001 Otherwise function returns a JSON representation of the built-in, namedQ\u0001 `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does nota\u0001 exist. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list ofM\u0001 (potentially nested) key-value pairs that are intended for customizing the defaulte\u0001 runtime genesis config. The patch shall be merged (rfc7386) with the JSON representationa\u0001 of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can� be used in `build_state` method.0preset_names\u0000�\b\u0010Q\u0001 Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets.\u0000a\u0001 The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If\u0001\u0001 no named presets are provided by the runtime the list is empty.\u0004� API to interact with `RuntimeGenesisConfig` for the runtimeHAssetConversionApi\f�quote_price_tokens_for_exact_tokens\u0010\u0018asset1�\u0018asset2�\u0018amount\u0018,include_fee �\u0005\u0010� Provides a quote for [`Pallet::swap_tokens_for_exact_tokens`].\u00009\u0001 Note that the price may have changed by the time the transaction is executed.� (Use `amount_in_max` to control slippage.)�quote_price_exact_tokens_for_tokens\u0010\u0018asset1�\u0018asset2�\u0018amount\u0018,include_fee �\u0005\u0010� Provides a quote for [`Pallet::swap_exact_tokens_for_tokens`].\u00009\u0001 Note that the price may have changed by the time the transaction is executed.� (Use `amount_out_min` to control slippage.)0get_reserves\b\u0018asset1�\u0018asset2��\b\u0004\u0005\u0001 Returns the size of the liquidity pool for the given asset pair.\b!\u0001 This runtime api allows people to query the size of the liquidity poolsp and quote prices for swaps.�\u0005T�\b\u0000",
      "type": "registry:file",
      "target": ".papi/metadata/paseo_asset_hub.scale"
    },
    {
      "path": "registry/new-york/POLKADOT_SETUP.md",
      "content": "# Polkadot API Setup\n\nAfter installing this component, you need to set up Polkadot API descriptors:\n\n## 1. Generate descriptors\n\n```bash\nnpx papi\n```\n\n## 2. Add the chains your app should connect to\n\nYou can add all\n[known chains](https://github.com/polkadot-api/polkadot-api/tree/main/packages/known-chains),\ne.g. Polkadot, Kusama, Paseo, ... or\n[from websockets or files](https://papi.how/codegen#codegen)\n\n```bash\npnpm papi add polkadot_people -n polkadot_people\n# if using npx\n# npx papi add polkadot_people -n polkadot_people\n\n# or from websocket endpoint\npnpm papi add -w wss://rpc1.paseo.popnetwork.xyz pop\n# npx papi add polkadot_people -n polkadot_people\n```\n\n## 3. Reinstall dependencies\n\n```bash\nnpm install\n# or\npnpm install\n# or\nyarn install\n```\n\n## 4. Wrap your app with the PolkadotProvider\n\n```tsx\nimport { PolkadotProvider } from \"@/providers/polkadot-provider\";\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <PolkadotProvider>{children}</PolkadotProvider>\n      </body>\n    </html>\n  );\n}\n```\n\nThe `.papi/polkadot-api.json` file configures which chains to generate\ndescriptors for. You can modify it to target different Polkadot/Kusama chains.\n",
      "type": "registry:file",
      "target": "POLKADOT_SETUP.md"
    }
  ]
}